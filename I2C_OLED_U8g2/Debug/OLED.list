
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f34  08009f34  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009f34  08009f34  00019f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f3c  08009f3c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f3c  08009f3c  00019f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  20000070  08009fb4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  08009fb4  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006038e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004299  00000000  00000000  00080426  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018b0  00000000  00000000  000846c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  00085f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a92c  00000000  00000000  000875c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017db6  00000000  00000000  000a1ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a4194  00000000  00000000  000b9caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015de3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb4  00000000  00000000  0015debc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008658 	.word	0x08008658

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08008658 	.word	0x08008658

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	b5c0      	push	{r6, r7, lr}
 800043a:	0004      	movs	r4, r0
 800043c:	b082      	sub	sp, #8
 800043e:	000d      	movs	r5, r1
 8000440:	4691      	mov	r9, r2
 8000442:	4698      	mov	r8, r3
 8000444:	428b      	cmp	r3, r1
 8000446:	d82f      	bhi.n	80004a8 <__udivmoddi4+0x78>
 8000448:	d02c      	beq.n	80004a4 <__udivmoddi4+0x74>
 800044a:	4641      	mov	r1, r8
 800044c:	4648      	mov	r0, r9
 800044e:	f000 f8b1 	bl	80005b4 <__clzdi2>
 8000452:	0029      	movs	r1, r5
 8000454:	0006      	movs	r6, r0
 8000456:	0020      	movs	r0, r4
 8000458:	f000 f8ac 	bl	80005b4 <__clzdi2>
 800045c:	1a33      	subs	r3, r6, r0
 800045e:	469c      	mov	ip, r3
 8000460:	3b20      	subs	r3, #32
 8000462:	469a      	mov	sl, r3
 8000464:	d500      	bpl.n	8000468 <__udivmoddi4+0x38>
 8000466:	e076      	b.n	8000556 <__udivmoddi4+0x126>
 8000468:	464b      	mov	r3, r9
 800046a:	4652      	mov	r2, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	001f      	movs	r7, r3
 8000470:	464b      	mov	r3, r9
 8000472:	4662      	mov	r2, ip
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d828      	bhi.n	80004ce <__udivmoddi4+0x9e>
 800047c:	d025      	beq.n	80004ca <__udivmoddi4+0x9a>
 800047e:	4653      	mov	r3, sl
 8000480:	1ba4      	subs	r4, r4, r6
 8000482:	41bd      	sbcs	r5, r7
 8000484:	2b00      	cmp	r3, #0
 8000486:	da00      	bge.n	800048a <__udivmoddi4+0x5a>
 8000488:	e07b      	b.n	8000582 <__udivmoddi4+0x152>
 800048a:	2200      	movs	r2, #0
 800048c:	2300      	movs	r3, #0
 800048e:	9200      	str	r2, [sp, #0]
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2301      	movs	r3, #1
 8000494:	4652      	mov	r2, sl
 8000496:	4093      	lsls	r3, r2
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	4662      	mov	r2, ip
 800049e:	4093      	lsls	r3, r2
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	e018      	b.n	80004d6 <__udivmoddi4+0xa6>
 80004a4:	4282      	cmp	r2, r0
 80004a6:	d9d0      	bls.n	800044a <__udivmoddi4+0x1a>
 80004a8:	2200      	movs	r2, #0
 80004aa:	2300      	movs	r3, #0
 80004ac:	9200      	str	r2, [sp, #0]
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <__udivmoddi4+0x8a>
 80004b6:	601c      	str	r4, [r3, #0]
 80004b8:	605d      	str	r5, [r3, #4]
 80004ba:	9800      	ldr	r0, [sp, #0]
 80004bc:	9901      	ldr	r1, [sp, #4]
 80004be:	b002      	add	sp, #8
 80004c0:	bc1c      	pop	{r2, r3, r4}
 80004c2:	4690      	mov	r8, r2
 80004c4:	4699      	mov	r9, r3
 80004c6:	46a2      	mov	sl, r4
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d9d7      	bls.n	800047e <__udivmoddi4+0x4e>
 80004ce:	2200      	movs	r2, #0
 80004d0:	2300      	movs	r3, #0
 80004d2:	9200      	str	r2, [sp, #0]
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	4663      	mov	r3, ip
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0e9      	beq.n	80004b0 <__udivmoddi4+0x80>
 80004dc:	07fb      	lsls	r3, r7, #31
 80004de:	4698      	mov	r8, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0872      	lsrs	r2, r6, #1
 80004e4:	430a      	orrs	r2, r1
 80004e6:	087b      	lsrs	r3, r7, #1
 80004e8:	4666      	mov	r6, ip
 80004ea:	e00e      	b.n	800050a <__udivmoddi4+0xda>
 80004ec:	42ab      	cmp	r3, r5
 80004ee:	d101      	bne.n	80004f4 <__udivmoddi4+0xc4>
 80004f0:	42a2      	cmp	r2, r4
 80004f2:	d80c      	bhi.n	800050e <__udivmoddi4+0xde>
 80004f4:	1aa4      	subs	r4, r4, r2
 80004f6:	419d      	sbcs	r5, r3
 80004f8:	2001      	movs	r0, #1
 80004fa:	1924      	adds	r4, r4, r4
 80004fc:	416d      	adcs	r5, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	3e01      	subs	r6, #1
 8000502:	1824      	adds	r4, r4, r0
 8000504:	414d      	adcs	r5, r1
 8000506:	2e00      	cmp	r6, #0
 8000508:	d006      	beq.n	8000518 <__udivmoddi4+0xe8>
 800050a:	42ab      	cmp	r3, r5
 800050c:	d9ee      	bls.n	80004ec <__udivmoddi4+0xbc>
 800050e:	3e01      	subs	r6, #1
 8000510:	1924      	adds	r4, r4, r4
 8000512:	416d      	adcs	r5, r5
 8000514:	2e00      	cmp	r6, #0
 8000516:	d1f8      	bne.n	800050a <__udivmoddi4+0xda>
 8000518:	9800      	ldr	r0, [sp, #0]
 800051a:	9901      	ldr	r1, [sp, #4]
 800051c:	4653      	mov	r3, sl
 800051e:	1900      	adds	r0, r0, r4
 8000520:	4169      	adcs	r1, r5
 8000522:	2b00      	cmp	r3, #0
 8000524:	db23      	blt.n	800056e <__udivmoddi4+0x13e>
 8000526:	002b      	movs	r3, r5
 8000528:	4652      	mov	r2, sl
 800052a:	40d3      	lsrs	r3, r2
 800052c:	002a      	movs	r2, r5
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	001c      	movs	r4, r3
 8000534:	4653      	mov	r3, sl
 8000536:	0015      	movs	r5, r2
 8000538:	2b00      	cmp	r3, #0
 800053a:	db2d      	blt.n	8000598 <__udivmoddi4+0x168>
 800053c:	0026      	movs	r6, r4
 800053e:	4657      	mov	r7, sl
 8000540:	40be      	lsls	r6, r7
 8000542:	0033      	movs	r3, r6
 8000544:	0026      	movs	r6, r4
 8000546:	4667      	mov	r7, ip
 8000548:	40be      	lsls	r6, r7
 800054a:	0032      	movs	r2, r6
 800054c:	1a80      	subs	r0, r0, r2
 800054e:	4199      	sbcs	r1, r3
 8000550:	9000      	str	r0, [sp, #0]
 8000552:	9101      	str	r1, [sp, #4]
 8000554:	e7ac      	b.n	80004b0 <__udivmoddi4+0x80>
 8000556:	4662      	mov	r2, ip
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	464a      	mov	r2, r9
 800055e:	40da      	lsrs	r2, r3
 8000560:	4661      	mov	r1, ip
 8000562:	0013      	movs	r3, r2
 8000564:	4642      	mov	r2, r8
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	431f      	orrs	r7, r3
 800056c:	e780      	b.n	8000470 <__udivmoddi4+0x40>
 800056e:	4662      	mov	r2, ip
 8000570:	2320      	movs	r3, #32
 8000572:	1a9b      	subs	r3, r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	4666      	mov	r6, ip
 8000578:	409a      	lsls	r2, r3
 800057a:	0023      	movs	r3, r4
 800057c:	40f3      	lsrs	r3, r6
 800057e:	4313      	orrs	r3, r2
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0xfc>
 8000582:	4662      	mov	r2, ip
 8000584:	2320      	movs	r3, #32
 8000586:	2100      	movs	r1, #0
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	2200      	movs	r2, #0
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	2201      	movs	r2, #1
 8000592:	40da      	lsrs	r2, r3
 8000594:	9201      	str	r2, [sp, #4]
 8000596:	e780      	b.n	800049a <__udivmoddi4+0x6a>
 8000598:	2320      	movs	r3, #32
 800059a:	4662      	mov	r2, ip
 800059c:	0026      	movs	r6, r4
 800059e:	1a9b      	subs	r3, r3, r2
 80005a0:	40de      	lsrs	r6, r3
 80005a2:	002f      	movs	r7, r5
 80005a4:	46b0      	mov	r8, r6
 80005a6:	4666      	mov	r6, ip
 80005a8:	40b7      	lsls	r7, r6
 80005aa:	4646      	mov	r6, r8
 80005ac:	003b      	movs	r3, r7
 80005ae:	4333      	orrs	r3, r6
 80005b0:	e7c8      	b.n	8000544 <__udivmoddi4+0x114>
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__clzdi2>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	2900      	cmp	r1, #0
 80005b8:	d103      	bne.n	80005c2 <__clzdi2+0xe>
 80005ba:	f000 f807 	bl	80005cc <__clzsi2>
 80005be:	3020      	adds	r0, #32
 80005c0:	e002      	b.n	80005c8 <__clzdi2+0x14>
 80005c2:	1c08      	adds	r0, r1, #0
 80005c4:	f000 f802 	bl	80005cc <__clzsi2>
 80005c8:	bd10      	pop	{r4, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzsi2>:
 80005cc:	211c      	movs	r1, #28
 80005ce:	2301      	movs	r3, #1
 80005d0:	041b      	lsls	r3, r3, #16
 80005d2:	4298      	cmp	r0, r3
 80005d4:	d301      	bcc.n	80005da <__clzsi2+0xe>
 80005d6:	0c00      	lsrs	r0, r0, #16
 80005d8:	3910      	subs	r1, #16
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	4298      	cmp	r0, r3
 80005de:	d301      	bcc.n	80005e4 <__clzsi2+0x18>
 80005e0:	0a00      	lsrs	r0, r0, #8
 80005e2:	3908      	subs	r1, #8
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0x22>
 80005ea:	0900      	lsrs	r0, r0, #4
 80005ec:	3904      	subs	r1, #4
 80005ee:	a202      	add	r2, pc, #8	; (adr r2, 80005f8 <__clzsi2+0x2c>)
 80005f0:	5c10      	ldrb	r0, [r2, r0]
 80005f2:	1840      	adds	r0, r0, r1
 80005f4:	4770      	bx	lr
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	02020304 	.word	0x02020304
 80005fc:	01010101 	.word	0x01010101
	...

08000608 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b089      	sub	sp, #36	; 0x24
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	240c      	movs	r4, #12
 8000610:	193b      	adds	r3, r7, r4
 8000612:	0018      	movs	r0, r3
 8000614:	2314      	movs	r3, #20
 8000616:	001a      	movs	r2, r3
 8000618:	2100      	movs	r1, #0
 800061a:	f007 f821 	bl	8007660 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000624:	2104      	movs	r1, #4
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062e:	2204      	movs	r2, #4
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_GPIO_Init+0xb8>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
 8000642:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xb8>)
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_GPIO_Init+0xbc>)
 8000650:	2200      	movs	r2, #0
 8000652:	2108      	movs	r1, #8
 8000654:	0018      	movs	r0, r3
 8000656:	f001 f8c3 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800065a:	23a0      	movs	r3, #160	; 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	f001 f8bc 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000668:	0021      	movs	r1, r4
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2208      	movs	r2, #8
 800066e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2201      	movs	r2, #1
 8000674:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	000c      	movs	r4, r1
 8000684:	187b      	adds	r3, r7, r1
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <MX_GPIO_Init+0xbc>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f000 ff44 	bl	8001518 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2220      	movs	r2, #32
 8000696:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006aa:	187a      	adds	r2, r7, r1
 80006ac:	23a0      	movs	r3, #160	; 0xa0
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 ff30 	bl	8001518 <HAL_GPIO_Init>

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b009      	add	sp, #36	; 0x24
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	50000800 	.word	0x50000800

080006c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x74>)
 8000704:	0018      	movs	r0, r3
 8000706:	f001 f889 	bl	800181c <HAL_I2C_Init>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 f9f9 	bl	8000b04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x74>)
 8000714:	2100      	movs	r1, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f002 f8e0 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 f9f0 	bl	8000b04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <MX_I2C1_Init+0x74>)
 8000726:	2100      	movs	r1, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f002 f923 	bl	8002974 <HAL_I2CEx_ConfigDigitalFilter>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f9e7 	bl	8000b04 <Error_Handler>
  }

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200004c0 	.word	0x200004c0
 8000740:	40005400 	.word	0x40005400
 8000744:	10707dbc 	.word	0x10707dbc

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	2314      	movs	r3, #20
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f006 ff80 	bl	8007660 <memset>
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <HAL_I2C_MspInit+0xa0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d139      	bne.n	80007de <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 800076c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 8000778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000782:	2114      	movs	r1, #20
 8000784:	187b      	adds	r3, r7, r1
 8000786:	22c0      	movs	r2, #192	; 0xc0
 8000788:	00d2      	lsls	r2, r2, #3
 800078a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2212      	movs	r2, #18
 8000790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2201      	movs	r2, #1
 8000796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2206      	movs	r2, #6
 80007a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	187a      	adds	r2, r7, r1
 80007a6:	23a0      	movs	r3, #160	; 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f000 feb3 	bl	8001518 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 80007b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0389      	lsls	r1, r1, #14
 80007bc:	430a      	orrs	r2, r1
 80007be:	63da      	str	r2, [r3, #60]	; 0x3c
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_I2C_MspInit+0xa4>)
 80007c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2017      	movs	r0, #23
 80007d4:	f000 fdf4 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80007d8:	2017      	movs	r0, #23
 80007da:	f000 fe06 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b00a      	add	sp, #40	; 0x28
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40005400 	.word	0x40005400
 80007ec:	40021000 	.word	0x40021000

080007f0 <u8x8_stm32_gpio_and_delay>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
    U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
    U8X8_UNUSED void *arg_ptr)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	0008      	movs	r0, r1
 80007fa:	0011      	movs	r1, r2
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	240b      	movs	r4, #11
 8000800:	193b      	adds	r3, r7, r4
 8000802:	1c02      	adds	r2, r0, #0
 8000804:	701a      	strb	r2, [r3, #0]
 8000806:	230a      	movs	r3, #10
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	1c0a      	adds	r2, r1, #0
 800080c:	701a      	strb	r2, [r3, #0]
  switch (msg)
 800080e:	193b      	adds	r3, r7, r4
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b28      	cmp	r3, #40	; 0x28
 8000814:	d002      	beq.n	800081c <u8x8_stm32_gpio_and_delay+0x2c>
 8000816:	2b29      	cmp	r3, #41	; 0x29
 8000818:	d006      	beq.n	8000828 <u8x8_stm32_gpio_and_delay+0x38>
 800081a:	e00c      	b.n	8000836 <u8x8_stm32_gpio_and_delay+0x46>
//			break;
//		case U8X8_MSG_GPIO_SPI_CLOCK:
//			(arg_int)?SET_BIT(GPIOB->ODR,OLED_DO_Pin):CLEAR_BIT(GPIOB->ODR,OLED_DO_Pin);
//			break;
		case U8X8_MSG_GPIO_AND_DELAY_INIT:
					OLED_Init();
 800081c:	f000 fc03 	bl	8001026 <OLED_Init>
					HAL_Delay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fce9 	bl	80011f8 <HAL_Delay>
			break;
 8000826:	e006      	b.n	8000836 <u8x8_stm32_gpio_and_delay+0x46>
		case U8X8_MSG_DELAY_MILLI:					//延时
			HAL_Delay(arg_int);
 8000828:	230a      	movs	r3, #10
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	0018      	movs	r0, r3
 8000830:	f000 fce2 	bl	80011f8 <HAL_Delay>
			break;
 8000834:	46c0      	nop			; (mov r8, r8)
//	  	case U8X8_MSG_GPIO_I2C_CLOCK:		// arg_int=0: Output low at I2C clock pin
//	  				(arg_int)?SET_BIT(GPIOC->ODR,GPIO_PIN_3):CLEAR_BIT(GPIOC->ODR,GPIO_PIN_3);
//	  		break;

  }
  return 1;
 8000836:	2301      	movs	r3, #1
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b005      	add	sp, #20
 800083e:	bd90      	pop	{r4, r7, pc}

08000840 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af02      	add	r7, sp, #8
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	0008      	movs	r0, r1
 800084a:	0011      	movs	r1, r2
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	240b      	movs	r4, #11
 8000850:	193b      	adds	r3, r7, r4
 8000852:	1c02      	adds	r2, r0, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	230a      	movs	r3, #10
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	1c0a      	adds	r2, r1, #0
 800085c:	701a      	strb	r2, [r3, #0]
  static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
  static uint8_t buf_idx;
  uint8_t *data;

  switch(msg)
 800085e:	193b      	adds	r3, r7, r4
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	3b14      	subs	r3, #20
 8000864:	2b0c      	cmp	r3, #12
 8000866:	d832      	bhi.n	80008ce <u8x8_byte_i2c+0x8e>
 8000868:	009a      	lsls	r2, r3, #2
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <u8x8_byte_i2c+0xa0>)
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	469f      	mov	pc, r3
  {
    case U8X8_MSG_BYTE_SEND:
      data = (uint8_t *)arg_ptr;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	617b      	str	r3, [r7, #20]
      while( arg_int > 0 )
 8000876:	e013      	b.n	80008a0 <u8x8_byte_i2c+0x60>
      {
	buffer[buf_idx++] = *data;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <u8x8_byte_i2c+0xa4>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	b2d1      	uxtb	r1, r2
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <u8x8_byte_i2c+0xa4>)
 8000882:	7011      	strb	r1, [r2, #0]
 8000884:	001a      	movs	r2, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	7819      	ldrb	r1, [r3, #0]
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <u8x8_byte_i2c+0xa8>)
 800088c:	5499      	strb	r1, [r3, r2]
	data++;
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
	arg_int--;
 8000894:	210a      	movs	r1, #10
 8000896:	187b      	adds	r3, r7, r1
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	187b      	adds	r3, r7, r1
 800089c:	3a01      	subs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
      while( arg_int > 0 )
 80008a0:	230a      	movs	r3, #10
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1e6      	bne.n	8000878 <u8x8_byte_i2c+0x38>
      }
      break;
 80008aa:	e013      	b.n	80008d4 <u8x8_byte_i2c+0x94>
      break;
    case U8X8_MSG_BYTE_SET_DC:
      /* ignored for i2c */
      break;
	case U8X8_MSG_BYTE_START_TRANSFER:
			buf_idx = 0;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <u8x8_byte_i2c+0xa4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	      break;
 80008b2:	e00f      	b.n	80008d4 <u8x8_byte_i2c+0x94>
	case U8X8_MSG_BYTE_END_TRANSFER:

	    	HAL_I2C_Master_Transmit(&hi2c1, (DEVICE_ADDRESS << 1), buffer, buf_idx, 1000);
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <u8x8_byte_i2c+0xa4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b299      	uxth	r1, r3
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <u8x8_byte_i2c+0xa8>)
 80008bc:	480b      	ldr	r0, [pc, #44]	; (80008ec <u8x8_byte_i2c+0xac>)
 80008be:	23fa      	movs	r3, #250	; 0xfa
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	000b      	movs	r3, r1
 80008c6:	2178      	movs	r1, #120	; 0x78
 80008c8:	f001 f83e 	bl	8001948 <HAL_I2C_Master_Transmit>
	      break;
 80008cc:	e002      	b.n	80008d4 <u8x8_byte_i2c+0x94>
    default:
      return 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e001      	b.n	80008d6 <u8x8_byte_i2c+0x96>
      break;
 80008d2:	46c0      	nop			; (mov r8, r8)
  }
  return 1;
 80008d4:	2301      	movs	r3, #1
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b007      	add	sp, #28
 80008dc:	bd90      	pop	{r4, r7, pc}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	080086b8 	.word	0x080086b8
 80008e4:	2000008c 	.word	0x2000008c
 80008e8:	20000090 	.word	0x20000090
 80008ec:	200004c0 	.word	0x200004c0

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f6:	f000 fbfb 	bl	80010f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fa:	f000 f88b 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f7ff fe83 	bl	8000608 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000902:	f000 fa13 	bl	8000d2c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000906:	f7ff fedf 	bl	80006c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("OLED 0.96' TEST...\r\n");
 800090a:	4b38      	ldr	r3, [pc, #224]	; (80009ec <main+0xfc>)
 800090c:	0018      	movs	r0, r3
 800090e:	f006 ff0f 	bl	8007730 <puts>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);		//<
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <main+0x100>)
 8000914:	2200      	movs	r2, #0
 8000916:	2108      	movs	r1, #8
 8000918:	0018      	movs	r0, r3
 800091a:	f000 ff61 	bl	80017e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800091e:	2001      	movs	r0, #1
 8000920:	f000 fc6a 	bl	80011f8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <main+0x100>)
 8000926:	2201      	movs	r2, #1
 8000928:	2108      	movs	r1, #8
 800092a:	0018      	movs	r0, r3
 800092c:	f000 ff58 	bl	80017e0 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fc61 	bl	80011f8 <HAL_Delay>
  OLED_Init();
  OLED_Clear();
  OLED_DrawBMP(0, 0, 128, 8,BMP1);
#else
  //==================U8g2============================
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,  u8x8_stm32_gpio_and_delay);
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <main+0x104>)
 8000938:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <main+0x108>)
 800093a:	4930      	ldr	r1, [pc, #192]	; (80009fc <main+0x10c>)
 800093c:	4830      	ldr	r0, [pc, #192]	; (8000a00 <main+0x110>)
 800093e:	f004 feb3 	bl	80056a8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 8000942:	4b2f      	ldr	r3, [pc, #188]	; (8000a00 <main+0x110>)
 8000944:	0018      	movs	r0, r3
 8000946:	f006 fdb6 	bl	80074b6 <u8x8_InitDisplay>
  u8g2_ClearDisplay(&u8g2);
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <main+0x110>)
 800094c:	0018      	movs	r0, r3
 800094e:	f004 fe85 	bl	800565c <u8g2_ClearDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8000952:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <main+0x110>)
 8000954:	2100      	movs	r1, #0
 8000956:	0018      	movs	r0, r3
 8000958:	f006 fdbc 	bl	80074d4 <u8x8_SetPowerSave>

  u8g2_SetFont(&u8g2, u8g2_font_osb35_tr);
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <main+0x114>)
 800095e:	4b28      	ldr	r3, [pc, #160]	; (8000a00 <main+0x110>)
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f005 fdc8 	bl	80064f8 <u8g2_SetFont>

  u8g2_DrawStr(&u8g2,10, 44,"00:ABC");
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <main+0x118>)
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <main+0x110>)
 800096c:	222c      	movs	r2, #44	; 0x2c
 800096e:	210a      	movs	r1, #10
 8000970:	f005 fd1e 	bl	80063b0 <u8g2_DrawStr>
  u8g2_SendBuffer(&u8g2);
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <main+0x110>)
 8000976:	0018      	movs	r0, r3
 8000978:	f004 fdf5 	bl	8005566 <u8g2_SendBuffer>

  char clock[5] = {0};
 800097c:	003b      	movs	r3, r7
 800097e:	0018      	movs	r0, r3
 8000980:	2305      	movs	r3, #5
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f006 fe6b 	bl	8007660 <memset>
  int min = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  int sec = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 printf("Hello world\r\n");
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <main+0x11c>)
 8000994:	0018      	movs	r0, r3
 8000996:	f006 fecb 	bl	8007730 <puts>
	 u8g2_FirstPage(&u8g2);
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <main+0x110>)
 800099c:	0018      	movs	r0, r3
 800099e:	f004 fe0e 	bl	80055be <u8g2_FirstPage>
	 do {
			 sec++;
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
			 if(sec>59)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	2b3b      	cmp	r3, #59	; 0x3b
 80009ac:	dd04      	ble.n	80009b8 <main+0xc8>
			 {
				 sec = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
				 min++;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3301      	adds	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]

			 }

			 if(min > 59)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b3b      	cmp	r3, #59	; 0x3b
 80009bc:	dd03      	ble.n	80009c6 <main+0xd6>
			 {
				 sec = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
				 min = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]

			 }

			 sprintf(clock,"%02d:%02d",min,sec);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	4911      	ldr	r1, [pc, #68]	; (8000a10 <main+0x120>)
 80009cc:	0038      	movs	r0, r7
 80009ce:	f006 feb9 	bl	8007744 <siprintf>
			 //u8g2_ClearDisplay(&u8g2);
			 u8g2_DrawStr(&u8g2,0, 44,clock);
 80009d2:	003b      	movs	r3, r7
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <main+0x110>)
 80009d6:	222c      	movs	r2, #44	; 0x2c
 80009d8:	2100      	movs	r1, #0
 80009da:	f005 fce9 	bl	80063b0 <u8g2_DrawStr>
		   //u8g2_SendBuffer(&u8g2);
	 } while ( u8g2_NextPage(&u8g2) );
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <main+0x110>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f004 fe02 	bl	80055ea <u8g2_NextPage>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d1db      	bne.n	80009a2 <main+0xb2>
	 printf("Hello world\r\n");
 80009ea:	e7d2      	b.n	8000992 <main+0xa2>
 80009ec:	08008670 	.word	0x08008670
 80009f0:	50000800 	.word	0x50000800
 80009f4:	080007f1 	.word	0x080007f1
 80009f8:	08000841 	.word	0x08000841
 80009fc:	08009e08 	.word	0x08009e08
 8000a00:	2000050c 	.word	0x2000050c
 8000a04:	0800874c 	.word	0x0800874c
 8000a08:	08008684 	.word	0x08008684
 8000a0c:	0800868c 	.word	0x0800868c
 8000a10:	0800869c 	.word	0x0800869c

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b0a1      	sub	sp, #132	; 0x84
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	2448      	movs	r4, #72	; 0x48
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f006 fe1b 	bl	8007660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2a:	2338      	movs	r3, #56	; 0x38
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	2310      	movs	r3, #16
 8000a32:	001a      	movs	r2, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	f006 fe13 	bl	8007660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2334      	movs	r3, #52	; 0x34
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f006 fe0c 	bl	8007660 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 ffdd 	bl	8002a0c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2202      	movs	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2280      	movs	r2, #128	; 0x80
 8000a5c:	0052      	lsls	r2, r2, #1
 8000a5e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000a60:	0021      	movs	r1, r4
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2240      	movs	r2, #64	; 0x40
 8000a6c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2202      	movs	r2, #2
 8000a72:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2202      	movs	r2, #2
 8000a78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2230      	movs	r2, #48	; 0x30
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2250      	movs	r2, #80	; 0x50
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0292      	lsls	r2, r2, #10
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0492      	lsls	r2, r2, #18
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	0612      	lsls	r2, r2, #24
 8000a9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f001 ffff 	bl	8002aa4 <HAL_RCC_OscConfig>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000aaa:	f000 f82b 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	2138      	movs	r1, #56	; 0x38
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2102      	movs	r1, #2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fb09 	bl	80030e4 <HAL_RCC_ClockConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ad6:	f000 f815 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2241      	movs	r2, #65	; 0x41
 8000ade:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	0018      	movs	r0, r3
 8000af0:	f002 fca2 	bl	8003438 <HAL_RCCEx_PeriphCLKConfig>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000af8:	f000 f804 	bl	8000b04 <Error_Handler>
  }
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b021      	add	sp, #132	; 0x84
 8000b02:	bd90      	pop	{r4, r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	2201      	movs	r2, #1
 8000b28:	4013      	ands	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0549      	lsls	r1, r1, #21
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	055b      	lsls	r3, r3, #21
 8000b44:	4013      	ands	r3, r2
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000b4a:	23c0      	movs	r3, #192	; 0xc0
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fb74 	bl	800123c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b002      	add	sp, #8
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b88:	f000 fb1c 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <I2C1_IRQHandler+0x2c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	23e0      	movs	r3, #224	; 0xe0
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d004      	beq.n	8000bb0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <I2C1_IRQHandler+0x2c>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f000 ffef 	bl	8001b8c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000bae:	e003      	b.n	8000bb8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <I2C1_IRQHandler+0x2c>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 ffd0 	bl	8001b58 <HAL_I2C_EV_IRQHandler>
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	200004c0 	.word	0x200004c0

08000bc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <USART1_IRQHandler+0x14>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 feee 	bl	80039ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000590 	.word	0x20000590

08000bdc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	e00a      	b.n	8000c04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bee:	e000      	b.n	8000bf2 <_read+0x16>
 8000bf0:	bf00      	nop
 8000bf2:	0001      	movs	r1, r0
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	60ba      	str	r2, [r7, #8]
 8000bfa:	b2ca      	uxtb	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf0      	blt.n	8000bee <_read+0x12>
	}

return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b006      	add	sp, #24
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	e009      	b.n	8000c3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	0018      	movs	r0, r3
 8000c32:	f000 f91d 	bl	8000e70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf1      	blt.n	8000c28 <_write+0x12>
	}
	return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b006      	add	sp, #24
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_close>:

int _close(int file)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
	return -1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	425b      	negs	r3, r3
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0192      	lsls	r2, r2, #6
 8000c72:	605a      	str	r2, [r3, #4]
	return 0;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_isatty>:

int _isatty(int file)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	return 1;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f006 fc98 	bl	800760c <__errno>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	425b      	negs	r3, r3
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	18d2      	adds	r2, r2, r3
 8000cf6:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b006      	add	sp, #24
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20009000 	.word	0x20009000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	200000b0 	.word	0x200000b0
 8000d10:	20000628 	.word	0x20000628

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <SystemInit+0x14>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	0512      	lsls	r2, r2, #20
 8000d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <MX_USART1_UART_Init+0x98>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d38:	22e1      	movs	r2, #225	; 0xe1
 8000d3a:	0252      	lsls	r2, r2, #9
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d68:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d76:	0018      	movs	r0, r3
 8000d78:	f002 fd16 	bl	80037a8 <HAL_UART_Init>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d80:	f7ff fec0 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f004 fa63 	bl	8005254 <HAL_UARTEx_SetTxFifoThreshold>
 8000d8e:	1e03      	subs	r3, r0, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d92:	f7ff feb7 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f004 fa9a 	bl	80052d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da4:	f7ff feae 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <MX_USART1_UART_Init+0x94>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f004 fa18 	bl	80051e0 <HAL_UARTEx_DisableFifoMode>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db4:	f7ff fea6 	bl	8000b04 <Error_Handler>
  }

}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20000590 	.word	0x20000590
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	2314      	movs	r3, #20
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	2314      	movs	r3, #20
 8000dd8:	001a      	movs	r2, r3
 8000dda:	2100      	movs	r1, #0
 8000ddc:	f006 fc40 	bl	8007660 <memset>
  if(uartHandle->Instance==USART1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <HAL_UART_MspInit+0x9c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d137      	bne.n	8000e5a <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	01c9      	lsls	r1, r1, #7
 8000df4:	430a      	orrs	r2, r1
 8000df6:	641a      	str	r2, [r3, #64]	; 0x40
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	01db      	lsls	r3, r3, #7
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0xa0>)
 8000e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e16:	2204      	movs	r2, #4
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e1e:	2114      	movs	r1, #20
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2230      	movs	r2, #48	; 0x30
 8000e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2202      	movs	r2, #2
 8000e2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	4a0a      	ldr	r2, [pc, #40]	; (8000e6c <HAL_UART_MspInit+0xa4>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f000 fb67 	bl	8001518 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	201b      	movs	r0, #27
 8000e50:	f000 fab6 	bl	80013c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e54:	201b      	movs	r0, #27
 8000e56:	f000 fac8 	bl	80013ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b00a      	add	sp, #40	; 0x28
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40013800 	.word	0x40013800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	50000800 	.word	0x50000800

08000e70 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* 使用的串口可根据实际配置修改 */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <__io_putchar+0x20>)
 8000e7a:	1d39      	adds	r1, r7, #4
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <__io_putchar+0x24>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f002 fce8 	bl	8003854 <HAL_UART_Transmit>
  return ch;
 8000e84:	687b      	ldr	r3, [r7, #4]
}
 8000e86:	0018      	movs	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	0000ffff 	.word	0x0000ffff
 8000e94:	20000590 	.word	0x20000590

08000e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e9c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <LoopForever+0xa>)
  ldr r3, =_edata
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <LoopForever+0xe>)
  adds r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2]
 8000eb8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eba:	3204      	adds	r2, #4

08000ebc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <LoopForever+0x16>)
  cmp r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ec2:	f7ff ff27 	bl	8000d14 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ec6:	f006 fba7 	bl	8007618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eca:	f7ff fd11 	bl	80008f0 <main>

08000ece <LoopForever>:

LoopForever:
    b LoopForever
 8000ece:	e7fe      	b.n	8000ece <LoopForever>
  ldr   r0, =_estack
 8000ed0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000ed4:	08009f44 	.word	0x08009f44
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000ee0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000ee4:	20000624 	.word	0x20000624

08000ee8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC1_COMP_IRQHandler>
	...

08000eec <OLED_Write_Cmd>:
 * @brief	OLEDд������
 * @param cmd - ��д������
 * @note	��ֲʱ����ʹ���Լ��ĵײ�APIʵ�� 
*/
static void OLED_Write_Cmd(uint8_t cmd)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	0002      	movs	r2, r0
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0x00;	//control byte
 8000ef8:	2108      	movs	r1, #8
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	buf[1] = cmd;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	1dfa      	adds	r2, r7, #7
 8000f04:	7812      	ldrb	r2, [r2, #0]
 8000f06:	705a      	strb	r2, [r3, #1]
	
	//ʹ��HAL���APIʵ��
	int ret = HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000f08:	187a      	adds	r2, r7, r1
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <OLED_Write_Cmd+0x38>)
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <OLED_Write_Cmd+0x3c>)
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2302      	movs	r3, #2
 8000f12:	2178      	movs	r1, #120	; 0x78
 8000f14:	f000 fd18 	bl	8001948 <HAL_I2C_Master_Transmit>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	60fb      	str	r3, [r7, #12]
	//printf("ret = %d----HAL_OK = %d\r\n",ret,HAL_OK );
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b004      	add	sp, #16
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200004c0 	.word	0x200004c0
 8000f28:	0000ffff 	.word	0x0000ffff

08000f2c <OLED_Write_Dat>:
 * @brief	OLEDд������
 * @param cmd - ��д������
 * @note	��ֲʱ����ʹ���Լ��ĵײ�APIʵ�� 
*/
static void OLED_Write_Dat(uint8_t dat)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	0002      	movs	r2, r0
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0x40; //control byte
 8000f38:	2108      	movs	r1, #8
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	701a      	strb	r2, [r3, #0]
	buf[1] = dat;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	1dfa      	adds	r2, r7, #7
 8000f44:	7812      	ldrb	r2, [r2, #0]
 8000f46:	705a      	strb	r2, [r3, #1]
	
	//ʹ��HAL���APIʵ��
	int ret  = HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000f48:	187a      	adds	r2, r7, r1
 8000f4a:	4806      	ldr	r0, [pc, #24]	; (8000f64 <OLED_Write_Dat+0x38>)
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <OLED_Write_Dat+0x3c>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2302      	movs	r3, #2
 8000f52:	2178      	movs	r1, #120	; 0x78
 8000f54:	f000 fcf8 	bl	8001948 <HAL_I2C_Master_Transmit>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
	//printf("ret = %d----HAL_OK = %d\r\n",ret,HAL_OK );
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200004c0 	.word	0x200004c0
 8000f68:	0000ffff 	.word	0x0000ffff

08000f6c <OLED_Set_Pos>:
 * @brief	OLED������ʾλ��
 * @param x - X����λ��
 * @param y - Y����λ��
*/
void OLED_Set_Pos(uint8_t x, uint8_t y)
{ 	
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0002      	movs	r2, r0
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	1c0a      	adds	r2, r1, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
	OLED_Write_Cmd(0xb0+y);
 8000f7e:	1dbb      	adds	r3, r7, #6
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3b50      	subs	r3, #80	; 0x50
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff ffb0 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(((x&0xf0)>>4)|0x10);
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2210      	movs	r2, #16
 8000f96:	4313      	orrs	r3, r2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f7ff ffa6 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd((x&0x0f)|0x01);
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	220e      	movs	r2, #14
 8000fa8:	4013      	ands	r3, r2
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	2201      	movs	r2, #1
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b25b      	sxtb	r3, r3
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff99 	bl	8000eec <OLED_Write_Cmd>
}   	  
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <OLED_Clear>:
}		   			 
/**
 * @brief	OLED��������������֮����ĻȫΪ��ɫ��
*/ 
void OLED_Clear(void)
{  
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e022      	b.n	8001016 <OLED_Clear+0x54>
	{  
		OLED_Write_Cmd(0xb0+i);    //����ҳ��ַ��0~7��
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3b50      	subs	r3, #80	; 0x50
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f7ff ff87 	bl	8000eec <OLED_Write_Cmd>
		OLED_Write_Cmd(0x00);      //������ʾλ�á��е͵�ַ
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff ff84 	bl	8000eec <OLED_Write_Cmd>
		OLED_Write_Cmd(0x10);      //������ʾλ�á��иߵ�ַ   
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f7ff ff81 	bl	8000eec <OLED_Write_Cmd>
		for(n=0;n<128;n++)
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
 8000ff0:	e007      	b.n	8001002 <OLED_Clear+0x40>
		{
			OLED_Write_Dat(0);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff ff9a 	bl	8000f2c <OLED_Write_Dat>
		for(n=0;n<128;n++)
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	781a      	ldrb	r2, [r3, #0]
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	3201      	adds	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b25b      	sxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	daf2      	bge.n	8000ff2 <OLED_Clear+0x30>
	for(i=0;i<8;i++)  
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	3201      	adds	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b07      	cmp	r3, #7
 800101c:	d9d8      	bls.n	8000fd0 <OLED_Clear+0xe>
		}			
	}
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}

08001026 <OLED_Init>:

/**
 * @brief	OLED��ʼ��
*/			    
void OLED_Init(void)
{ 	
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0

	HAL_Delay(500);
 800102a:	23fa      	movs	r3, #250	; 0xfa
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f8e2 	bl	80011f8 <HAL_Delay>

	OLED_Write_Cmd(0xAE);//--display off
 8001034:	20ae      	movs	r0, #174	; 0xae
 8001036:	f7ff ff59 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//---set low column address
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff56 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x10);//---set high column address
 8001040:	2010      	movs	r0, #16
 8001042:	f7ff ff53 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//--set start line address  
 8001046:	2040      	movs	r0, #64	; 0x40
 8001048:	f7ff ff50 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x81); // contract control
 800104c:	2081      	movs	r0, #129	; 0x81
 800104e:	f7ff ff4d 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xFF);//--128   
 8001052:	20ff      	movs	r0, #255	; 0xff
 8001054:	f7ff ff4a 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA1);//set segment remap 
 8001058:	20a1      	movs	r0, #161	; 0xa1
 800105a:	f7ff ff47 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xC8);//Com scan direction
 800105e:	20c8      	movs	r0, #200	; 0xc8
 8001060:	f7ff ff44 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);//--normal / reverse
 8001064:	20a6      	movs	r0, #166	; 0xa6
 8001066:	f7ff ff41 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA8);//--set multiplex ratio(1 to 64)
 800106a:	20a8      	movs	r0, #168	; 0xa8
 800106c:	f7ff ff3e 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x3F);//--1/32 duty
 8001070:	203f      	movs	r0, #63	; 0x3f
 8001072:	f7ff ff3b 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD3);//-set display offset
 8001076:	20d3      	movs	r0, #211	; 0xd3
 8001078:	f7ff ff38 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x00);//
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff ff35 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD5);//set osc division
 8001082:	20d5      	movs	r0, #213	; 0xd5
 8001084:	f7ff ff32 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x80);
 8001088:	2080      	movs	r0, #128	; 0x80
 800108a:	f7ff ff2f 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xD9);//Set Pre-Charge Period
 800108e:	20d9      	movs	r0, #217	; 0xd9
 8001090:	f7ff ff2c 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xF1);//
 8001094:	20f1      	movs	r0, #241	; 0xf1
 8001096:	f7ff ff29 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDA);//set com pin configuartion
 800109a:	20da      	movs	r0, #218	; 0xda
 800109c:	f7ff ff26 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x12);//
 80010a0:	2012      	movs	r0, #18
 80010a2:	f7ff ff23 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xDB);//set Vcomh
 80010a6:	20db      	movs	r0, #219	; 0xdb
 80010a8:	f7ff ff20 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x40);//
 80010ac:	2040      	movs	r0, #64	; 0x40
 80010ae:	f7ff ff1d 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x20);
 80010b2:	2020      	movs	r0, #32
 80010b4:	f7ff ff1a 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x02);
 80010b8:	2002      	movs	r0, #2
 80010ba:	f7ff ff17 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x8D);//set charge pump enable
 80010be:	208d      	movs	r0, #141	; 0x8d
 80010c0:	f7ff ff14 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0x14);//
 80010c4:	2014      	movs	r0, #20
 80010c6:	f7ff ff11 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA4);
 80010ca:	20a4      	movs	r0, #164	; 0xa4
 80010cc:	f7ff ff0e 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xA6);
 80010d0:	20a6      	movs	r0, #166	; 0xa6
 80010d2:	f7ff ff0b 	bl	8000eec <OLED_Write_Cmd>
	OLED_Write_Cmd(0xAF);//--turn on oled panel
 80010d6:	20af      	movs	r0, #175	; 0xaf
 80010d8:	f7ff ff08 	bl	8000eec <OLED_Write_Cmd>
	
	OLED_Clear();
 80010dc:	f7ff ff71 	bl	8000fc2 <OLED_Clear>
	OLED_Set_Pos(0,0);
 80010e0:	2100      	movs	r1, #0
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff ff42 	bl	8000f6c <OLED_Set_Pos>
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x3c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Init+0x3c>)
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	0049      	lsls	r1, r1, #1
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f810 	bl	8001130 <HAL_InitTick>
 8001110:	1e03      	subs	r3, r0, #0
 8001112:	d003      	beq.n	800111c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e001      	b.n	8001120 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fcf8 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b002      	add	sp, #8
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40022000 	.word	0x40022000

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001138:	230f      	movs	r3, #15
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_InitTick+0x88>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d02b      	beq.n	80011a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_InitTick+0x8c>)
 800114a:	681c      	ldr	r4, [r3, #0]
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <HAL_InitTick+0x88>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0019      	movs	r1, r3
 8001152:	23fa      	movs	r3, #250	; 0xfa
 8001154:	0098      	lsls	r0, r3, #2
 8001156:	f7fe ffd5 	bl	8000104 <__udivsi3>
 800115a:	0003      	movs	r3, r0
 800115c:	0019      	movs	r1, r3
 800115e:	0020      	movs	r0, r4
 8001160:	f7fe ffd0 	bl	8000104 <__udivsi3>
 8001164:	0003      	movs	r3, r0
 8001166:	0018      	movs	r0, r3
 8001168:	f000 f94f 	bl	800140a <HAL_SYSTICK_Config>
 800116c:	1e03      	subs	r3, r0, #0
 800116e:	d112      	bne.n	8001196 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b03      	cmp	r3, #3
 8001174:	d80a      	bhi.n	800118c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	2200      	movs	r2, #0
 800117e:	0018      	movs	r0, r3
 8001180:	f000 f91e 	bl	80013c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_InitTick+0x90>)
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e00d      	b.n	80011a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e008      	b.n	80011a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e003      	b.n	80011a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	781b      	ldrb	r3, [r3, #0]
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b005      	add	sp, #20
 80011b4:	bd90      	pop	{r4, r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000000 	.word	0x20000000
 80011c0:	20000004 	.word	0x20000004

080011c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <HAL_IncTick+0x18>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <HAL_IncTick+0x1c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	18d2      	adds	r2, r2, r3
 80011d2:	4b02      	ldr	r3, [pc, #8]	; (80011dc <HAL_IncTick+0x18>)
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000061c 	.word	0x2000061c
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <HAL_GetTick+0x10>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	2000061c 	.word	0x2000061c

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff fff0 	bl	80011e4 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	3301      	adds	r3, #1
 8001210:	d004      	beq.n	800121c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	18d3      	adds	r3, r2, r3
 800121a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	f7ff ffe1 	bl	80011e4 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	429a      	cmp	r2, r3
 800122c:	d8f7      	bhi.n	800121e <HAL_Delay+0x26>
  {
  }
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	20000008 	.word	0x20000008

0800123c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800124a:	4013      	ands	r3, r2
 800124c:	0019      	movs	r1, r3
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	430a      	orrs	r2, r1
 8001254:	601a      	str	r2, [r3, #0]
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40010000 	.word	0x40010000
 8001264:	fffff9ff 	.word	0xfffff9ff

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	0002      	movs	r2, r0
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b7f      	cmp	r3, #127	; 0x7f
 800127a:	d809      	bhi.n	8001290 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	231f      	movs	r3, #31
 8001284:	401a      	ands	r2, r3
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_EnableIRQ+0x30>)
 8001288:	2101      	movs	r1, #1
 800128a:	4091      	lsls	r1, r2
 800128c:	000a      	movs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
  }
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b7f      	cmp	r3, #127	; 0x7f
 80012b0:	d828      	bhi.n	8001304 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012b2:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <__NVIC_SetPriority+0xd4>)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	33c0      	adds	r3, #192	; 0xc0
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	589b      	ldr	r3, [r3, r2]
 80012c2:	1dfa      	adds	r2, r7, #7
 80012c4:	7812      	ldrb	r2, [r2, #0]
 80012c6:	0011      	movs	r1, r2
 80012c8:	2203      	movs	r2, #3
 80012ca:	400a      	ands	r2, r1
 80012cc:	00d2      	lsls	r2, r2, #3
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	4091      	lsls	r1, r2
 80012d2:	000a      	movs	r2, r1
 80012d4:	43d2      	mvns	r2, r2
 80012d6:	401a      	ands	r2, r3
 80012d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	019b      	lsls	r3, r3, #6
 80012de:	22ff      	movs	r2, #255	; 0xff
 80012e0:	401a      	ands	r2, r3
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0018      	movs	r0, r3
 80012e8:	2303      	movs	r3, #3
 80012ea:	4003      	ands	r3, r0
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	481f      	ldr	r0, [pc, #124]	; (8001370 <__NVIC_SetPriority+0xd4>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	b25b      	sxtb	r3, r3
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	430a      	orrs	r2, r1
 80012fc:	33c0      	adds	r3, #192	; 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001302:	e031      	b.n	8001368 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	0019      	movs	r1, r3
 800130c:	230f      	movs	r3, #15
 800130e:	400b      	ands	r3, r1
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3306      	adds	r3, #6
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	18d3      	adds	r3, r2, r3
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1dfa      	adds	r2, r7, #7
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	0011      	movs	r1, r2
 8001324:	2203      	movs	r2, #3
 8001326:	400a      	ands	r2, r1
 8001328:	00d2      	lsls	r2, r2, #3
 800132a:	21ff      	movs	r1, #255	; 0xff
 800132c:	4091      	lsls	r1, r2
 800132e:	000a      	movs	r2, r1
 8001330:	43d2      	mvns	r2, r2
 8001332:	401a      	ands	r2, r3
 8001334:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	22ff      	movs	r2, #255	; 0xff
 800133c:	401a      	ands	r2, r3
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	2303      	movs	r3, #3
 8001346:	4003      	ands	r3, r0
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <__NVIC_SetPriority+0xd8>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	001c      	movs	r4, r3
 8001354:	230f      	movs	r3, #15
 8001356:	4023      	ands	r3, r4
 8001358:	3b08      	subs	r3, #8
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	430a      	orrs	r2, r1
 800135e:	3306      	adds	r3, #6
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	18c3      	adds	r3, r0, r3
 8001364:	3304      	adds	r3, #4
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	b003      	add	sp, #12
 800136e:	bd90      	pop	{r4, r7, pc}
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <SysTick_Config+0x40>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d901      	bls.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e010      	b.n	80013b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <SysTick_Config+0x44>)
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	3a01      	subs	r2, #1
 8001394:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	2301      	movs	r3, #1
 8001398:	425b      	negs	r3, r3
 800139a:	2103      	movs	r1, #3
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff7d 	bl	800129c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SysTick_Config+0x44>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <SysTick_Config+0x44>)
 80013aa:	2207      	movs	r2, #7
 80013ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	00ffffff 	.word	0x00ffffff
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	210f      	movs	r1, #15
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	1c02      	adds	r2, r0, #0
 80013d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013d2:	68ba      	ldr	r2, [r7, #8]
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b25b      	sxtb	r3, r3
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f7ff ff5d 	bl	800129c <__NVIC_SetPriority>
}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	0002      	movs	r2, r0
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffaf 	bl	8001378 <SysTick_Config>
 800141a:	0003      	movs	r3, r0
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142c:	230f      	movs	r3, #15
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2224      	movs	r2, #36	; 0x24
 8001440:	5c9b      	ldrb	r3, [r3, r2]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_DMA_Abort_IT+0x26>
 8001446:	2302      	movs	r3, #2
 8001448:	e05e      	b.n	8001508 <HAL_DMA_Abort_IT+0xe4>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2224      	movs	r2, #36	; 0x24
 800144e:	2101      	movs	r1, #1
 8001450:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2225      	movs	r2, #37	; 0x25
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d007      	beq.n	800146e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2204      	movs	r2, #4
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001464:	230f      	movs	r3, #15
 8001466:	18fb      	adds	r3, r7, r3
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e049      	b.n	8001502 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	210e      	movs	r1, #14
 800147a:	438a      	bics	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2101      	movs	r1, #1
 800148a:	438a      	bics	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	491d      	ldr	r1, [pc, #116]	; (8001510 <HAL_DMA_Abort_IT+0xec>)
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_DMA_Abort_IT+0xf0>)
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	221c      	movs	r2, #28
 80014a8:	4013      	ands	r3, r2
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_DMA_Abort_IT+0xf0>)
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014d0:	490f      	ldr	r1, [pc, #60]	; (8001510 <HAL_DMA_Abort_IT+0xec>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2225      	movs	r2, #37	; 0x25
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	0010      	movs	r0, r2
 8001500:	4798      	blx	r3
    }
  }
  return status;
 8001502:	230f      	movs	r3, #15
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}
 8001510:	fffffeff 	.word	0xfffffeff
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e147      	b.n	80017b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d100      	bne.n	8001540 <HAL_GPIO_Init+0x28>
 800153e:	e138      	b.n	80017b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x38>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b12      	cmp	r3, #18
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	0092      	lsls	r2, r2, #2
 800155a:	58d3      	ldr	r3, [r2, r3]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2207      	movs	r2, #7
 8001562:	4013      	ands	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	409a      	lsls	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	43da      	mvns	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2107      	movs	r1, #7
 800157c:	400b      	ands	r3, r1
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	409a      	lsls	r2, r3
 80015a6:	0013      	movs	r3, r2
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	0013      	movs	r3, r2
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d00b      	beq.n	80015ec <HAL_GPIO_Init+0xd4>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015e0:	2b11      	cmp	r3, #17
 80015e2:	d003      	beq.n	80015ec <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d130      	bne.n	800164e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	409a      	lsls	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001622:	2201      	movs	r2, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
 8001628:	0013      	movs	r3, r2
 800162a:	43da      	mvns	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	2201      	movs	r2, #1
 800163a:	401a      	ands	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	409a      	lsls	r2, r3
 8001640:	0013      	movs	r3, r2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	055b      	lsls	r3, r3, #21
 8001686:	4013      	ands	r3, r2
 8001688:	d100      	bne.n	800168c <HAL_GPIO_Init+0x174>
 800168a:	e092      	b.n	80017b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800168c:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	089b      	lsrs	r3, r3, #2
 8001692:	3318      	adds	r3, #24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	589b      	ldr	r3, [r3, r2]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2203      	movs	r2, #3
 800169e:	4013      	ands	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	220f      	movs	r2, #15
 80016a4:	409a      	lsls	r2, r3
 80016a6:	0013      	movs	r3, r2
 80016a8:	43da      	mvns	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	23a0      	movs	r3, #160	; 0xa0
 80016b4:	05db      	lsls	r3, r3, #23
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d013      	beq.n	80016e2 <HAL_GPIO_Init+0x1ca>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_GPIO_Init+0x2bc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d00d      	beq.n	80016de <HAL_GPIO_Init+0x1c6>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a44      	ldr	r2, [pc, #272]	; (80017d8 <HAL_GPIO_Init+0x2c0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d007      	beq.n	80016da <HAL_GPIO_Init+0x1c2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <HAL_GPIO_Init+0x2c4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d101      	bne.n	80016d6 <HAL_GPIO_Init+0x1be>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x1cc>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e004      	b.n	80016e4 <HAL_GPIO_Init+0x1cc>
 80016da:	2302      	movs	r3, #2
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_Init+0x1cc>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_GPIO_Init+0x1cc>
 80016e2:	2300      	movs	r3, #0
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	2103      	movs	r1, #3
 80016e8:	400a      	ands	r2, r1
 80016ea:	00d2      	lsls	r2, r2, #3
 80016ec:	4093      	lsls	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016f4:	4936      	ldr	r1, [pc, #216]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3318      	adds	r3, #24
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	58d3      	ldr	r3, [r2, r3]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43da      	mvns	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	025b      	lsls	r3, r3, #9
 800171c:	4013      	ands	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 800172a:	2280      	movs	r2, #128	; 0x80
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001730:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 8001732:	2384      	movs	r3, #132	; 0x84
 8001734:	58d3      	ldr	r3, [r2, r3]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001756:	491e      	ldr	r1, [pc, #120]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 8001758:	2284      	movs	r2, #132	; 0x84
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	035b      	lsls	r3, r3, #13
 8001776:	4013      	ands	r3, r2
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43da      	mvns	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	039b      	lsls	r3, r3, #14
 80017a0:	4013      	ands	r3, r2
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_GPIO_Init+0x2b8>)
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	40da      	lsrs	r2, r3
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	d000      	beq.n	80017c6 <HAL_GPIO_Init+0x2ae>
 80017c4:	e6b0      	b.n	8001528 <HAL_GPIO_Init+0x10>
  }
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b006      	add	sp, #24
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40021800 	.word	0x40021800
 80017d4:	50000400 	.word	0x50000400
 80017d8:	50000800 	.word	0x50000800
 80017dc:	50000c00 	.word	0x50000c00

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	0008      	movs	r0, r1
 80017ea:	0011      	movs	r1, r2
 80017ec:	1cbb      	adds	r3, r7, #2
 80017ee:	1c02      	adds	r2, r0, #0
 80017f0:	801a      	strh	r2, [r3, #0]
 80017f2:	1c7b      	adds	r3, r7, #1
 80017f4:	1c0a      	adds	r2, r1, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f8:	1c7b      	adds	r3, r7, #1
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d004      	beq.n	800180a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001800:	1cbb      	adds	r3, r7, #2
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800180a:	1cbb      	adds	r3, r7, #2
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b002      	add	sp, #8
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e082      	b.n	8001934 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2241      	movs	r2, #65	; 0x41
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	2100      	movs	r1, #0
 8001840:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f7fe ff7f 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2241      	movs	r2, #65	; 0x41
 800184e:	2124      	movs	r1, #36	; 0x24
 8001850:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2101      	movs	r1, #1
 800185e:	438a      	bics	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4934      	ldr	r1, [pc, #208]	; (800193c <HAL_I2C_Init+0x120>)
 800186c:	400a      	ands	r2, r1
 800186e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4931      	ldr	r1, [pc, #196]	; (8001940 <HAL_I2C_Init+0x124>)
 800187c:	400a      	ands	r2, r1
 800187e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0209      	lsls	r1, r1, #8
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	e007      	b.n	80018aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2184      	movs	r1, #132	; 0x84
 80018a4:	0209      	lsls	r1, r1, #8
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d104      	bne.n	80018bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	491f      	ldr	r1, [pc, #124]	; (8001944 <HAL_I2C_Init+0x128>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	491a      	ldr	r1, [pc, #104]	; (8001940 <HAL_I2C_Init+0x124>)
 80018d8:	400a      	ands	r2, r1
 80018da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	0011      	movs	r1, r2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69d9      	ldr	r1, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2241      	movs	r2, #65	; 0x41
 8001920:	2120      	movs	r1, #32
 8001922:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2242      	movs	r2, #66	; 0x42
 800192e:	2100      	movs	r1, #0
 8001930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b002      	add	sp, #8
 800193a:	bd80      	pop	{r7, pc}
 800193c:	f0ffffff 	.word	0xf0ffffff
 8001940:	ffff7fff 	.word	0xffff7fff
 8001944:	02008000 	.word	0x02008000

08001948 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	0008      	movs	r0, r1
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	0019      	movs	r1, r3
 8001956:	230a      	movs	r3, #10
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	1c02      	adds	r2, r0, #0
 800195c:	801a      	strh	r2, [r3, #0]
 800195e:	2308      	movs	r3, #8
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	1c0a      	adds	r2, r1, #0
 8001964:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2241      	movs	r2, #65	; 0x41
 800196a:	5c9b      	ldrb	r3, [r3, r2]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b20      	cmp	r3, #32
 8001970:	d000      	beq.n	8001974 <HAL_I2C_Master_Transmit+0x2c>
 8001972:	e0e7      	b.n	8001b44 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	5c9b      	ldrb	r3, [r3, r2]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_I2C_Master_Transmit+0x3a>
 800197e:	2302      	movs	r3, #2
 8001980:	e0e1      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800198a:	f7ff fc2b 	bl	80011e4 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	0219      	lsls	r1, r3, #8
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	f000 fddc 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0cc      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2241      	movs	r2, #65	; 0x41
 80019b0:	2121      	movs	r1, #33	; 0x21
 80019b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2242      	movs	r2, #66	; 0x42
 80019b8:	2110      	movs	r1, #16
 80019ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2208      	movs	r2, #8
 80019cc:	18ba      	adds	r2, r7, r2
 80019ce:	8812      	ldrh	r2, [r2, #0]
 80019d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019dc:	b29b      	uxth	r3, r3
 80019de:	2bff      	cmp	r3, #255	; 0xff
 80019e0:	d911      	bls.n	8001a06 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	045c      	lsls	r4, r3, #17
 80019f2:	230a      	movs	r3, #10
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	8819      	ldrh	r1, [r3, #0]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <HAL_I2C_Master_Transmit+0x208>)
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	0023      	movs	r3, r4
 8001a00:	f000 fecc 	bl	800279c <I2C_TransferConfig>
 8001a04:	e075      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	049c      	lsls	r4, r3, #18
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	8819      	ldrh	r1, [r3, #0]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	4b4b      	ldr	r3, [pc, #300]	; (8001b50 <HAL_I2C_Master_Transmit+0x208>)
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	0023      	movs	r3, r4
 8001a28:	f000 feb8 	bl	800279c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001a2c:	e061      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 fdd0 	bl	80025da <I2C_WaitOnTXISFlagUntilTimeout>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e081      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03a      	beq.n	8001af2 <HAL_I2C_Master_Transmit+0x1aa>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d136      	bne.n	8001af2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	f000 fd63 	bl	800255c <I2C_WaitOnFlagUntilTimeout>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e053      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2bff      	cmp	r3, #255	; 0xff
 8001aa6:	d911      	bls.n	8001acc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	22ff      	movs	r2, #255	; 0xff
 8001aac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	045c      	lsls	r4, r3, #17
 8001ab8:	230a      	movs	r3, #10
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	8819      	ldrh	r1, [r3, #0]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	0023      	movs	r3, r4
 8001ac6:	f000 fe69 	bl	800279c <I2C_TransferConfig>
 8001aca:	e012      	b.n	8001af2 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	049c      	lsls	r4, r3, #18
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	8819      	ldrh	r1, [r3, #0]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	0023      	movs	r3, r4
 8001aee:	f000 fe55 	bl	800279c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d198      	bne.n	8001a2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 fda8 	bl	8002658 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e01a      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2220      	movs	r2, #32
 8001b16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	490c      	ldr	r1, [pc, #48]	; (8001b54 <HAL_I2C_Master_Transmit+0x20c>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2241      	movs	r2, #65	; 0x41
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2242      	movs	r2, #66	; 0x42
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2240      	movs	r2, #64	; 0x40
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e000      	b.n	8001b46 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
  }
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b007      	add	sp, #28
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	80002000 	.word	0x80002000
 8001b54:	fe00e800 	.word	0xfe00e800

08001b58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
  }
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b004      	add	sp, #16
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	001a      	movs	r2, r3
 8001baa:	2301      	movs	r3, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	d010      	beq.n	8001bd2 <HAL_I2C_ER_IRQHandler+0x46>
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	09db      	lsrs	r3, r3, #7
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d00a      	beq.n	8001bd2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	0052      	lsls	r2, r2, #1
 8001bd0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	0a9b      	lsrs	r3, r3, #10
 8001bd6:	001a      	movs	r2, r3
 8001bd8:	2301      	movs	r3, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d010      	beq.n	8001c00 <HAL_I2C_ER_IRQHandler+0x74>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	09db      	lsrs	r3, r3, #7
 8001be2:	001a      	movs	r2, r3
 8001be4:	2301      	movs	r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d00a      	beq.n	8001c00 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	2208      	movs	r2, #8
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	00d2      	lsls	r2, r2, #3
 8001bfe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	0a5b      	lsrs	r3, r3, #9
 8001c04:	001a      	movs	r2, r3
 8001c06:	2301      	movs	r3, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d010      	beq.n	8001c2e <HAL_I2C_ER_IRQHandler+0xa2>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	09db      	lsrs	r3, r3, #7
 8001c10:	001a      	movs	r2, r3
 8001c12:	2301      	movs	r3, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	d00a      	beq.n	8001c2e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	220b      	movs	r2, #11
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d005      	beq.n	8001c48 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0011      	movs	r1, r2
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fb70 	bl	8002328 <I2C_ITError>
  }
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b006      	add	sp, #24
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	0008      	movs	r0, r1
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	1cfb      	adds	r3, r7, #3
 8001c7e:	1c02      	adds	r2, r0, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	003b      	movs	r3, r7
 8001c84:	1c0a      	adds	r2, r1, #0
 8001c86:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <I2C_Slave_ISR_IT+0x24>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e0fe      	b.n	8001ee2 <I2C_Slave_ISR_IT+0x222>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d054      	beq.n	8001da2 <I2C_Slave_ISR_IT+0xe2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	091b      	lsrs	r3, r3, #4
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	2301      	movs	r3, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	d04e      	beq.n	8001da2 <I2C_Slave_ISR_IT+0xe2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d12d      	bne.n	8001d6a <I2C_Slave_ISR_IT+0xaa>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2241      	movs	r2, #65	; 0x41
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b28      	cmp	r3, #40	; 0x28
 8001d18:	d10b      	bne.n	8001d32 <I2C_Slave_ISR_IT+0x72>
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	049b      	lsls	r3, r3, #18
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d106      	bne.n	8001d32 <I2C_Slave_ISR_IT+0x72>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	0011      	movs	r1, r2
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 faa6 	bl	800227c <I2C_ITListenCplt>
 8001d30:	e036      	b.n	8001da0 <I2C_Slave_ISR_IT+0xe0>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b29      	cmp	r3, #41	; 0x29
 8001d3c:	d110      	bne.n	8001d60 <I2C_Slave_ISR_IT+0xa0>
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4a6a      	ldr	r2, [pc, #424]	; (8001eec <I2C_Slave_ISR_IT+0x22c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00c      	beq.n	8001d60 <I2C_Slave_ISR_IT+0xa0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fbbb 	bl	80024cc <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f000 f96e 	bl	800203a <I2C_ITSlaveSeqCplt>
 8001d5e:	e01f      	b.n	8001da0 <I2C_Slave_ISR_IT+0xe0>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2210      	movs	r2, #16
 8001d66:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001d68:	e0a1      	b.n	8001eae <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2210      	movs	r2, #16
 8001d70:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	2204      	movs	r2, #4
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <I2C_Slave_ISR_IT+0xd0>
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	045b      	lsls	r3, r3, #17
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d000      	beq.n	8001d90 <I2C_Slave_ISR_IT+0xd0>
 8001d8e:	e08e      	b.n	8001eae <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f000 fac5 	bl	8002328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d9e:	e086      	b.n	8001eae <I2C_Slave_ISR_IT+0x1ee>
 8001da0:	e085      	b.n	8001eae <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	001a      	movs	r2, r3
 8001da8:	2301      	movs	r3, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d035      	beq.n	8001e1a <I2C_Slave_ISR_IT+0x15a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	001a      	movs	r2, r3
 8001db4:	2301      	movs	r3, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	d02f      	beq.n	8001e1a <I2C_Slave_ISR_IT+0x15a>
  {
    if (hi2c->XferCount > 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01c      	beq.n	8001dfe <I2C_Slave_ISR_IT+0x13e>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	4393      	bics	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d154      	bne.n	8001eb2 <I2C_Slave_ISR_IT+0x1f2>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4a38      	ldr	r2, [pc, #224]	; (8001eec <I2C_Slave_ISR_IT+0x22c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d050      	beq.n	8001eb2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f911 	bl	800203a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001e18:	e04b      	b.n	8001eb2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	001a      	movs	r2, r3
 8001e20:	2301      	movs	r3, #1
 8001e22:	4013      	ands	r3, r2
 8001e24:	d00c      	beq.n	8001e40 <I2C_Slave_ISR_IT+0x180>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d006      	beq.n	8001e40 <I2C_Slave_ISR_IT+0x180>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0011      	movs	r1, r2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 f859 	bl	8001ef0 <I2C_ITAddrCplt>
 8001e3e:	e039      	b.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	085b      	lsrs	r3, r3, #1
 8001e44:	001a      	movs	r2, r3
 8001e46:	2301      	movs	r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d033      	beq.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	001a      	movs	r2, r3
 8001e52:	2301      	movs	r3, #1
 8001e54:	4013      	ands	r3, r2
 8001e56:	d02d      	beq.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d018      	beq.n	8001e94 <I2C_Slave_ISR_IT+0x1d4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e92:	e00f      	b.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	045b      	lsls	r3, r3, #17
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d002      	beq.n	8001ea4 <I2C_Slave_ISR_IT+0x1e4>
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f8c7 	bl	800203a <I2C_ITSlaveSeqCplt>
 8001eac:	e002      	b.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	e000      	b.n	8001eb4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001eb2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	001a      	movs	r2, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0x218>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d005      	beq.n	8001ed8 <I2C_Slave_ISR_IT+0x218>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0011      	movs	r1, r2
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f8f2 	bl	80020bc <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b006      	add	sp, #24
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	ffff0000 	.word	0xffff0000

08001ef0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2241      	movs	r2, #65	; 0x41
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	001a      	movs	r2, r3
 8001f04:	2328      	movs	r3, #40	; 0x28
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b28      	cmp	r3, #40	; 0x28
 8001f0a:	d000      	beq.n	8001f0e <I2C_ITAddrCplt+0x1e>
 8001f0c:	e089      	b.n	8002022 <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	400a      	ands	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	21fe      	movs	r1, #254	; 0xfe
 8001f32:	400a      	ands	r2, r1
 8001f34:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	230a      	movs	r3, #10
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	0592      	lsls	r2, r2, #22
 8001f44:	0d92      	lsrs	r2, r2, #22
 8001f46:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2308      	movs	r3, #8
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	21fe      	movs	r1, #254	; 0xfe
 8001f56:	400a      	ands	r2, r1
 8001f58:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d14b      	bne.n	8001ffa <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001f62:	230a      	movs	r3, #10
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	09db      	lsrs	r3, r3, #7
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	4053      	eors	r3, r2
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	001a      	movs	r2, r3
 8001f78:	2306      	movs	r3, #6
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d124      	bne.n	8001fc8 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8001f7e:	230c      	movs	r3, #12
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	220a      	movs	r2, #10
 8001f84:	18ba      	adds	r2, r7, r2
 8001f86:	8812      	ldrh	r2, [r2, #0]
 8001f88:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d14a      	bne.n	8002032 <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2240      	movs	r2, #64	; 0x40
 8001fae:	2100      	movs	r1, #0
 8001fb0:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	881a      	ldrh	r2, [r3, #0]
 8001fb8:	230f      	movs	r3, #15
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	7819      	ldrb	r1, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fe55 	bl	8001c70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001fc6:	e034      	b.n	8002032 <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 8001fc8:	240c      	movs	r4, #12
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	2208      	movs	r2, #8
 8001fce:	18ba      	adds	r2, r7, r2
 8001fd0:	8812      	ldrh	r2, [r2, #0]
 8001fd2:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 fc15 	bl	8002808 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2240      	movs	r2, #64	; 0x40
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	230f      	movs	r3, #15
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	7819      	ldrb	r1, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7ff fe3c 	bl	8001c70 <HAL_I2C_AddrCallback>
}
 8001ff8:	e01b      	b.n	8002032 <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 fc02 	bl	8002808 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800200c:	230c      	movs	r3, #12
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	881a      	ldrh	r2, [r3, #0]
 8002012:	230f      	movs	r3, #15
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	7819      	ldrb	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	0018      	movs	r0, r3
 800201c:	f7ff fe28 	bl	8001c70 <HAL_I2C_AddrCallback>
}
 8002020:	e007      	b.n	8002032 <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2208      	movs	r2, #8
 8002028:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	2100      	movs	r1, #0
 8002030:	5499      	strb	r1, [r3, r2]
}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	b005      	add	sp, #20
 8002038:	bd90      	pop	{r4, r7, pc}

0800203a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2242      	movs	r2, #66	; 0x42
 8002046:	2100      	movs	r1, #0
 8002048:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	; 0x41
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b29      	cmp	r3, #41	; 0x29
 8002054:	d114      	bne.n	8002080 <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2241      	movs	r2, #65	; 0x41
 800205a:	2128      	movs	r1, #40	; 0x28
 800205c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2221      	movs	r2, #33	; 0x21
 8002062:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2101      	movs	r1, #1
 8002068:	0018      	movs	r0, r3
 800206a:	f000 fbcd 	bl	8002808 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2240      	movs	r2, #64	; 0x40
 8002072:	2100      	movs	r1, #0
 8002074:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0018      	movs	r0, r3
 800207a:	f7ff fde9 	bl	8001c50 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800207e:	e019      	b.n	80020b4 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2241      	movs	r2, #65	; 0x41
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b2a      	cmp	r3, #42	; 0x2a
 800208a:	d113      	bne.n	80020b4 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2241      	movs	r2, #65	; 0x41
 8002090:	2128      	movs	r1, #40	; 0x28
 8002092:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2222      	movs	r2, #34	; 0x22
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2102      	movs	r1, #2
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fbb2 	bl	8002808 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff fdd6 	bl	8001c60 <HAL_I2C_SlaveRxCpltCallback>
}
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2220      	movs	r2, #32
 80020d8:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2107      	movs	r1, #7
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fb92 	bl	8002808 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0209      	lsls	r1, r1, #8
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	495c      	ldr	r1, [pc, #368]	; (8002274 <I2C_ITSlaveCplt+0x1b8>)
 8002102:	400a      	ands	r2, r1
 8002104:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	0018      	movs	r0, r3
 800210a:	f000 f9df 	bl	80024cc <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0b9b      	lsrs	r3, r3, #14
 8002112:	001a      	movs	r2, r3
 8002114:	2301      	movs	r3, #1
 8002116:	4013      	ands	r3, r2
 8002118:	d00b      	beq.n	8002132 <I2C_ITSlaveCplt+0x76>
  {
    if (hi2c->hdmatx != NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	2b00      	cmp	r3, #0
 8002120:	d018      	beq.n	8002154 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002130:	e010      	b.n	8002154 <I2C_ITSlaveCplt+0x98>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0bdb      	lsrs	r3, r3, #15
 8002136:	001a      	movs	r2, r3
 8002138:	2301      	movs	r3, #1
 800213a:	4013      	ands	r3, r2
 800213c:	d00a      	beq.n	8002154 <I2C_ITSlaveCplt+0x98>
  {
    if (hi2c->hdmarx != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002142:	2b00      	cmp	r3, #0
 8002144:	d006      	beq.n	8002154 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	b29a      	uxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	001a      	movs	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d020      	beq.n	80021a2 <I2C_ITSlaveCplt+0xe6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2204      	movs	r2, #4
 8002164:	4393      	bics	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <I2C_ITSlaveCplt+0xe6>
    {
      hi2c->XferSize--;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <I2C_ITSlaveCplt+0xfc>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b0:	2204      	movs	r2, #4
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2242      	movs	r2, #66	; 0x42
 80021c2:	2100      	movs	r1, #0
 80021c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	0011      	movs	r1, r2
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f8a3 	bl	8002328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2241      	movs	r2, #65	; 0x41
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b28      	cmp	r3, #40	; 0x28
 80021ec:	d13e      	bne.n	800226c <I2C_ITSlaveCplt+0x1b0>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f000 f841 	bl	800227c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021fa:	e037      	b.n	800226c <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <I2C_ITSlaveCplt+0x1bc>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <I2C_ITSlaveCplt+0x172>
    I2C_ITSlaveSeqCplt(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff ff16 	bl	800203a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <I2C_ITSlaveCplt+0x1bc>)
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2241      	movs	r2, #65	; 0x41
 8002218:	2120      	movs	r1, #32
 800221a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2240      	movs	r2, #64	; 0x40
 8002220:	2100      	movs	r1, #0
 8002222:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	0018      	movs	r0, r3
 8002228:	f7ff fd32 	bl	8001c90 <HAL_I2C_ListenCpltCallback>
}
 800222c:	e01e      	b.n	800226c <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2241      	movs	r2, #65	; 0x41
 8002232:	5c9b      	ldrb	r3, [r3, r2]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b22      	cmp	r3, #34	; 0x22
 8002238:	d10c      	bne.n	8002254 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2241      	movs	r2, #65	; 0x41
 800223e:	2120      	movs	r1, #32
 8002240:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff fd07 	bl	8001c60 <HAL_I2C_SlaveRxCpltCallback>
}
 8002252:	e00b      	b.n	800226c <I2C_ITSlaveCplt+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2241      	movs	r2, #65	; 0x41
 8002258:	2120      	movs	r1, #32
 800225a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff fcf2 	bl	8001c50 <HAL_I2C_SlaveTxCpltCallback>
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	b004      	add	sp, #16
 8002272:	bd80      	pop	{r7, pc}
 8002274:	fe00e800 	.word	0xfe00e800
 8002278:	ffff0000 	.word	0xffff0000

0800227c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <I2C_ITListenCplt+0xa8>)
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2241      	movs	r2, #65	; 0x41
 8002296:	2120      	movs	r1, #32
 8002298:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2242      	movs	r2, #66	; 0x42
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	001a      	movs	r2, r3
 80022ae:	2301      	movs	r3, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d022      	beq.n	80022fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	2204      	movs	r2, #4
 80022f4:	431a      	orrs	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2107      	movs	r1, #7
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 fa82 	bl	8002808 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff fcba 	bl	8001c90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	ffff0000 	.word	0xffff0000

08002328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002332:	200f      	movs	r0, #15
 8002334:	183b      	adds	r3, r7, r0
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	2141      	movs	r1, #65	; 0x41
 800233a:	5c52      	ldrb	r2, [r2, r1]
 800233c:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2242      	movs	r2, #66	; 0x42
 8002342:	2100      	movs	r1, #0
 8002344:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a5b      	ldr	r2, [pc, #364]	; (80024b8 <I2C_ITError+0x190>)
 800234a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800235e:	183b      	adds	r3, r7, r0
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b28      	cmp	r3, #40	; 0x28
 8002364:	d009      	beq.n	800237a <I2C_ITError+0x52>
 8002366:	230f      	movs	r3, #15
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b29      	cmp	r3, #41	; 0x29
 800236e:	d004      	beq.n	800237a <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002370:	230f      	movs	r3, #15
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b2a      	cmp	r3, #42	; 0x2a
 8002378:	d10f      	bne.n	800239a <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2103      	movs	r1, #3
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fa42 	bl	8002808 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2241      	movs	r2, #65	; 0x41
 8002388:	2128      	movs	r1, #40	; 0x28
 800238a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a49      	ldr	r2, [pc, #292]	; (80024bc <I2C_ITError+0x194>)
 8002396:	635a      	str	r2, [r3, #52]	; 0x34
 8002398:	e014      	b.n	80023c4 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2107      	movs	r1, #7
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fa32 	bl	8002808 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2241      	movs	r2, #65	; 0x41
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b60      	cmp	r3, #96	; 0x60
 80023ae:	d003      	beq.n	80023b8 <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2241      	movs	r2, #65	; 0x41
 80023b4:	2120      	movs	r1, #32
 80023b6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	01db      	lsls	r3, r3, #7
 80023ce:	401a      	ands	r2, r3
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d122      	bne.n	800241e <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4937      	ldr	r1, [pc, #220]	; (80024c0 <I2C_ITError+0x198>)
 80023e4:	400a      	ands	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05e      	beq.n	80024ae <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <I2C_ITError+0x19c>)
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	2100      	movs	r1, #0
 80023fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff f80d 	bl	8001424 <HAL_DMA_Abort_IT>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d04f      	beq.n	80024ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	0018      	movs	r0, r3
 800241a:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800241c:	e047      	b.n	80024ae <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	401a      	ands	r2, r3
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	429a      	cmp	r2, r3
 8002430:	d122      	bne.n	8002478 <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <I2C_ITError+0x1a0>)
 800243e:	400a      	ands	r2, r1
 8002440:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2b00      	cmp	r3, #0
 8002448:	d031      	beq.n	80024ae <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244e:	4a1d      	ldr	r2, [pc, #116]	; (80024c4 <I2C_ITError+0x19c>)
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2240      	movs	r2, #64	; 0x40
 8002456:	2100      	movs	r1, #0
 8002458:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	0018      	movs	r0, r3
 8002460:	f7fe ffe0 	bl	8001424 <HAL_DMA_Abort_IT>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d022      	beq.n	80024ae <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002472:	0018      	movs	r0, r3
 8002474:	4790      	blx	r2
}
 8002476:	e01a      	b.n	80024ae <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2241      	movs	r2, #65	; 0x41
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d10c      	bne.n	800249e <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	; 0x41
 8002488:	2120      	movs	r1, #32
 800248a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	2100      	movs	r1, #0
 8002492:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	0018      	movs	r0, r3
 8002498:	f7ff fc0a 	bl	8001cb0 <HAL_I2C_AbortCpltCallback>
}
 800249c:	e007      	b.n	80024ae <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	2100      	movs	r1, #0
 80024a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff fbf9 	bl	8001ca0 <HAL_I2C_ErrorCallback>
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b004      	add	sp, #16
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	ffff0000 	.word	0xffff0000
 80024bc:	08001cc1 	.word	0x08001cc1
 80024c0:	ffffbfff 	.word	0xffffbfff
 80024c4:	08002511 	.word	0x08002511
 80024c8:	ffff7fff 	.word	0xffff7fff

080024cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2202      	movs	r2, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d007      	beq.n	8002508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2101      	movs	r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	619a      	str	r2, [r3, #24]
  }
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	b002      	add	sp, #8
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	2200      	movs	r2, #0
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2200      	movs	r2, #0
 800252c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2241      	movs	r2, #65	; 0x41
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b60      	cmp	r3, #96	; 0x60
 8002538:	d108      	bne.n	800254c <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2241      	movs	r2, #65	; 0x41
 800253e:	2120      	movs	r1, #32
 8002540:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff fbb3 	bl	8001cb0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800254a:	e003      	b.n	8002554 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	0018      	movs	r0, r3
 8002550:	f7ff fba6 	bl	8001ca0 <HAL_I2C_ErrorCallback>
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800256c:	e021      	b.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	d01e      	beq.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002574:	f7fe fe36 	bl	80011e4 <HAL_GetTick>
 8002578:	0002      	movs	r2, r0
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d302      	bcc.n	800258a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d113      	bne.n	80025b2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	2220      	movs	r2, #32
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2241      	movs	r2, #65	; 0x41
 800259a:	2120      	movs	r1, #32
 800259c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2242      	movs	r2, #66	; 0x42
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2240      	movs	r2, #64	; 0x40
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	425a      	negs	r2, r3
 80025c2:	4153      	adcs	r3, r2
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	001a      	movs	r2, r3
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d0ce      	beq.n	800256e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b004      	add	sp, #16
 80025d8:	bd80      	pop	{r7, pc}

080025da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025e6:	e02b      	b.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f86e 	bl	80026d0 <I2C_IsAcknowledgeFailed>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e029      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3301      	adds	r3, #1
 8002600:	d01e      	beq.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002602:	f7fe fdef 	bl	80011e4 <HAL_GetTick>
 8002606:	0002      	movs	r2, r0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	d302      	bcc.n	8002618 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d113      	bne.n	8002640 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	2220      	movs	r2, #32
 800261e:	431a      	orrs	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2241      	movs	r2, #65	; 0x41
 8002628:	2120      	movs	r1, #32
 800262a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2242      	movs	r2, #66	; 0x42
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2240      	movs	r2, #64	; 0x40
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e007      	b.n	8002650 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2202      	movs	r2, #2
 8002648:	4013      	ands	r3, r2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d1cc      	bne.n	80025e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002664:	e028      	b.n	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 f82f 	bl	80026d0 <I2C_IsAcknowledgeFailed>
 8002672:	1e03      	subs	r3, r0, #0
 8002674:	d001      	beq.n	800267a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e026      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7fe fdb3 	bl	80011e4 <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d113      	bne.n	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	2220      	movs	r2, #32
 8002696:	431a      	orrs	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2241      	movs	r2, #65	; 0x41
 80026a0:	2120      	movs	r1, #32
 80026a2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2242      	movs	r2, #66	; 0x42
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	2100      	movs	r1, #0
 80026b2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e007      	b.n	80026c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2220      	movs	r2, #32
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d1cf      	bne.n	8002666 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2210      	movs	r2, #16
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d151      	bne.n	800278e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ea:	e021      	b.n	8002730 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	3301      	adds	r3, #1
 80026f0:	d01e      	beq.n	8002730 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe fd77 	bl	80011e4 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <I2C_IsAcknowledgeFailed+0x38>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d113      	bne.n	8002730 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	2220      	movs	r2, #32
 800270e:	431a      	orrs	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2241      	movs	r2, #65	; 0x41
 8002718:	2120      	movs	r1, #32
 800271a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2242      	movs	r2, #66	; 0x42
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e02f      	b.n	8002790 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	2220      	movs	r2, #32
 8002738:	4013      	ands	r3, r2
 800273a:	2b20      	cmp	r3, #32
 800273c:	d1d6      	bne.n	80026ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2210      	movs	r2, #16
 8002744:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2220      	movs	r2, #32
 800274c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff febb 	bl	80024cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	490d      	ldr	r1, [pc, #52]	; (8002798 <I2C_IsAcknowledgeFailed+0xc8>)
 8002762:	400a      	ands	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	2204      	movs	r2, #4
 800276c:	431a      	orrs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2241      	movs	r2, #65	; 0x41
 8002776:	2120      	movs	r1, #32
 8002778:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2242      	movs	r2, #66	; 0x42
 800277e:	2100      	movs	r1, #0
 8002780:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2240      	movs	r2, #64	; 0x40
 8002786:	2100      	movs	r1, #0
 8002788:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	0018      	movs	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}
 8002798:	fe00e800 	.word	0xfe00e800

0800279c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	0008      	movs	r0, r1
 80027a6:	0011      	movs	r1, r2
 80027a8:	607b      	str	r3, [r7, #4]
 80027aa:	240a      	movs	r4, #10
 80027ac:	193b      	adds	r3, r7, r4
 80027ae:	1c02      	adds	r2, r0, #0
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	2009      	movs	r0, #9
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	1c0a      	adds	r2, r1, #0
 80027b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	0d51      	lsrs	r1, r2, #21
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	00d2      	lsls	r2, r2, #3
 80027c8:	400a      	ands	r2, r1
 80027ca:	490e      	ldr	r1, [pc, #56]	; (8002804 <I2C_TransferConfig+0x68>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	43d2      	mvns	r2, r2
 80027d0:	401a      	ands	r2, r3
 80027d2:	0011      	movs	r1, r2
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	059b      	lsls	r3, r3, #22
 80027da:	0d9a      	lsrs	r2, r3, #22
 80027dc:	183b      	adds	r3, r7, r0
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	0418      	lsls	r0, r3, #16
 80027e2:	23ff      	movs	r3, #255	; 0xff
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	4003      	ands	r3, r0
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b005      	add	sp, #20
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	03ff63ff 	.word	0x03ff63ff

08002808 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	000a      	movs	r2, r1
 8002812:	1cbb      	adds	r3, r7, #2
 8002814:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800281a:	1cbb      	adds	r3, r7, #2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2201      	movs	r2, #1
 8002820:	4013      	ands	r3, r2
 8002822:	d010      	beq.n	8002846 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2242      	movs	r2, #66	; 0x42
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2241      	movs	r2, #65	; 0x41
 8002830:	5c9b      	ldrb	r3, [r3, r2]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	001a      	movs	r2, r3
 8002836:	2328      	movs	r3, #40	; 0x28
 8002838:	4013      	ands	r3, r2
 800283a:	2b28      	cmp	r3, #40	; 0x28
 800283c:	d003      	beq.n	8002846 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	22b0      	movs	r2, #176	; 0xb0
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002846:	1cbb      	adds	r3, r7, #2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d010      	beq.n	8002872 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2244      	movs	r2, #68	; 0x44
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2241      	movs	r2, #65	; 0x41
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	001a      	movs	r2, r3
 8002862:	2328      	movs	r3, #40	; 0x28
 8002864:	4013      	ands	r3, r2
 8002866:	2b28      	cmp	r3, #40	; 0x28
 8002868:	d003      	beq.n	8002872 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	22b0      	movs	r2, #176	; 0xb0
 800286e:	4313      	orrs	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002872:	1cbb      	adds	r3, r7, #2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d003      	beq.n	8002884 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22b8      	movs	r2, #184	; 0xb8
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8002884:	1cbb      	adds	r3, r7, #2
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	2211      	movs	r2, #17
 800288a:	4013      	ands	r3, r2
 800288c:	2b11      	cmp	r3, #17
 800288e:	d103      	bne.n	8002898 <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2290      	movs	r2, #144	; 0x90
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002898:	1cbb      	adds	r3, r7, #2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2212      	movs	r2, #18
 800289e:	4013      	ands	r3, r2
 80028a0:	2b12      	cmp	r3, #18
 80028a2:	d103      	bne.n	80028ac <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80028ac:	1cbb      	adds	r3, r7, #2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2212      	movs	r2, #18
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b12      	cmp	r3, #18
 80028b6:	d103      	bne.n	80028c0 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	; 0x40
 80028bc:	4313      	orrs	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43d9      	mvns	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b004      	add	sp, #16
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2241      	movs	r2, #65	; 0x41
 80028ea:	5c9b      	ldrb	r3, [r3, r2]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d138      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2240      	movs	r2, #64	; 0x40
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e032      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2240      	movs	r2, #64	; 0x40
 8002904:	2101      	movs	r1, #1
 8002906:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2241      	movs	r2, #65	; 0x41
 800290c:	2124      	movs	r1, #36	; 0x24
 800290e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4911      	ldr	r1, [pc, #68]	; (8002970 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800292c:	400a      	ands	r2, r1
 800292e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2241      	movs	r2, #65	; 0x41
 8002954:	2120      	movs	r1, #32
 8002956:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	2100      	movs	r1, #0
 800295e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b002      	add	sp, #8
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	ffffefff 	.word	0xffffefff

08002974 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2241      	movs	r2, #65	; 0x41
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	d139      	bne.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	5c9b      	ldrb	r3, [r3, r2]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002994:	2302      	movs	r3, #2
 8002996:	e033      	b.n	8002a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	2101      	movs	r1, #1
 800299e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2241      	movs	r2, #65	; 0x41
 80029a4:	2124      	movs	r1, #36	; 0x24
 80029a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	438a      	bics	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2241      	movs	r2, #65	; 0x41
 80029ee:	2120      	movs	r1, #32
 80029f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	2100      	movs	r1, #0
 80029f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b004      	add	sp, #16
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	fffff0ff 	.word	0xfffff0ff

08002a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d11f      	bne.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	0013      	movs	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4912      	ldr	r1, [pc, #72]	; (8002a88 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fb60 	bl	8000104 <__udivsi3>
 8002a44:	0003      	movs	r3, r0
 8002a46:	3301      	adds	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a4a:	e008      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e001      	b.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e009      	b.n	8002a72 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	401a      	ands	r2, r3
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0ed      	beq.n	8002a4c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffff9ff 	.word	0xfffff9ff
 8002a84:	20000000 	.word	0x20000000
 8002a88:	000f4240 	.word	0x000f4240

08002a8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	23e0      	movs	r3, #224	; 0xe0
 8002a96:	01db      	lsls	r3, r3, #7
 8002a98:	4013      	ands	r3, r2
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e304      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2201      	movs	r2, #1
 8002abc:	4013      	ands	r3, r2
 8002abe:	d100      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x1e>
 8002ac0:	e07c      	b.n	8002bbc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4bc3      	ldr	r3, [pc, #780]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2238      	movs	r2, #56	; 0x38
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002acc:	4bc0      	ldr	r3, [pc, #768]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x3e>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x44>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	4bb9      	ldr	r3, [pc, #740]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	029b      	lsls	r3, r3, #10
 8002af0:	4013      	ands	r3, r2
 8002af2:	d062      	beq.n	8002bba <HAL_RCC_OscConfig+0x116>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d15e      	bne.n	8002bba <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e2df      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	025b      	lsls	r3, r3, #9
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x78>
 8002b0c:	4bb0      	ldr	r3, [pc, #704]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4baf      	ldr	r3, [pc, #700]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0249      	lsls	r1, r1, #9
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e020      	b.n	8002b5e <HAL_RCC_OscConfig+0xba>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	23a0      	movs	r3, #160	; 0xa0
 8002b22:	02db      	lsls	r3, r3, #11
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d10e      	bne.n	8002b46 <HAL_RCC_OscConfig+0xa2>
 8002b28:	4ba9      	ldr	r3, [pc, #676]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4ba8      	ldr	r3, [pc, #672]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	02c9      	lsls	r1, r1, #11
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	4ba6      	ldr	r3, [pc, #664]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4ba5      	ldr	r3, [pc, #660]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	0249      	lsls	r1, r1, #9
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0xba>
 8002b46:	4ba2      	ldr	r3, [pc, #648]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4ba1      	ldr	r3, [pc, #644]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b4c:	49a1      	ldr	r1, [pc, #644]	; (8002dd4 <HAL_RCC_OscConfig+0x330>)
 8002b4e:	400a      	ands	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	4b9f      	ldr	r3, [pc, #636]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b9e      	ldr	r3, [pc, #632]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b58:	499f      	ldr	r1, [pc, #636]	; (8002dd8 <HAL_RCC_OscConfig+0x334>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d014      	beq.n	8002b90 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fb3d 	bl	80011e4 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fb38 	bl	80011e4 <HAL_GetTick>
 8002b74:	0002      	movs	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e29e      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b82:	4b93      	ldr	r3, [pc, #588]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xcc>
 8002b8e:	e015      	b.n	8002bbc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb28 	bl	80011e4 <HAL_GetTick>
 8002b94:	0003      	movs	r3, r0
 8002b96:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fb23 	bl	80011e4 <HAL_GetTick>
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b64      	cmp	r3, #100	; 0x64
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e289      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bac:	4b88      	ldr	r3, [pc, #544]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0xf6>
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d100      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x124>
 8002bc6:	e099      	b.n	8002cfc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc8:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2238      	movs	r2, #56	; 0x38
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_OscConfig+0x144>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d002      	beq.n	8002bee <HAL_RCC_OscConfig+0x14a>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d135      	bne.n	8002c5a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bee:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d005      	beq.n	8002c06 <HAL_RCC_OscConfig+0x162>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e25c      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b72      	ldr	r3, [pc, #456]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a74      	ldr	r2, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	4b6e      	ldr	r3, [pc, #440]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d112      	bne.n	8002c48 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c22:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	4b67      	ldr	r3, [pc, #412]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c36:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0adb      	lsrs	r3, r3, #11
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	4013      	ands	r3, r2
 8002c40:	4a68      	ldr	r2, [pc, #416]	; (8002de4 <HAL_RCC_OscConfig+0x340>)
 8002c42:	40da      	lsrs	r2, r3
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <HAL_RCC_OscConfig+0x344>)
 8002c46:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x348>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7fe fa6f 	bl	8001130 <HAL_InitTick>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d051      	beq.n	8002cfa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e232      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c62:	4b5b      	ldr	r3, [pc, #364]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a5e      	ldr	r2, [pc, #376]	; (8002de0 <HAL_RCC_OscConfig+0x33c>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002c76:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4b55      	ldr	r3, [pc, #340]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0049      	lsls	r1, r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe faae 	bl	80011e4 <HAL_GetTick>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe faa9 	bl	80011e4 <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e20f      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b48      	ldr	r3, [pc, #288]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_RCC_OscConfig+0x338>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	021a      	lsls	r2, r3, #8
 8002cbc:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	e01b      	b.n	8002cfc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	4b42      	ldr	r3, [pc, #264]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002cca:	4949      	ldr	r1, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x34c>)
 8002ccc:	400a      	ands	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fa88 	bl	80011e4 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe fa83 	bl	80011e4 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1e9      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cec:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x236>
 8002cf8:	e000      	b.n	8002cfc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cfa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	4013      	ands	r3, r2
 8002d04:	d047      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002d06:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2238      	movs	r2, #56	; 0x38
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	d10a      	bne.n	8002d28 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002d12:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d16:	2202      	movs	r2, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d03c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x2f2>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d138      	bne.n	8002d96 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e1cb      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d019      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d36:	2101      	movs	r1, #1
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fa52 	bl	80011e4 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe fa4d 	bl	80011e4 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1b3      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d0f1      	beq.n	8002d46 <HAL_RCC_OscConfig+0x2a2>
 8002d62:	e018      	b.n	8002d96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa38 	bl	80011e4 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fa33 	bl	80011e4 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e199      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8c:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d90:	2202      	movs	r2, #2
 8002d92:	4013      	ands	r3, r2
 8002d94:	d1f1      	bne.n	8002d7a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <HAL_RCC_OscConfig+0x2fe>
 8002da0:	e0c6      	b.n	8002f30 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da2:	231f      	movs	r3, #31
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2238      	movs	r2, #56	; 0x38
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d11e      	bne.n	8002df4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <HAL_RCC_OscConfig+0x32c>)
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d100      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x31e>
 8002dc0:	e0b6      	b.n	8002f30 <HAL_RCC_OscConfig+0x48c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d000      	beq.n	8002dcc <HAL_RCC_OscConfig+0x328>
 8002dca:	e0b1      	b.n	8002f30 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e177      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	fffeffff 	.word	0xfffeffff
 8002dd8:	fffbffff 	.word	0xfffbffff
 8002ddc:	ffff80ff 	.word	0xffff80ff
 8002de0:	ffffc7ff 	.word	0xffffc7ff
 8002de4:	00f42400 	.word	0x00f42400
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004
 8002df0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df4:	4bb4      	ldr	r3, [pc, #720]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	055b      	lsls	r3, r3, #21
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x360>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x362>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d011      	beq.n	8002e2e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4baf      	ldr	r3, [pc, #700]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e0e:	4bae      	ldr	r3, [pc, #696]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e10:	2180      	movs	r1, #128	; 0x80
 8002e12:	0549      	lsls	r1, r1, #21
 8002e14:	430a      	orrs	r2, r1
 8002e16:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e18:	4bab      	ldr	r3, [pc, #684]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	055b      	lsls	r3, r3, #21
 8002e20:	4013      	ands	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002e26:	231f      	movs	r3, #31
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	4ba7      	ldr	r3, [pc, #668]	; (80030cc <HAL_RCC_OscConfig+0x628>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4013      	ands	r3, r2
 8002e38:	d11a      	bne.n	8002e70 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e3a:	4ba4      	ldr	r3, [pc, #656]	; (80030cc <HAL_RCC_OscConfig+0x628>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4ba3      	ldr	r3, [pc, #652]	; (80030cc <HAL_RCC_OscConfig+0x628>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	0049      	lsls	r1, r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002e48:	f7fe f9cc 	bl	80011e4 <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e52:	f7fe f9c7 	bl	80011e4 <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e12d      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e64:	4b99      	ldr	r3, [pc, #612]	; (80030cc <HAL_RCC_OscConfig+0x628>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x3e2>
 8002e78:	4b93      	ldr	r3, [pc, #588]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e7c:	4b92      	ldr	r3, [pc, #584]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e84:	e01c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d10c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x404>
 8002e8e:	4b8e      	ldr	r3, [pc, #568]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e92:	4b8d      	ldr	r3, [pc, #564]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e94:	2104      	movs	r1, #4
 8002e96:	430a      	orrs	r2, r1
 8002e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002e9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e9e:	4b8a      	ldr	r3, [pc, #552]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x41c>
 8002ea8:	4b87      	ldr	r3, [pc, #540]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002eb8:	4b83      	ldr	r3, [pc, #524]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002eba:	2104      	movs	r1, #4
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d014      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f98c 	bl	80011e4 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed0:	e009      	b.n	8002ee6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe f987 	bl	80011e4 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x62c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0ec      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eea:	2202      	movs	r2, #2
 8002eec:	4013      	ands	r3, r2
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x42e>
 8002ef0:	e013      	b.n	8002f1a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f977 	bl	80011e4 <HAL_GetTick>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efa:	e009      	b.n	8002f10 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7fe f972 	bl	80011e4 <HAL_GetTick>
 8002f00:	0002      	movs	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	4a72      	ldr	r2, [pc, #456]	; (80030d0 <HAL_RCC_OscConfig+0x62c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e0d7      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002f1a:	231f      	movs	r3, #31
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d105      	bne.n	8002f30 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f28:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f2a:	496a      	ldr	r1, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x630>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x496>
 8002f38:	e0c1      	b.n	80030be <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	2238      	movs	r2, #56	; 0x38
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d100      	bne.n	8002f48 <HAL_RCC_OscConfig+0x4a4>
 8002f46:	e081      	b.n	800304c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d156      	bne.n	8002ffe <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f50:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b5c      	ldr	r3, [pc, #368]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f56:	4960      	ldr	r1, [pc, #384]	; (80030d8 <HAL_RCC_OscConfig+0x634>)
 8002f58:	400a      	ands	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f942 	bl	80011e4 <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f66:	f7fe f93d 	bl	80011e4 <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0a3      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	4b53      	ldr	r3, [pc, #332]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	049b      	lsls	r3, r3, #18
 8002f80:	4013      	ands	r3, r2
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_RCC_OscConfig+0x638>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	0019      	movs	r1, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002fbe:	2180      	movs	r1, #128	; 0x80
 8002fc0:	0449      	lsls	r1, r1, #17
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002fc6:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	4b3f      	ldr	r3, [pc, #252]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0549      	lsls	r1, r1, #21
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe f906 	bl	80011e4 <HAL_GetTick>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe f901 	bl	80011e4 <HAL_GetTick>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e067      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2380      	movs	r3, #128	; 0x80
 8002ff6:	049b      	lsls	r3, r3, #18
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x53a>
 8002ffc:	e05f      	b.n	80030be <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8003004:	4934      	ldr	r1, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x634>)
 8003006:	400a      	ands	r2, r1
 8003008:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8003010:	2103      	movs	r1, #3
 8003012:	438a      	bics	r2, r1
 8003014:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 800301c:	4930      	ldr	r1, [pc, #192]	; (80030e0 <HAL_RCC_OscConfig+0x63c>)
 800301e:	400a      	ands	r2, r1
 8003020:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe f8df 	bl	80011e4 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302c:	f7fe f8da 	bl	80011e4 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e040      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	049b      	lsls	r3, r3, #18
 8003046:	4013      	ands	r3, r2
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x588>
 800304a:	e038      	b.n	80030be <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e033      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_OscConfig+0x624>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2203      	movs	r2, #3
 8003062:	401a      	ands	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	429a      	cmp	r2, r3
 800306a:	d126      	bne.n	80030ba <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2270      	movs	r2, #112	; 0x70
 8003070:	401a      	ands	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11f      	bne.n	80030ba <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	23fe      	movs	r3, #254	; 0xfe
 800307e:	01db      	lsls	r3, r3, #7
 8003080:	401a      	ands	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d116      	bne.n	80030ba <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	23f8      	movs	r3, #248	; 0xf8
 8003090:	039b      	lsls	r3, r3, #14
 8003092:	401a      	ands	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d10e      	bne.n	80030ba <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	23e0      	movs	r3, #224	; 0xe0
 80030a0:	051b      	lsls	r3, r3, #20
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	0f5b      	lsrs	r3, r3, #29
 80030b0:	075a      	lsls	r2, r3, #29
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b008      	add	sp, #32
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	00001388 	.word	0x00001388
 80030d4:	efffffff 	.word	0xefffffff
 80030d8:	feffffff 	.word	0xfeffffff
 80030dc:	11c1808c 	.word	0x11c1808c
 80030e0:	eefeffff 	.word	0xeefeffff

080030e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e0e9      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030f8:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2207      	movs	r2, #7
 80030fe:	4013      	ands	r3, r2
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d91e      	bls.n	8003144 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2207      	movs	r2, #7
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b70      	ldr	r3, [pc, #448]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003118:	f7fe f864 	bl	80011e4 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003120:	e009      	b.n	8003136 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003122:	f7fe f85f 	bl	80011e4 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_RCC_ClockConfig+0x1f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e0ca      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003136:	4b67      	ldr	r3, [pc, #412]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2207      	movs	r2, #7
 800313c:	4013      	ands	r3, r2
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d1ee      	bne.n	8003122 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2202      	movs	r2, #2
 800314a:	4013      	ands	r3, r2
 800314c:	d015      	beq.n	800317a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d006      	beq.n	8003166 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003158:	4b60      	ldr	r3, [pc, #384]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 800315e:	21e0      	movs	r1, #224	; 0xe0
 8003160:	01c9      	lsls	r1, r1, #7
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003166:	4b5d      	ldr	r3, [pc, #372]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	4a5d      	ldr	r2, [pc, #372]	; (80032e0 <HAL_RCC_ClockConfig+0x1fc>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2201      	movs	r2, #1
 8003180:	4013      	ands	r3, r2
 8003182:	d057      	beq.n	8003234 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800318c:	4b53      	ldr	r3, [pc, #332]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	029b      	lsls	r3, r3, #10
 8003194:	4013      	ands	r3, r2
 8003196:	d12b      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e097      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	2380      	movs	r3, #128	; 0x80
 80031aa:	049b      	lsls	r3, r3, #18
 80031ac:	4013      	ands	r3, r2
 80031ae:	d11f      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e08b      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4013      	ands	r3, r2
 80031c6:	d113      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e07f      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d108      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e074      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80031e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e6:	2202      	movs	r2, #2
 80031e8:	4013      	ands	r3, r2
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e06d      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f0:	4b3a      	ldr	r3, [pc, #232]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2207      	movs	r2, #7
 80031f6:	4393      	bics	r3, r2
 80031f8:	0019      	movs	r1, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4b37      	ldr	r3, [pc, #220]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003204:	f7fd ffee 	bl	80011e4 <HAL_GetTick>
 8003208:	0003      	movs	r3, r0
 800320a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320c:	e009      	b.n	8003222 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	f7fd ffe9 	bl	80011e4 <HAL_GetTick>
 8003212:	0002      	movs	r2, r0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <HAL_RCC_ClockConfig+0x1f4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e054      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	4b2e      	ldr	r3, [pc, #184]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2238      	movs	r2, #56	; 0x38
 8003228:	401a      	ands	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	429a      	cmp	r2, r3
 8003232:	d1ec      	bne.n	800320e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2207      	movs	r2, #7
 800323a:	4013      	ands	r3, r2
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d21e      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2207      	movs	r2, #7
 8003248:	4393      	bics	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003254:	f7fd ffc6 	bl	80011e4 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800325c:	e009      	b.n	8003272 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800325e:	f7fd ffc1 	bl	80011e4 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	4a1b      	ldr	r2, [pc, #108]	; (80032d8 <HAL_RCC_ClockConfig+0x1f4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e02c      	b.n	80032cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d1ee      	bne.n	800325e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <HAL_RCC_ClockConfig+0x200>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 800329a:	430a      	orrs	r2, r1
 800329c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800329e:	f000 f829 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 80032a2:	0001      	movs	r1, r0
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_RCC_ClockConfig+0x1f8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	0a1b      	lsrs	r3, r3, #8
 80032aa:	220f      	movs	r2, #15
 80032ac:	401a      	ands	r2, r3
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_RCC_ClockConfig+0x204>)
 80032b0:	0092      	lsls	r2, r2, #2
 80032b2:	58d3      	ldr	r3, [r2, r3]
 80032b4:	221f      	movs	r2, #31
 80032b6:	4013      	ands	r3, r2
 80032b8:	000a      	movs	r2, r1
 80032ba:	40da      	lsrs	r2, r3
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x208>)
 80032be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x20c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fd ff33 	bl	8001130 <HAL_InitTick>
 80032ca:	0003      	movs	r3, r0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b004      	add	sp, #16
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40022000 	.word	0x40022000
 80032d8:	00001388 	.word	0x00001388
 80032dc:	40021000 	.word	0x40021000
 80032e0:	fffff0ff 	.word	0xfffff0ff
 80032e4:	ffff8fff 	.word	0xffff8fff
 80032e8:	080086ec 	.word	0x080086ec
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20000004 	.word	0x20000004

080032f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2238      	movs	r2, #56	; 0x38
 8003300:	4013      	ands	r3, r2
 8003302:	d10f      	bne.n	8003324 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	0adb      	lsrs	r3, r3, #11
 800330a:	2207      	movs	r2, #7
 800330c:	4013      	ands	r3, r2
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	0013      	movs	r3, r2
 8003314:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	4835      	ldr	r0, [pc, #212]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800331a:	f7fc fef3 	bl	8000104 <__udivsi3>
 800331e:	0003      	movs	r3, r0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	e05d      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2238      	movs	r2, #56	; 0x38
 800332a:	4013      	ands	r3, r2
 800332c:	2b08      	cmp	r3, #8
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	e054      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003336:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2238      	movs	r2, #56	; 0x38
 800333c:	4013      	ands	r3, r2
 800333e:	2b10      	cmp	r3, #16
 8003340:	d138      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2203      	movs	r2, #3
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	091b      	lsrs	r3, r3, #4
 8003352:	2207      	movs	r2, #7
 8003354:	4013      	ands	r3, r2
 8003356:	3301      	adds	r3, #1
 8003358:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d10d      	bne.n	800337c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4824      	ldr	r0, [pc, #144]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003364:	f7fc fece 	bl	8000104 <__udivsi3>
 8003368:	0003      	movs	r3, r0
 800336a:	0019      	movs	r1, r3
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	227f      	movs	r2, #127	; 0x7f
 8003374:	4013      	ands	r3, r2
 8003376:	434b      	muls	r3, r1
 8003378:	617b      	str	r3, [r7, #20]
        break;
 800337a:	e00d      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	481c      	ldr	r0, [pc, #112]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003380:	f7fc fec0 	bl	8000104 <__udivsi3>
 8003384:	0003      	movs	r3, r0
 8003386:	0019      	movs	r1, r3
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	227f      	movs	r2, #127	; 0x7f
 8003390:	4013      	ands	r3, r2
 8003392:	434b      	muls	r3, r1
 8003394:	617b      	str	r3, [r7, #20]
        break;
 8003396:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	0f5b      	lsrs	r3, r3, #29
 800339e:	2207      	movs	r2, #7
 80033a0:	4013      	ands	r3, r2
 80033a2:	3301      	adds	r3, #1
 80033a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	6978      	ldr	r0, [r7, #20]
 80033aa:	f7fc feab 	bl	8000104 <__udivsi3>
 80033ae:	0003      	movs	r3, r0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2238      	movs	r2, #56	; 0x38
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d103      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	021b      	lsls	r3, r3, #8
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2238      	movs	r2, #56	; 0x38
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b18      	cmp	r3, #24
 80033d2:	d103      	bne.n	80033dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80033d4:	23fa      	movs	r3, #250	; 0xfa
 80033d6:	01db      	lsls	r3, r3, #7
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	e001      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80033e0:	693b      	ldr	r3, [r7, #16]
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b006      	add	sp, #24
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40021000 	.word	0x40021000
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b02      	ldr	r3, [pc, #8]	; (8003408 <HAL_RCC_GetHCLKFreq+0x10>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	20000000 	.word	0x20000000

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b5b0      	push	{r4, r5, r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003410:	f7ff fff2 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003414:	0004      	movs	r4, r0
 8003416:	f7ff fb39 	bl	8002a8c <LL_RCC_GetAPB1Prescaler>
 800341a:	0003      	movs	r3, r0
 800341c:	0b1a      	lsrs	r2, r3, #12
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	58d3      	ldr	r3, [r2, r3]
 8003424:	221f      	movs	r2, #31
 8003426:	4013      	ands	r3, r2
 8003428:	40dc      	lsrs	r4, r3
 800342a:	0023      	movs	r3, r4
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bdb0      	pop	{r4, r5, r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	0800872c 	.word	0x0800872c

08003438 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003440:	2313      	movs	r3, #19
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003448:	2312      	movs	r3, #18
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	029b      	lsls	r3, r3, #10
 8003458:	4013      	ands	r3, r2
 800345a:	d100      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800345c:	e0a4      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2311      	movs	r3, #17
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003466:	4bc3      	ldr	r3, [pc, #780]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	055b      	lsls	r3, r3, #21
 800346e:	4013      	ands	r3, r2
 8003470:	d111      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	4bc0      	ldr	r3, [pc, #768]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003476:	4bbf      	ldr	r3, [pc, #764]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	0549      	lsls	r1, r1, #21
 800347c:	430a      	orrs	r2, r1
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003480:	4bbc      	ldr	r3, [pc, #752]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	055b      	lsls	r3, r3, #21
 8003488:	4013      	ands	r3, r2
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2311      	movs	r3, #17
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003496:	4bb8      	ldr	r3, [pc, #736]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4bb7      	ldr	r3, [pc, #732]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800349c:	2180      	movs	r1, #128	; 0x80
 800349e:	0049      	lsls	r1, r1, #1
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a4:	f7fd fe9e 	bl	80011e4 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ac:	e00b      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fd fe99 	bl	80011e4 <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d904      	bls.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80034bc:	2313      	movs	r3, #19
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2203      	movs	r2, #3
 80034c2:	701a      	strb	r2, [r3, #0]
        break;
 80034c4:	e005      	b.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034c6:	4bac      	ldr	r3, [pc, #688]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	d0ed      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80034d2:	2313      	movs	r3, #19
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d154      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034dc:	4ba5      	ldr	r3, [pc, #660]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034e0:	23c0      	movs	r3, #192	; 0xc0
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d019      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d014      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034f8:	4b9e      	ldr	r3, [pc, #632]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	4a9f      	ldr	r2, [pc, #636]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80034fe:	4013      	ands	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003502:	4b9c      	ldr	r3, [pc, #624]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003506:	4b9b      	ldr	r3, [pc, #620]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	0249      	lsls	r1, r1, #9
 800350c:	430a      	orrs	r2, r1
 800350e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003510:	4b98      	ldr	r3, [pc, #608]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003512:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003514:	4b97      	ldr	r3, [pc, #604]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003516:	499a      	ldr	r1, [pc, #616]	; (8003780 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003518:	400a      	ands	r2, r1
 800351a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800351c:	4b95      	ldr	r3, [pc, #596]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	d016      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fe5b 	bl	80011e4 <HAL_GetTick>
 800352e:	0003      	movs	r3, r0
 8003530:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd fe56 	bl	80011e4 <HAL_GetTick>
 8003538:	0002      	movs	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	4a91      	ldr	r2, [pc, #580]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d904      	bls.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8003544:	2313      	movs	r3, #19
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2203      	movs	r2, #3
 800354a:	701a      	strb	r2, [r3, #0]
            break;
 800354c:	e004      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354e:	4b89      	ldr	r3, [pc, #548]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	2202      	movs	r2, #2
 8003554:	4013      	ands	r3, r2
 8003556:	d0ed      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8003558:	2313      	movs	r3, #19
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003562:	4b84      	ldr	r3, [pc, #528]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003566:	4a85      	ldr	r2, [pc, #532]	; (800377c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003570:	4b80      	ldr	r3, [pc, #512]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003572:	430a      	orrs	r2, r1
 8003574:	65da      	str	r2, [r3, #92]	; 0x5c
 8003576:	e00c      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003578:	2312      	movs	r3, #18
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	2213      	movs	r2, #19
 800357e:	18ba      	adds	r2, r7, r2
 8003580:	7812      	ldrb	r2, [r2, #0]
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e005      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	2312      	movs	r3, #18
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2213      	movs	r2, #19
 800358c:	18ba      	adds	r2, r7, r2
 800358e:	7812      	ldrb	r2, [r2, #0]
 8003590:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003592:	2311      	movs	r3, #17
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b75      	ldr	r3, [pc, #468]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800359e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035a0:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035a2:	4979      	ldr	r1, [pc, #484]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d009      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	2203      	movs	r2, #3
 80035b8:	4393      	bics	r3, r2
 80035ba:	0019      	movs	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4b6c      	ldr	r3, [pc, #432]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035c2:	430a      	orrs	r2, r1
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	4013      	ands	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d0:	4b68      	ldr	r3, [pc, #416]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	220c      	movs	r2, #12
 80035d6:	4393      	bics	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b65      	ldr	r3, [pc, #404]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4013      	ands	r3, r2
 80035ec:	d009      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ee:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f2:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80035fe:	430a      	orrs	r2, r1
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4013      	ands	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800360e:	4b59      	ldr	r3, [pc, #356]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	4a5f      	ldr	r2, [pc, #380]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003614:	4013      	ands	r3, r2
 8003616:	0019      	movs	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	4b55      	ldr	r3, [pc, #340]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800361e:	430a      	orrs	r2, r1
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4013      	ands	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	4a58      	ldr	r2, [pc, #352]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	4b4d      	ldr	r3, [pc, #308]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800363e:	430a      	orrs	r2, r1
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	4013      	ands	r3, r2
 800364a:	d009      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800364c:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800364e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003650:	4a51      	ldr	r2, [pc, #324]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003652:	4013      	ands	r3, r2
 8003654:	0019      	movs	r1, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	4b46      	ldr	r3, [pc, #280]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800365c:	430a      	orrs	r2, r1
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	01db      	lsls	r3, r3, #7
 8003668:	4013      	ands	r3, r2
 800366a:	d015      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800366c:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	0899      	lsrs	r1, r3, #2
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	4b3e      	ldr	r3, [pc, #248]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800367a:	430a      	orrs	r2, r1
 800367c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1a      	ldr	r2, [r3, #32]
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	05db      	lsls	r3, r3, #23
 8003686:	429a      	cmp	r2, r3
 8003688:	d106      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800368a:	4b3a      	ldr	r3, [pc, #232]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	4b39      	ldr	r3, [pc, #228]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003690:	2180      	movs	r1, #128	; 0x80
 8003692:	0249      	lsls	r1, r1, #9
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR_CECSEL)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	031b      	lsls	r3, r3, #12
 80036a0:	4013      	ands	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036a4:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	4393      	bics	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036b4:	430a      	orrs	r2, r1
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	039b      	lsls	r3, r3, #14
 80036c0:	4013      	ands	r3, r2
 80036c2:	d016      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	4a34      	ldr	r2, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80036ca:	4013      	ands	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d2:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	03db      	lsls	r3, r3, #15
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d106      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80036ea:	2180      	movs	r1, #128	; 0x80
 80036ec:	0449      	lsls	r1, r1, #17
 80036ee:	430a      	orrs	r2, r1
 80036f0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	03db      	lsls	r3, r3, #15
 80036fa:	4013      	ands	r3, r2
 80036fc:	d016      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036fe:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4b19      	ldr	r3, [pc, #100]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800370e:	430a      	orrs	r2, r1
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	045b      	lsls	r3, r3, #17
 800371a:	429a      	cmp	r2, r3
 800371c:	d106      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	0449      	lsls	r1, r1, #17
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4013      	ands	r3, r2
 8003736:	d016      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800373a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003748:	430a      	orrs	r2, r1
 800374a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	01db      	lsls	r3, r3, #7
 8003754:	429a      	cmp	r2, r3
 8003756:	d106      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x32e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	0249      	lsls	r1, r1, #9
 8003762:	430a      	orrs	r2, r1
 8003764:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003766:	2312      	movs	r3, #18
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b006      	add	sp, #24
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	fffffcff 	.word	0xfffffcff
 8003780:	fffeffff 	.word	0xfffeffff
 8003784:	00001388 	.word	0x00001388
 8003788:	efffffff 	.word	0xefffffff
 800378c:	fffff3ff 	.word	0xfffff3ff
 8003790:	fff3ffff 	.word	0xfff3ffff
 8003794:	ffcfffff 	.word	0xffcfffff
 8003798:	ffffcfff 	.word	0xffffcfff
 800379c:	ffbfffff 	.word	0xffbfffff
 80037a0:	feffffff 	.word	0xfeffffff
 80037a4:	ffff3fff 	.word	0xffff3fff

080037a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e046      	b.n	8003848 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	589b      	ldr	r3, [r3, r2]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	227c      	movs	r2, #124	; 0x7c
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7fd fafa 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	2124      	movs	r1, #36	; 0x24
 80037da:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2101      	movs	r1, #1
 80037e8:	438a      	bics	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 fa4a 	bl	8003c88 <UART_SetConfig>
 80037f4:	0003      	movs	r3, r0
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e024      	b.n	8003848 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	0018      	movs	r0, r3
 800380a:	f001 fb31 	bl	8004e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	490d      	ldr	r1, [pc, #52]	; (8003850 <HAL_UART_Init+0xa8>)
 800381a:	400a      	ands	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	212a      	movs	r1, #42	; 0x2a
 800382a:	438a      	bics	r2, r1
 800382c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f001 fbc9 	bl	8004fd8 <UART_CheckIdleState>
 8003846:	0003      	movs	r3, r0
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}
 8003850:	ffffb7ff 	.word	0xffffb7ff

08003854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08a      	sub	sp, #40	; 0x28
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	1dbb      	adds	r3, r7, #6
 8003862:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	589b      	ldr	r3, [r3, r2]
 800386a:	2b20      	cmp	r3, #32
 800386c:	d000      	beq.n	8003870 <HAL_UART_Transmit+0x1c>
 800386e:	e097      	b.n	80039a0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_UART_Transmit+0x2a>
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e08f      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	015b      	lsls	r3, r3, #5
 800388a:	429a      	cmp	r2, r3
 800388c:	d109      	bne.n	80038a2 <HAL_UART_Transmit+0x4e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2201      	movs	r2, #1
 800389a:	4013      	ands	r3, r2
 800389c:	d001      	beq.n	80038a2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	227c      	movs	r2, #124	; 0x7c
 80038a6:	5c9b      	ldrb	r3, [r3, r2]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_UART_Transmit+0x5c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e078      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	227c      	movs	r2, #124	; 0x7c
 80038b4:	2101      	movs	r1, #1
 80038b6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2288      	movs	r2, #136	; 0x88
 80038bc:	2100      	movs	r1, #0
 80038be:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	2121      	movs	r1, #33	; 0x21
 80038c6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038c8:	f7fd fc8c 	bl	80011e4 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1dba      	adds	r2, r7, #6
 80038d4:	2154      	movs	r1, #84	; 0x54
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1dba      	adds	r2, r7, #6
 80038de:	2156      	movs	r1, #86	; 0x56
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	015b      	lsls	r3, r3, #5
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d108      	bne.n	8003902 <HAL_UART_Transmit+0xae>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	e003      	b.n	800390a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800390a:	e02c      	b.n	8003966 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	0013      	movs	r3, r2
 8003916:	2200      	movs	r2, #0
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	f001 fba7 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e03d      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	001a      	movs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	05d2      	lsls	r2, r2, #23
 8003938:	0dd2      	lsrs	r2, r2, #23
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	3302      	adds	r3, #2
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e007      	b.n	8003954 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2256      	movs	r2, #86	; 0x56
 8003958:	5a9b      	ldrh	r3, [r3, r2]
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b299      	uxth	r1, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2256      	movs	r2, #86	; 0x56
 8003964:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2256      	movs	r2, #86	; 0x56
 800396a:	5a9b      	ldrh	r3, [r3, r2]
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1cc      	bne.n	800390c <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	0013      	movs	r3, r2
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	f001 fb74 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e00a      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	2120      	movs	r1, #32
 8003992:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	227c      	movs	r2, #124	; 0x7c
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b008      	add	sp, #32
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	220f      	movs	r2, #15
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d117      	bne.n	8003a0a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2220      	movs	r2, #32
 80039de:	4013      	ands	r3, r2
 80039e0:	d013      	beq.n	8003a0a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2220      	movs	r2, #32
 80039e6:	4013      	ands	r3, r2
 80039e8:	d104      	bne.n	80039f4 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	2380      	movs	r3, #128	; 0x80
 80039ee:	055b      	lsls	r3, r3, #21
 80039f0:	4013      	ands	r3, r2
 80039f2:	d00a      	beq.n	8003a0a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d100      	bne.n	80039fe <HAL_UART_IRQHandler+0x52>
 80039fc:	e127      	b.n	8003c4e <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	0010      	movs	r0, r2
 8003a06:	4798      	blx	r3
      }
      return;
 8003a08:	e121      	b.n	8003c4e <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d100      	bne.n	8003a12 <HAL_UART_IRQHandler+0x66>
 8003a10:	e0c8      	b.n	8003ba4 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4a92      	ldr	r2, [pc, #584]	; (8003c60 <HAL_UART_IRQHandler+0x2b4>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	d105      	bne.n	8003a26 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	2390      	movs	r3, #144	; 0x90
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4013      	ands	r3, r2
 8003a22:	d100      	bne.n	8003a26 <HAL_UART_IRQHandler+0x7a>
 8003a24:	e0be      	b.n	8003ba4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d010      	beq.n	8003a50 <HAL_UART_IRQHandler+0xa4>
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4013      	ands	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2288      	movs	r2, #136	; 0x88
 8003a44:	589b      	ldr	r3, [r3, r2]
 8003a46:	2201      	movs	r2, #1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2188      	movs	r1, #136	; 0x88
 8003a4e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	2202      	movs	r2, #2
 8003a54:	4013      	ands	r3, r2
 8003a56:	d00f      	beq.n	8003a78 <HAL_UART_IRQHandler+0xcc>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2202      	movs	r2, #2
 8003a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2288      	movs	r2, #136	; 0x88
 8003a6c:	589b      	ldr	r3, [r3, r2]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2188      	movs	r1, #136	; 0x88
 8003a76:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d00f      	beq.n	8003aa0 <HAL_UART_IRQHandler+0xf4>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2201      	movs	r2, #1
 8003a84:	4013      	ands	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2288      	movs	r2, #136	; 0x88
 8003a94:	589b      	ldr	r3, [r3, r2]
 8003a96:	2202      	movs	r2, #2
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2188      	movs	r1, #136	; 0x88
 8003a9e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	4013      	ands	r3, r2
 8003aae:	d103      	bne.n	8003ab8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	4a6b      	ldr	r2, [pc, #428]	; (8003c60 <HAL_UART_IRQHandler+0x2b4>)
 8003ab4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2208      	movs	r2, #8
 8003abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2288      	movs	r2, #136	; 0x88
 8003ac4:	589b      	ldr	r3, [r3, r2]
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2188      	movs	r1, #136	; 0x88
 8003ace:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2288      	movs	r2, #136	; 0x88
 8003ad4:	589b      	ldr	r3, [r3, r2]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d100      	bne.n	8003adc <HAL_UART_IRQHandler+0x130>
 8003ada:	e0ba      	b.n	8003c52 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d011      	beq.n	8003b08 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d104      	bne.n	8003af6 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	2380      	movs	r3, #128	; 0x80
 8003af0:	055b      	lsls	r3, r3, #21
 8003af2:	4013      	ands	r3, r2
 8003af4:	d008      	beq.n	8003b08 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	0010      	movs	r0, r2
 8003b06:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2288      	movs	r2, #136	; 0x88
 8003b0c:	589b      	ldr	r3, [r3, r2]
 8003b0e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2240      	movs	r2, #64	; 0x40
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d003      	beq.n	8003b26 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2208      	movs	r2, #8
 8003b22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b24:	d033      	beq.n	8003b8e <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f001 faeb 	bl	8005104 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2240      	movs	r2, #64	; 0x40
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d123      	bne.n	8003b84 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2140      	movs	r1, #64	; 0x40
 8003b48:	438a      	bics	r2, r1
 8003b4a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d012      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b58:	4a42      	ldr	r2, [pc, #264]	; (8003c64 <HAL_UART_IRQHandler+0x2b8>)
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7fd fc5f 	bl	8001424 <HAL_DMA_Abort_IT>
 8003b66:	1e03      	subs	r3, r0, #0
 8003b68:	d01a      	beq.n	8003ba0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	0018      	movs	r0, r3
 8003b76:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b78:	e012      	b.n	8003ba0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f87b 	bl	8003c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b82:	e00d      	b.n	8003ba0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	0018      	movs	r0, r3
 8003b88:	f000 f876 	bl	8003c78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e008      	b.n	8003ba0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f000 f871 	bl	8003c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2288      	movs	r2, #136	; 0x88
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b9e:	e058      	b.n	8003c52 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	46c0      	nop			; (mov r8, r8)
    return;
 8003ba2:	e056      	b.n	8003c52 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	035b      	lsls	r3, r3, #13
 8003baa:	4013      	ands	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_UART_IRQHandler+0x220>
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	03db      	lsls	r3, r3, #15
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0352      	lsls	r2, r2, #13
 8003bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f001 faf3 	bl	80051b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003bca:	e045      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d012      	beq.n	8003bfa <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d104      	bne.n	8003be6 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	4013      	ands	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d033      	beq.n	8003c56 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	4798      	blx	r3
    }
    return;
 8003bf8:	e02d      	b.n	8003c56 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2240      	movs	r2, #64	; 0x40
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d008      	beq.n	8003c14 <HAL_UART_IRQHandler+0x268>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2240      	movs	r2, #64	; 0x40
 8003c06:	4013      	ands	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f001 fab4 	bl	800517a <UART_EndTransmit_IT>
    return;
 8003c12:	e021      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	041b      	lsls	r3, r3, #16
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_UART_IRQHandler+0x286>
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	05db      	lsls	r3, r3, #23
 8003c24:	4013      	ands	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f001 fad0 	bl	80051d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c30:	e012      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	045b      	lsls	r3, r3, #17
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	da0a      	bge.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	0018      	movs	r0, r3
 8003c46:	f001 fabb 	bl	80051c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	e004      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
      return;
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	e002      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	e000      	b.n	8003c58 <HAL_UART_IRQHandler+0x2ac>
    return;
 8003c56:	46c0      	nop			; (mov r8, r8)
  }
}
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b008      	add	sp, #32
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	10000001 	.word	0x10000001
 8003c64:	0800514d 	.word	0x0800514d

08003c68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b002      	add	sp, #8
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c8a:	b0a1      	sub	sp, #132	; 0x84
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c94:	231b      	movs	r3, #27
 8003c96:	2258      	movs	r2, #88	; 0x58
 8003c98:	18ba      	adds	r2, r7, r2
 8003c9a:	18d2      	adds	r2, r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	431a      	orrs	r2, r3
 8003cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8003cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4bba      	ldr	r3, [pc, #744]	; (8003fb8 <UART_SetConfig+0x330>)
 8003cce:	401a      	ands	r2, r3
 8003cd0:	0011      	movs	r1, r2
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	4bb6      	ldr	r3, [pc, #728]	; (8003fbc <UART_SetConfig+0x334>)
 8003ce4:	401a      	ands	r2, r3
 8003ce6:	0010      	movs	r0, r2
 8003ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4baf      	ldr	r3, [pc, #700]	; (8003fc0 <UART_SetConfig+0x338>)
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d004      	beq.n	8003d10 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d08:	6a1a      	ldr	r2, [r3, #32]
 8003d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	4bab      	ldr	r3, [pc, #684]	; (8003fc4 <UART_SetConfig+0x33c>)
 8003d18:	401a      	ands	r2, r3
 8003d1a:	0011      	movs	r1, r2
 8003d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	439a      	bics	r2, r3
 8003d30:	0010      	movs	r0, r2
 8003d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4ba0      	ldr	r3, [pc, #640]	; (8003fc8 <UART_SetConfig+0x340>)
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d12f      	bne.n	8003daa <UART_SetConfig+0x122>
 8003d4a:	4ba0      	ldr	r3, [pc, #640]	; (8003fcc <UART_SetConfig+0x344>)
 8003d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d4e:	2303      	movs	r3, #3
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d013      	beq.n	8003d7e <UART_SetConfig+0xf6>
 8003d56:	d304      	bcc.n	8003d62 <UART_SetConfig+0xda>
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d009      	beq.n	8003d70 <UART_SetConfig+0xe8>
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d015      	beq.n	8003d8c <UART_SetConfig+0x104>
 8003d60:	e01b      	b.n	8003d9a <UART_SetConfig+0x112>
 8003d62:	2323      	movs	r3, #35	; 0x23
 8003d64:	2258      	movs	r2, #88	; 0x58
 8003d66:	18ba      	adds	r2, r7, r2
 8003d68:	18d2      	adds	r2, r2, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	7013      	strb	r3, [r2, #0]
 8003d6e:	e0b4      	b.n	8003eda <UART_SetConfig+0x252>
 8003d70:	2323      	movs	r3, #35	; 0x23
 8003d72:	2258      	movs	r2, #88	; 0x58
 8003d74:	18ba      	adds	r2, r7, r2
 8003d76:	18d2      	adds	r2, r2, r3
 8003d78:	2302      	movs	r3, #2
 8003d7a:	7013      	strb	r3, [r2, #0]
 8003d7c:	e0ad      	b.n	8003eda <UART_SetConfig+0x252>
 8003d7e:	2323      	movs	r3, #35	; 0x23
 8003d80:	2258      	movs	r2, #88	; 0x58
 8003d82:	18ba      	adds	r2, r7, r2
 8003d84:	18d2      	adds	r2, r2, r3
 8003d86:	2304      	movs	r3, #4
 8003d88:	7013      	strb	r3, [r2, #0]
 8003d8a:	e0a6      	b.n	8003eda <UART_SetConfig+0x252>
 8003d8c:	2323      	movs	r3, #35	; 0x23
 8003d8e:	2258      	movs	r2, #88	; 0x58
 8003d90:	18ba      	adds	r2, r7, r2
 8003d92:	18d2      	adds	r2, r2, r3
 8003d94:	2308      	movs	r3, #8
 8003d96:	7013      	strb	r3, [r2, #0]
 8003d98:	e09f      	b.n	8003eda <UART_SetConfig+0x252>
 8003d9a:	2323      	movs	r3, #35	; 0x23
 8003d9c:	2258      	movs	r2, #88	; 0x58
 8003d9e:	18ba      	adds	r2, r7, r2
 8003da0:	18d2      	adds	r2, r2, r3
 8003da2:	2310      	movs	r3, #16
 8003da4:	7013      	strb	r3, [r2, #0]
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	e097      	b.n	8003eda <UART_SetConfig+0x252>
 8003daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <UART_SetConfig+0x348>)
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d132      	bne.n	8003e1a <UART_SetConfig+0x192>
 8003db4:	4b85      	ldr	r3, [pc, #532]	; (8003fcc <UART_SetConfig+0x344>)
 8003db6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003db8:	230c      	movs	r3, #12
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d016      	beq.n	8003dee <UART_SetConfig+0x166>
 8003dc0:	d802      	bhi.n	8003dc8 <UART_SetConfig+0x140>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <UART_SetConfig+0x14a>
 8003dc6:	e020      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d009      	beq.n	8003de0 <UART_SetConfig+0x158>
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d015      	beq.n	8003dfc <UART_SetConfig+0x174>
 8003dd0:	e01b      	b.n	8003e0a <UART_SetConfig+0x182>
 8003dd2:	2323      	movs	r3, #35	; 0x23
 8003dd4:	2258      	movs	r2, #88	; 0x58
 8003dd6:	18ba      	adds	r2, r7, r2
 8003dd8:	18d2      	adds	r2, r2, r3
 8003dda:	2300      	movs	r3, #0
 8003ddc:	7013      	strb	r3, [r2, #0]
 8003dde:	e07c      	b.n	8003eda <UART_SetConfig+0x252>
 8003de0:	2323      	movs	r3, #35	; 0x23
 8003de2:	2258      	movs	r2, #88	; 0x58
 8003de4:	18ba      	adds	r2, r7, r2
 8003de6:	18d2      	adds	r2, r2, r3
 8003de8:	2302      	movs	r3, #2
 8003dea:	7013      	strb	r3, [r2, #0]
 8003dec:	e075      	b.n	8003eda <UART_SetConfig+0x252>
 8003dee:	2323      	movs	r3, #35	; 0x23
 8003df0:	2258      	movs	r2, #88	; 0x58
 8003df2:	18ba      	adds	r2, r7, r2
 8003df4:	18d2      	adds	r2, r2, r3
 8003df6:	2304      	movs	r3, #4
 8003df8:	7013      	strb	r3, [r2, #0]
 8003dfa:	e06e      	b.n	8003eda <UART_SetConfig+0x252>
 8003dfc:	2323      	movs	r3, #35	; 0x23
 8003dfe:	2258      	movs	r2, #88	; 0x58
 8003e00:	18ba      	adds	r2, r7, r2
 8003e02:	18d2      	adds	r2, r2, r3
 8003e04:	2308      	movs	r3, #8
 8003e06:	7013      	strb	r3, [r2, #0]
 8003e08:	e067      	b.n	8003eda <UART_SetConfig+0x252>
 8003e0a:	2323      	movs	r3, #35	; 0x23
 8003e0c:	2258      	movs	r2, #88	; 0x58
 8003e0e:	18ba      	adds	r2, r7, r2
 8003e10:	18d2      	adds	r2, r2, r3
 8003e12:	2310      	movs	r3, #16
 8003e14:	7013      	strb	r3, [r2, #0]
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	e05f      	b.n	8003eda <UART_SetConfig+0x252>
 8003e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	; (8003fd4 <UART_SetConfig+0x34c>)
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d106      	bne.n	8003e32 <UART_SetConfig+0x1aa>
 8003e24:	2323      	movs	r3, #35	; 0x23
 8003e26:	2258      	movs	r2, #88	; 0x58
 8003e28:	18ba      	adds	r2, r7, r2
 8003e2a:	18d2      	adds	r2, r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	7013      	strb	r3, [r2, #0]
 8003e30:	e053      	b.n	8003eda <UART_SetConfig+0x252>
 8003e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <UART_SetConfig+0x350>)
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <UART_SetConfig+0x1c2>
 8003e3c:	2323      	movs	r3, #35	; 0x23
 8003e3e:	2258      	movs	r2, #88	; 0x58
 8003e40:	18ba      	adds	r2, r7, r2
 8003e42:	18d2      	adds	r2, r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	7013      	strb	r3, [r2, #0]
 8003e48:	e047      	b.n	8003eda <UART_SetConfig+0x252>
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <UART_SetConfig+0x338>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d13c      	bne.n	8003ece <UART_SetConfig+0x246>
 8003e54:	4b5d      	ldr	r3, [pc, #372]	; (8003fcc <UART_SetConfig+0x344>)
 8003e56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e58:	23c0      	movs	r3, #192	; 0xc0
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d01d      	beq.n	8003ea2 <UART_SetConfig+0x21a>
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d802      	bhi.n	8003e74 <UART_SetConfig+0x1ec>
 8003e6e:	2a00      	cmp	r2, #0
 8003e70:	d009      	beq.n	8003e86 <UART_SetConfig+0x1fe>
 8003e72:	e024      	b.n	8003ebe <UART_SetConfig+0x236>
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d00b      	beq.n	8003e94 <UART_SetConfig+0x20c>
 8003e7c:	23c0      	movs	r3, #192	; 0xc0
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d015      	beq.n	8003eb0 <UART_SetConfig+0x228>
 8003e84:	e01b      	b.n	8003ebe <UART_SetConfig+0x236>
 8003e86:	2323      	movs	r3, #35	; 0x23
 8003e88:	2258      	movs	r2, #88	; 0x58
 8003e8a:	18ba      	adds	r2, r7, r2
 8003e8c:	18d2      	adds	r2, r2, r3
 8003e8e:	2300      	movs	r3, #0
 8003e90:	7013      	strb	r3, [r2, #0]
 8003e92:	e022      	b.n	8003eda <UART_SetConfig+0x252>
 8003e94:	2323      	movs	r3, #35	; 0x23
 8003e96:	2258      	movs	r2, #88	; 0x58
 8003e98:	18ba      	adds	r2, r7, r2
 8003e9a:	18d2      	adds	r2, r2, r3
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	7013      	strb	r3, [r2, #0]
 8003ea0:	e01b      	b.n	8003eda <UART_SetConfig+0x252>
 8003ea2:	2323      	movs	r3, #35	; 0x23
 8003ea4:	2258      	movs	r2, #88	; 0x58
 8003ea6:	18ba      	adds	r2, r7, r2
 8003ea8:	18d2      	adds	r2, r2, r3
 8003eaa:	2304      	movs	r3, #4
 8003eac:	7013      	strb	r3, [r2, #0]
 8003eae:	e014      	b.n	8003eda <UART_SetConfig+0x252>
 8003eb0:	2323      	movs	r3, #35	; 0x23
 8003eb2:	2258      	movs	r2, #88	; 0x58
 8003eb4:	18ba      	adds	r2, r7, r2
 8003eb6:	18d2      	adds	r2, r2, r3
 8003eb8:	2308      	movs	r3, #8
 8003eba:	7013      	strb	r3, [r2, #0]
 8003ebc:	e00d      	b.n	8003eda <UART_SetConfig+0x252>
 8003ebe:	2323      	movs	r3, #35	; 0x23
 8003ec0:	2258      	movs	r2, #88	; 0x58
 8003ec2:	18ba      	adds	r2, r7, r2
 8003ec4:	18d2      	adds	r2, r2, r3
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	7013      	strb	r3, [r2, #0]
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	e005      	b.n	8003eda <UART_SetConfig+0x252>
 8003ece:	2323      	movs	r3, #35	; 0x23
 8003ed0:	2258      	movs	r2, #88	; 0x58
 8003ed2:	18ba      	adds	r2, r7, r2
 8003ed4:	18d2      	adds	r2, r2, r3
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <UART_SetConfig+0x338>)
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <UART_SetConfig+0x260>
 8003ee4:	f000 fbd0 	bl	8004688 <UART_SetConfig+0xa00>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee8:	2323      	movs	r3, #35	; 0x23
 8003eea:	2258      	movs	r2, #88	; 0x58
 8003eec:	4694      	mov	ip, r2
 8003eee:	44bc      	add	ip, r7
 8003ef0:	4463      	add	r3, ip
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d100      	bne.n	8003efa <UART_SetConfig+0x272>
 8003ef8:	e070      	b.n	8003fdc <UART_SetConfig+0x354>
 8003efa:	dc02      	bgt.n	8003f02 <UART_SetConfig+0x27a>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <UART_SetConfig+0x288>
 8003f00:	e15f      	b.n	80041c2 <UART_SetConfig+0x53a>
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d100      	bne.n	8003f08 <UART_SetConfig+0x280>
 8003f06:	e0b4      	b.n	8004072 <UART_SetConfig+0x3ea>
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d100      	bne.n	8003f0e <UART_SetConfig+0x286>
 8003f0c:	e105      	b.n	800411a <UART_SetConfig+0x492>
 8003f0e:	e158      	b.n	80041c2 <UART_SetConfig+0x53a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003f10:	f7ff fa7c 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8003f14:	0002      	movs	r2, r0
 8003f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d044      	beq.n	8003fa8 <UART_SetConfig+0x320>
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d03e      	beq.n	8003fa4 <UART_SetConfig+0x31c>
 8003f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d038      	beq.n	8003fa0 <UART_SetConfig+0x318>
 8003f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d032      	beq.n	8003f9c <UART_SetConfig+0x314>
 8003f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d02c      	beq.n	8003f98 <UART_SetConfig+0x310>
 8003f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d026      	beq.n	8003f94 <UART_SetConfig+0x30c>
 8003f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	d020      	beq.n	8003f90 <UART_SetConfig+0x308>
 8003f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b07      	cmp	r3, #7
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x304>
 8003f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d014      	beq.n	8003f88 <UART_SetConfig+0x300>
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d00e      	beq.n	8003f84 <UART_SetConfig+0x2fc>
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	2b0a      	cmp	r3, #10
 8003f6c:	d008      	beq.n	8003f80 <UART_SetConfig+0x2f8>
 8003f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b0b      	cmp	r3, #11
 8003f74:	d102      	bne.n	8003f7c <UART_SetConfig+0x2f4>
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	e016      	b.n	8003faa <UART_SetConfig+0x322>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e014      	b.n	8003faa <UART_SetConfig+0x322>
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	e012      	b.n	8003faa <UART_SetConfig+0x322>
 8003f84:	2340      	movs	r3, #64	; 0x40
 8003f86:	e010      	b.n	8003faa <UART_SetConfig+0x322>
 8003f88:	2320      	movs	r3, #32
 8003f8a:	e00e      	b.n	8003faa <UART_SetConfig+0x322>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	e00c      	b.n	8003faa <UART_SetConfig+0x322>
 8003f90:	230c      	movs	r3, #12
 8003f92:	e00a      	b.n	8003faa <UART_SetConfig+0x322>
 8003f94:	230a      	movs	r3, #10
 8003f96:	e008      	b.n	8003faa <UART_SetConfig+0x322>
 8003f98:	2308      	movs	r3, #8
 8003f9a:	e006      	b.n	8003faa <UART_SetConfig+0x322>
 8003f9c:	2306      	movs	r3, #6
 8003f9e:	e004      	b.n	8003faa <UART_SetConfig+0x322>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	e002      	b.n	8003faa <UART_SetConfig+0x322>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e000      	b.n	8003faa <UART_SetConfig+0x322>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	0019      	movs	r1, r3
 8003fac:	0010      	movs	r0, r2
 8003fae:	f7fc f8a9 	bl	8000104 <__udivsi3>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8003fb6:	e10b      	b.n	80041d0 <UART_SetConfig+0x548>
 8003fb8:	cfff69f3 	.word	0xcfff69f3
 8003fbc:	ffffcfff 	.word	0xffffcfff
 8003fc0:	40008000 	.word	0x40008000
 8003fc4:	11fff4ff 	.word	0x11fff4ff
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40004800 	.word	0x40004800
 8003fd8:	40004c00 	.word	0x40004c00
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d043      	beq.n	800406c <UART_SetConfig+0x3e4>
 8003fe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d03d      	beq.n	8004068 <UART_SetConfig+0x3e0>
 8003fec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d037      	beq.n	8004064 <UART_SetConfig+0x3dc>
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d031      	beq.n	8004060 <UART_SetConfig+0x3d8>
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b04      	cmp	r3, #4
 8004002:	d02b      	beq.n	800405c <UART_SetConfig+0x3d4>
 8004004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b05      	cmp	r3, #5
 800400a:	d025      	beq.n	8004058 <UART_SetConfig+0x3d0>
 800400c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b06      	cmp	r3, #6
 8004012:	d01f      	beq.n	8004054 <UART_SetConfig+0x3cc>
 8004014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b07      	cmp	r3, #7
 800401a:	d019      	beq.n	8004050 <UART_SetConfig+0x3c8>
 800401c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b08      	cmp	r3, #8
 8004022:	d013      	beq.n	800404c <UART_SetConfig+0x3c4>
 8004024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b09      	cmp	r3, #9
 800402a:	d00d      	beq.n	8004048 <UART_SetConfig+0x3c0>
 800402c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b0a      	cmp	r3, #10
 8004032:	d007      	beq.n	8004044 <UART_SetConfig+0x3bc>
 8004034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b0b      	cmp	r3, #11
 800403a:	d101      	bne.n	8004040 <UART_SetConfig+0x3b8>
 800403c:	4bab      	ldr	r3, [pc, #684]	; (80042ec <UART_SetConfig+0x664>)
 800403e:	e016      	b.n	800406e <UART_SetConfig+0x3e6>
 8004040:	4bab      	ldr	r3, [pc, #684]	; (80042f0 <UART_SetConfig+0x668>)
 8004042:	e014      	b.n	800406e <UART_SetConfig+0x3e6>
 8004044:	4bab      	ldr	r3, [pc, #684]	; (80042f4 <UART_SetConfig+0x66c>)
 8004046:	e012      	b.n	800406e <UART_SetConfig+0x3e6>
 8004048:	4bab      	ldr	r3, [pc, #684]	; (80042f8 <UART_SetConfig+0x670>)
 800404a:	e010      	b.n	800406e <UART_SetConfig+0x3e6>
 800404c:	4bab      	ldr	r3, [pc, #684]	; (80042fc <UART_SetConfig+0x674>)
 800404e:	e00e      	b.n	800406e <UART_SetConfig+0x3e6>
 8004050:	4bab      	ldr	r3, [pc, #684]	; (8004300 <UART_SetConfig+0x678>)
 8004052:	e00c      	b.n	800406e <UART_SetConfig+0x3e6>
 8004054:	4bab      	ldr	r3, [pc, #684]	; (8004304 <UART_SetConfig+0x67c>)
 8004056:	e00a      	b.n	800406e <UART_SetConfig+0x3e6>
 8004058:	4bab      	ldr	r3, [pc, #684]	; (8004308 <UART_SetConfig+0x680>)
 800405a:	e008      	b.n	800406e <UART_SetConfig+0x3e6>
 800405c:	4bab      	ldr	r3, [pc, #684]	; (800430c <UART_SetConfig+0x684>)
 800405e:	e006      	b.n	800406e <UART_SetConfig+0x3e6>
 8004060:	4bab      	ldr	r3, [pc, #684]	; (8004310 <UART_SetConfig+0x688>)
 8004062:	e004      	b.n	800406e <UART_SetConfig+0x3e6>
 8004064:	4bab      	ldr	r3, [pc, #684]	; (8004314 <UART_SetConfig+0x68c>)
 8004066:	e002      	b.n	800406e <UART_SetConfig+0x3e6>
 8004068:	4bab      	ldr	r3, [pc, #684]	; (8004318 <UART_SetConfig+0x690>)
 800406a:	e000      	b.n	800406e <UART_SetConfig+0x3e6>
 800406c:	4ba0      	ldr	r3, [pc, #640]	; (80042f0 <UART_SetConfig+0x668>)
 800406e:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004070:	e0ae      	b.n	80041d0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004072:	f7ff f93f 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004076:	0002      	movs	r2, r0
 8004078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	d044      	beq.n	800410a <UART_SetConfig+0x482>
 8004080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b01      	cmp	r3, #1
 8004086:	d03e      	beq.n	8004106 <UART_SetConfig+0x47e>
 8004088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b02      	cmp	r3, #2
 800408e:	d038      	beq.n	8004102 <UART_SetConfig+0x47a>
 8004090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b03      	cmp	r3, #3
 8004096:	d032      	beq.n	80040fe <UART_SetConfig+0x476>
 8004098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b04      	cmp	r3, #4
 800409e:	d02c      	beq.n	80040fa <UART_SetConfig+0x472>
 80040a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b05      	cmp	r3, #5
 80040a6:	d026      	beq.n	80040f6 <UART_SetConfig+0x46e>
 80040a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d020      	beq.n	80040f2 <UART_SetConfig+0x46a>
 80040b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	d01a      	beq.n	80040ee <UART_SetConfig+0x466>
 80040b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d014      	beq.n	80040ea <UART_SetConfig+0x462>
 80040c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b09      	cmp	r3, #9
 80040c6:	d00e      	beq.n	80040e6 <UART_SetConfig+0x45e>
 80040c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	2b0a      	cmp	r3, #10
 80040ce:	d008      	beq.n	80040e2 <UART_SetConfig+0x45a>
 80040d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2b0b      	cmp	r3, #11
 80040d6:	d102      	bne.n	80040de <UART_SetConfig+0x456>
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	e016      	b.n	800410c <UART_SetConfig+0x484>
 80040de:	2301      	movs	r3, #1
 80040e0:	e014      	b.n	800410c <UART_SetConfig+0x484>
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	e012      	b.n	800410c <UART_SetConfig+0x484>
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	e010      	b.n	800410c <UART_SetConfig+0x484>
 80040ea:	2320      	movs	r3, #32
 80040ec:	e00e      	b.n	800410c <UART_SetConfig+0x484>
 80040ee:	2310      	movs	r3, #16
 80040f0:	e00c      	b.n	800410c <UART_SetConfig+0x484>
 80040f2:	230c      	movs	r3, #12
 80040f4:	e00a      	b.n	800410c <UART_SetConfig+0x484>
 80040f6:	230a      	movs	r3, #10
 80040f8:	e008      	b.n	800410c <UART_SetConfig+0x484>
 80040fa:	2308      	movs	r3, #8
 80040fc:	e006      	b.n	800410c <UART_SetConfig+0x484>
 80040fe:	2306      	movs	r3, #6
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x484>
 8004102:	2304      	movs	r3, #4
 8004104:	e002      	b.n	800410c <UART_SetConfig+0x484>
 8004106:	2302      	movs	r3, #2
 8004108:	e000      	b.n	800410c <UART_SetConfig+0x484>
 800410a:	2301      	movs	r3, #1
 800410c:	0019      	movs	r1, r3
 800410e:	0010      	movs	r0, r2
 8004110:	f7fb fff8 	bl	8000104 <__udivsi3>
 8004114:	0003      	movs	r3, r0
 8004116:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004118:	e05a      	b.n	80041d0 <UART_SetConfig+0x548>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04b      	beq.n	80041ba <UART_SetConfig+0x532>
 8004122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	2b01      	cmp	r3, #1
 8004128:	d044      	beq.n	80041b4 <UART_SetConfig+0x52c>
 800412a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	2b02      	cmp	r3, #2
 8004130:	d03d      	beq.n	80041ae <UART_SetConfig+0x526>
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	2b03      	cmp	r3, #3
 8004138:	d037      	beq.n	80041aa <UART_SetConfig+0x522>
 800413a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2b04      	cmp	r3, #4
 8004140:	d030      	beq.n	80041a4 <UART_SetConfig+0x51c>
 8004142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	2b05      	cmp	r3, #5
 8004148:	d02a      	beq.n	80041a0 <UART_SetConfig+0x518>
 800414a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b06      	cmp	r3, #6
 8004150:	d024      	beq.n	800419c <UART_SetConfig+0x514>
 8004152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	2b07      	cmp	r3, #7
 8004158:	d01d      	beq.n	8004196 <UART_SetConfig+0x50e>
 800415a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	2b08      	cmp	r3, #8
 8004160:	d016      	beq.n	8004190 <UART_SetConfig+0x508>
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	2b09      	cmp	r3, #9
 8004168:	d00f      	beq.n	800418a <UART_SetConfig+0x502>
 800416a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	2b0a      	cmp	r3, #10
 8004170:	d008      	beq.n	8004184 <UART_SetConfig+0x4fc>
 8004172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b0b      	cmp	r3, #11
 8004178:	d101      	bne.n	800417e <UART_SetConfig+0x4f6>
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	e01f      	b.n	80041be <UART_SetConfig+0x536>
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	e01c      	b.n	80041be <UART_SetConfig+0x536>
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	e019      	b.n	80041be <UART_SetConfig+0x536>
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	e016      	b.n	80041be <UART_SetConfig+0x536>
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	e013      	b.n	80041be <UART_SetConfig+0x536>
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	e010      	b.n	80041be <UART_SetConfig+0x536>
 800419c:	4b5f      	ldr	r3, [pc, #380]	; (800431c <UART_SetConfig+0x694>)
 800419e:	e00e      	b.n	80041be <UART_SetConfig+0x536>
 80041a0:	4b5f      	ldr	r3, [pc, #380]	; (8004320 <UART_SetConfig+0x698>)
 80041a2:	e00c      	b.n	80041be <UART_SetConfig+0x536>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	015b      	lsls	r3, r3, #5
 80041a8:	e009      	b.n	80041be <UART_SetConfig+0x536>
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <UART_SetConfig+0x69c>)
 80041ac:	e007      	b.n	80041be <UART_SetConfig+0x536>
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	e004      	b.n	80041be <UART_SetConfig+0x536>
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	e001      	b.n	80041be <UART_SetConfig+0x536>
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	021b      	lsls	r3, r3, #8
 80041be:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80041c0:	e006      	b.n	80041d0 <UART_SetConfig+0x548>
      default:
        ret = HAL_ERROR;
 80041c2:	231b      	movs	r3, #27
 80041c4:	2258      	movs	r2, #88	; 0x58
 80041c6:	18ba      	adds	r2, r7, r2
 80041c8:	18d2      	adds	r2, r2, r3
 80041ca:	2301      	movs	r3, #1
 80041cc:	7013      	strb	r3, [r2, #0]
        break;
 80041ce:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80041d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <UART_SetConfig+0x552>
 80041d6:	f000 fe12 	bl	8004dfe <UART_SetConfig+0x1176>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	0013      	movs	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	189a      	adds	r2, r3, r2
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d305      	bcc.n	80041f6 <UART_SetConfig+0x56e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d908      	bls.n	8004208 <UART_SetConfig+0x580>
      {
        ret = HAL_ERROR;
 80041f6:	231b      	movs	r3, #27
 80041f8:	2258      	movs	r2, #88	; 0x58
 80041fa:	4694      	mov	ip, r2
 80041fc:	44bc      	add	ip, r7
 80041fe:	4463      	add	r3, ip
 8004200:	2201      	movs	r2, #1
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	f000 fdfb 	bl	8004dfe <UART_SetConfig+0x1176>
      }
      else
      {
        switch (clocksource)
 8004208:	2323      	movs	r3, #35	; 0x23
 800420a:	2258      	movs	r2, #88	; 0x58
 800420c:	4694      	mov	ip, r2
 800420e:	44bc      	add	ip, r7
 8004210:	4463      	add	r3, ip
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d100      	bne.n	800421a <UART_SetConfig+0x592>
 8004218:	e0ab      	b.n	8004372 <UART_SetConfig+0x6ea>
 800421a:	dc02      	bgt.n	8004222 <UART_SetConfig+0x59a>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <UART_SetConfig+0x5a8>
 8004220:	e213      	b.n	800464a <UART_SetConfig+0x9c2>
 8004222:	2b04      	cmp	r3, #4
 8004224:	d100      	bne.n	8004228 <UART_SetConfig+0x5a0>
 8004226:	e111      	b.n	800444c <UART_SetConfig+0x7c4>
 8004228:	2b08      	cmp	r3, #8
 800422a:	d100      	bne.n	800422e <UART_SetConfig+0x5a6>
 800422c:	e196      	b.n	800455c <UART_SetConfig+0x8d4>
 800422e:	e20c      	b.n	800464a <UART_SetConfig+0x9c2>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004230:	f7ff f8ec 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004234:	0003      	movs	r3, r0
 8004236:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423a:	64bb      	str	r3, [r7, #72]	; 0x48
 800423c:	2300      	movs	r3, #0
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d100      	bne.n	800424a <UART_SetConfig+0x5c2>
 8004248:	e06e      	b.n	8004328 <UART_SetConfig+0x6a0>
 800424a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b01      	cmp	r3, #1
 8004250:	d049      	beq.n	80042e6 <UART_SetConfig+0x65e>
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b02      	cmp	r3, #2
 8004258:	d042      	beq.n	80042e0 <UART_SetConfig+0x658>
 800425a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b03      	cmp	r3, #3
 8004260:	d03b      	beq.n	80042da <UART_SetConfig+0x652>
 8004262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b04      	cmp	r3, #4
 8004268:	d034      	beq.n	80042d4 <UART_SetConfig+0x64c>
 800426a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b05      	cmp	r3, #5
 8004270:	d02d      	beq.n	80042ce <UART_SetConfig+0x646>
 8004272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	2b06      	cmp	r3, #6
 8004278:	d026      	beq.n	80042c8 <UART_SetConfig+0x640>
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b07      	cmp	r3, #7
 8004280:	d01f      	beq.n	80042c2 <UART_SetConfig+0x63a>
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	2b08      	cmp	r3, #8
 8004288:	d018      	beq.n	80042bc <UART_SetConfig+0x634>
 800428a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b09      	cmp	r3, #9
 8004290:	d011      	beq.n	80042b6 <UART_SetConfig+0x62e>
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	2b0a      	cmp	r3, #10
 8004298:	d00a      	beq.n	80042b0 <UART_SetConfig+0x628>
 800429a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800429c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429e:	2b0b      	cmp	r3, #11
 80042a0:	d103      	bne.n	80042aa <UART_SetConfig+0x622>
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2400      	movs	r4, #0
 80042a8:	e040      	b.n	800432c <UART_SetConfig+0x6a4>
 80042aa:	2301      	movs	r3, #1
 80042ac:	2400      	movs	r4, #0
 80042ae:	e03d      	b.n	800432c <UART_SetConfig+0x6a4>
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	2400      	movs	r4, #0
 80042b4:	e03a      	b.n	800432c <UART_SetConfig+0x6a4>
 80042b6:	2340      	movs	r3, #64	; 0x40
 80042b8:	2400      	movs	r4, #0
 80042ba:	e037      	b.n	800432c <UART_SetConfig+0x6a4>
 80042bc:	2320      	movs	r3, #32
 80042be:	2400      	movs	r4, #0
 80042c0:	e034      	b.n	800432c <UART_SetConfig+0x6a4>
 80042c2:	2310      	movs	r3, #16
 80042c4:	2400      	movs	r4, #0
 80042c6:	e031      	b.n	800432c <UART_SetConfig+0x6a4>
 80042c8:	230c      	movs	r3, #12
 80042ca:	2400      	movs	r4, #0
 80042cc:	e02e      	b.n	800432c <UART_SetConfig+0x6a4>
 80042ce:	230a      	movs	r3, #10
 80042d0:	2400      	movs	r4, #0
 80042d2:	e02b      	b.n	800432c <UART_SetConfig+0x6a4>
 80042d4:	2308      	movs	r3, #8
 80042d6:	2400      	movs	r4, #0
 80042d8:	e028      	b.n	800432c <UART_SetConfig+0x6a4>
 80042da:	2306      	movs	r3, #6
 80042dc:	2400      	movs	r4, #0
 80042de:	e025      	b.n	800432c <UART_SetConfig+0x6a4>
 80042e0:	2304      	movs	r3, #4
 80042e2:	2400      	movs	r4, #0
 80042e4:	e022      	b.n	800432c <UART_SetConfig+0x6a4>
 80042e6:	2302      	movs	r3, #2
 80042e8:	2400      	movs	r4, #0
 80042ea:	e01f      	b.n	800432c <UART_SetConfig+0x6a4>
 80042ec:	0000f424 	.word	0x0000f424
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	0001e848 	.word	0x0001e848
 80042f8:	0003d090 	.word	0x0003d090
 80042fc:	0007a120 	.word	0x0007a120
 8004300:	000f4240 	.word	0x000f4240
 8004304:	00145855 	.word	0x00145855
 8004308:	00186a00 	.word	0x00186a00
 800430c:	001e8480 	.word	0x001e8480
 8004310:	0028b0aa 	.word	0x0028b0aa
 8004314:	003d0900 	.word	0x003d0900
 8004318:	007a1200 	.word	0x007a1200
 800431c:	00000aaa 	.word	0x00000aaa
 8004320:	00000ccc 	.word	0x00000ccc
 8004324:	00001555 	.word	0x00001555
 8004328:	2301      	movs	r3, #1
 800432a:	2400      	movs	r4, #0
 800432c:	001a      	movs	r2, r3
 800432e:	0023      	movs	r3, r4
 8004330:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004332:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004334:	f7fc f85c 	bl	80003f0 <__aeabi_uldivmod>
 8004338:	0003      	movs	r3, r0
 800433a:	000c      	movs	r4, r1
 800433c:	0e1a      	lsrs	r2, r3, #24
 800433e:	0226      	lsls	r6, r4, #8
 8004340:	4316      	orrs	r6, r2
 8004342:	021d      	lsls	r5, r3, #8
 8004344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	643b      	str	r3, [r7, #64]	; 0x40
 800434c:	2300      	movs	r3, #0
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
 8004350:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004354:	1940      	adds	r0, r0, r5
 8004356:	4171      	adcs	r1, r6
 8004358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
 800435e:	2300      	movs	r3, #0
 8004360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004366:	f7fc f843 	bl	80003f0 <__aeabi_uldivmod>
 800436a:	0003      	movs	r3, r0
 800436c:	000c      	movs	r4, r1
 800436e:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004370:	e173      	b.n	800465a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04f      	beq.n	800441a <UART_SetConfig+0x792>
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b01      	cmp	r3, #1
 8004380:	d048      	beq.n	8004414 <UART_SetConfig+0x78c>
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b02      	cmp	r3, #2
 8004388:	d041      	beq.n	800440e <UART_SetConfig+0x786>
 800438a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	2b03      	cmp	r3, #3
 8004390:	d03a      	beq.n	8004408 <UART_SetConfig+0x780>
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b04      	cmp	r3, #4
 8004398:	d033      	beq.n	8004402 <UART_SetConfig+0x77a>
 800439a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d02c      	beq.n	80043fc <UART_SetConfig+0x774>
 80043a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d025      	beq.n	80043f6 <UART_SetConfig+0x76e>
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d01e      	beq.n	80043f0 <UART_SetConfig+0x768>
 80043b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	2b08      	cmp	r3, #8
 80043b8:	d017      	beq.n	80043ea <UART_SetConfig+0x762>
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b09      	cmp	r3, #9
 80043c0:	d010      	beq.n	80043e4 <UART_SetConfig+0x75c>
 80043c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2b0a      	cmp	r3, #10
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x756>
 80043ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	2b0b      	cmp	r3, #11
 80043d0:	d102      	bne.n	80043d8 <UART_SetConfig+0x750>
 80043d2:	4bbb      	ldr	r3, [pc, #748]	; (80046c0 <UART_SetConfig+0xa38>)
 80043d4:	2400      	movs	r4, #0
 80043d6:	e022      	b.n	800441e <UART_SetConfig+0x796>
 80043d8:	4bba      	ldr	r3, [pc, #744]	; (80046c4 <UART_SetConfig+0xa3c>)
 80043da:	2400      	movs	r4, #0
 80043dc:	e01f      	b.n	800441e <UART_SetConfig+0x796>
 80043de:	4bba      	ldr	r3, [pc, #744]	; (80046c8 <UART_SetConfig+0xa40>)
 80043e0:	2400      	movs	r4, #0
 80043e2:	e01c      	b.n	800441e <UART_SetConfig+0x796>
 80043e4:	4bb9      	ldr	r3, [pc, #740]	; (80046cc <UART_SetConfig+0xa44>)
 80043e6:	2400      	movs	r4, #0
 80043e8:	e019      	b.n	800441e <UART_SetConfig+0x796>
 80043ea:	4bb9      	ldr	r3, [pc, #740]	; (80046d0 <UART_SetConfig+0xa48>)
 80043ec:	2400      	movs	r4, #0
 80043ee:	e016      	b.n	800441e <UART_SetConfig+0x796>
 80043f0:	4bb8      	ldr	r3, [pc, #736]	; (80046d4 <UART_SetConfig+0xa4c>)
 80043f2:	2400      	movs	r4, #0
 80043f4:	e013      	b.n	800441e <UART_SetConfig+0x796>
 80043f6:	4bb8      	ldr	r3, [pc, #736]	; (80046d8 <UART_SetConfig+0xa50>)
 80043f8:	2400      	movs	r4, #0
 80043fa:	e010      	b.n	800441e <UART_SetConfig+0x796>
 80043fc:	4bb7      	ldr	r3, [pc, #732]	; (80046dc <UART_SetConfig+0xa54>)
 80043fe:	2400      	movs	r4, #0
 8004400:	e00d      	b.n	800441e <UART_SetConfig+0x796>
 8004402:	4bb7      	ldr	r3, [pc, #732]	; (80046e0 <UART_SetConfig+0xa58>)
 8004404:	2400      	movs	r4, #0
 8004406:	e00a      	b.n	800441e <UART_SetConfig+0x796>
 8004408:	4bb6      	ldr	r3, [pc, #728]	; (80046e4 <UART_SetConfig+0xa5c>)
 800440a:	2400      	movs	r4, #0
 800440c:	e007      	b.n	800441e <UART_SetConfig+0x796>
 800440e:	4bb6      	ldr	r3, [pc, #728]	; (80046e8 <UART_SetConfig+0xa60>)
 8004410:	2400      	movs	r4, #0
 8004412:	e004      	b.n	800441e <UART_SetConfig+0x796>
 8004414:	4bb5      	ldr	r3, [pc, #724]	; (80046ec <UART_SetConfig+0xa64>)
 8004416:	2400      	movs	r4, #0
 8004418:	e001      	b.n	800441e <UART_SetConfig+0x796>
 800441a:	4baa      	ldr	r3, [pc, #680]	; (80046c4 <UART_SetConfig+0xa3c>)
 800441c:	2400      	movs	r4, #0
 800441e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	0852      	lsrs	r2, r2, #1
 8004424:	633a      	str	r2, [r7, #48]	; 0x30
 8004426:	2200      	movs	r2, #0
 8004428:	637a      	str	r2, [r7, #52]	; 0x34
 800442a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800442c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800442e:	18c0      	adds	r0, r0, r3
 8004430:	4161      	adcs	r1, r4
 8004432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28
 8004438:	2300      	movs	r3, #0
 800443a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	f7fb ffd6 	bl	80003f0 <__aeabi_uldivmod>
 8004444:	0003      	movs	r3, r0
 8004446:	000c      	movs	r4, r1
 8004448:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800444a:	e106      	b.n	800465a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800444c:	f7fe ff52 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004450:	0003      	movs	r3, r0
 8004452:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
 800445c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d050      	beq.n	8004506 <UART_SetConfig+0x87e>
 8004464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	2b01      	cmp	r3, #1
 800446a:	d049      	beq.n	8004500 <UART_SetConfig+0x878>
 800446c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b02      	cmp	r3, #2
 8004472:	d042      	beq.n	80044fa <UART_SetConfig+0x872>
 8004474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	2b03      	cmp	r3, #3
 800447a:	d03b      	beq.n	80044f4 <UART_SetConfig+0x86c>
 800447c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b04      	cmp	r3, #4
 8004482:	d034      	beq.n	80044ee <UART_SetConfig+0x866>
 8004484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	2b05      	cmp	r3, #5
 800448a:	d02d      	beq.n	80044e8 <UART_SetConfig+0x860>
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2b06      	cmp	r3, #6
 8004492:	d026      	beq.n	80044e2 <UART_SetConfig+0x85a>
 8004494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b07      	cmp	r3, #7
 800449a:	d01f      	beq.n	80044dc <UART_SetConfig+0x854>
 800449c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d018      	beq.n	80044d6 <UART_SetConfig+0x84e>
 80044a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b09      	cmp	r3, #9
 80044aa:	d011      	beq.n	80044d0 <UART_SetConfig+0x848>
 80044ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2b0a      	cmp	r3, #10
 80044b2:	d00a      	beq.n	80044ca <UART_SetConfig+0x842>
 80044b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b0b      	cmp	r3, #11
 80044ba:	d103      	bne.n	80044c4 <UART_SetConfig+0x83c>
 80044bc:	2380      	movs	r3, #128	; 0x80
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2400      	movs	r4, #0
 80044c2:	e022      	b.n	800450a <UART_SetConfig+0x882>
 80044c4:	2301      	movs	r3, #1
 80044c6:	2400      	movs	r4, #0
 80044c8:	e01f      	b.n	800450a <UART_SetConfig+0x882>
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	2400      	movs	r4, #0
 80044ce:	e01c      	b.n	800450a <UART_SetConfig+0x882>
 80044d0:	2340      	movs	r3, #64	; 0x40
 80044d2:	2400      	movs	r4, #0
 80044d4:	e019      	b.n	800450a <UART_SetConfig+0x882>
 80044d6:	2320      	movs	r3, #32
 80044d8:	2400      	movs	r4, #0
 80044da:	e016      	b.n	800450a <UART_SetConfig+0x882>
 80044dc:	2310      	movs	r3, #16
 80044de:	2400      	movs	r4, #0
 80044e0:	e013      	b.n	800450a <UART_SetConfig+0x882>
 80044e2:	230c      	movs	r3, #12
 80044e4:	2400      	movs	r4, #0
 80044e6:	e010      	b.n	800450a <UART_SetConfig+0x882>
 80044e8:	230a      	movs	r3, #10
 80044ea:	2400      	movs	r4, #0
 80044ec:	e00d      	b.n	800450a <UART_SetConfig+0x882>
 80044ee:	2308      	movs	r3, #8
 80044f0:	2400      	movs	r4, #0
 80044f2:	e00a      	b.n	800450a <UART_SetConfig+0x882>
 80044f4:	2306      	movs	r3, #6
 80044f6:	2400      	movs	r4, #0
 80044f8:	e007      	b.n	800450a <UART_SetConfig+0x882>
 80044fa:	2304      	movs	r3, #4
 80044fc:	2400      	movs	r4, #0
 80044fe:	e004      	b.n	800450a <UART_SetConfig+0x882>
 8004500:	2302      	movs	r3, #2
 8004502:	2400      	movs	r4, #0
 8004504:	e001      	b.n	800450a <UART_SetConfig+0x882>
 8004506:	2301      	movs	r3, #1
 8004508:	2400      	movs	r4, #0
 800450a:	001a      	movs	r2, r3
 800450c:	0023      	movs	r3, r4
 800450e:	6a38      	ldr	r0, [r7, #32]
 8004510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004512:	f7fb ff6d 	bl	80003f0 <__aeabi_uldivmod>
 8004516:	0003      	movs	r3, r0
 8004518:	000c      	movs	r4, r1
 800451a:	0e1a      	lsrs	r2, r3, #24
 800451c:	0221      	lsls	r1, r4, #8
 800451e:	6579      	str	r1, [r7, #84]	; 0x54
 8004520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004522:	4311      	orrs	r1, r2
 8004524:	6579      	str	r1, [r7, #84]	; 0x54
 8004526:	021b      	lsls	r3, r3, #8
 8004528:	653b      	str	r3, [r7, #80]	; 0x50
 800452a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	61bb      	str	r3, [r7, #24]
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	69fc      	ldr	r4, [r7, #28]
 800453e:	18c0      	adds	r0, r0, r3
 8004540:	4161      	adcs	r1, r4
 8004542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f7fb ff4e 	bl	80003f0 <__aeabi_uldivmod>
 8004554:	0003      	movs	r3, r0
 8004556:	000c      	movs	r4, r1
 8004558:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800455a:	e07e      	b.n	800465a <UART_SetConfig+0x9d2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800455c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d058      	beq.n	8004616 <UART_SetConfig+0x98e>
 8004564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b01      	cmp	r3, #1
 800456a:	d050      	beq.n	800460e <UART_SetConfig+0x986>
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b02      	cmp	r3, #2
 8004572:	d048      	beq.n	8004606 <UART_SetConfig+0x97e>
 8004574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b03      	cmp	r3, #3
 800457a:	d041      	beq.n	8004600 <UART_SetConfig+0x978>
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2b04      	cmp	r3, #4
 8004582:	d039      	beq.n	80045f8 <UART_SetConfig+0x970>
 8004584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b05      	cmp	r3, #5
 800458a:	d032      	beq.n	80045f2 <UART_SetConfig+0x96a>
 800458c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b06      	cmp	r3, #6
 8004592:	d02b      	beq.n	80045ec <UART_SetConfig+0x964>
 8004594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b07      	cmp	r3, #7
 800459a:	d023      	beq.n	80045e4 <UART_SetConfig+0x95c>
 800459c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d01b      	beq.n	80045dc <UART_SetConfig+0x954>
 80045a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d013      	beq.n	80045d4 <UART_SetConfig+0x94c>
 80045ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b0a      	cmp	r3, #10
 80045b2:	d00b      	beq.n	80045cc <UART_SetConfig+0x944>
 80045b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d103      	bne.n	80045c4 <UART_SetConfig+0x93c>
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	2400      	movs	r4, #0
 80045c2:	e02b      	b.n	800461c <UART_SetConfig+0x994>
 80045c4:	2380      	movs	r3, #128	; 0x80
 80045c6:	041b      	lsls	r3, r3, #16
 80045c8:	2400      	movs	r4, #0
 80045ca:	e027      	b.n	800461c <UART_SetConfig+0x994>
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	025b      	lsls	r3, r3, #9
 80045d0:	2400      	movs	r4, #0
 80045d2:	e023      	b.n	800461c <UART_SetConfig+0x994>
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	2400      	movs	r4, #0
 80045da:	e01f      	b.n	800461c <UART_SetConfig+0x994>
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	02db      	lsls	r3, r3, #11
 80045e0:	2400      	movs	r4, #0
 80045e2:	e01b      	b.n	800461c <UART_SetConfig+0x994>
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	031b      	lsls	r3, r3, #12
 80045e8:	2400      	movs	r4, #0
 80045ea:	e017      	b.n	800461c <UART_SetConfig+0x994>
 80045ec:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <UART_SetConfig+0xa68>)
 80045ee:	2400      	movs	r4, #0
 80045f0:	e014      	b.n	800461c <UART_SetConfig+0x994>
 80045f2:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <UART_SetConfig+0xa6c>)
 80045f4:	2400      	movs	r4, #0
 80045f6:	e011      	b.n	800461c <UART_SetConfig+0x994>
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	035b      	lsls	r3, r3, #13
 80045fc:	2400      	movs	r4, #0
 80045fe:	e00d      	b.n	800461c <UART_SetConfig+0x994>
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <UART_SetConfig+0xa70>)
 8004602:	2400      	movs	r4, #0
 8004604:	e00a      	b.n	800461c <UART_SetConfig+0x994>
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	039b      	lsls	r3, r3, #14
 800460a:	2400      	movs	r4, #0
 800460c:	e006      	b.n	800461c <UART_SetConfig+0x994>
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	03db      	lsls	r3, r3, #15
 8004612:	2400      	movs	r4, #0
 8004614:	e002      	b.n	800461c <UART_SetConfig+0x994>
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	2400      	movs	r4, #0
 800461c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800461e:	6852      	ldr	r2, [r2, #4]
 8004620:	0852      	lsrs	r2, r2, #1
 8004622:	60ba      	str	r2, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	60fa      	str	r2, [r7, #12]
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	18c0      	adds	r0, r0, r3
 800462e:	4161      	adcs	r1, r4
 8004630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f7fb fed7 	bl	80003f0 <__aeabi_uldivmod>
 8004642:	0003      	movs	r3, r0
 8004644:	000c      	movs	r4, r1
 8004646:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004648:	e007      	b.n	800465a <UART_SetConfig+0x9d2>
          default:
            ret = HAL_ERROR;
 800464a:	231b      	movs	r3, #27
 800464c:	2258      	movs	r2, #88	; 0x58
 800464e:	4694      	mov	ip, r2
 8004650:	44bc      	add	ip, r7
 8004652:	4463      	add	r3, ip
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
            break;
 8004658:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800465a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800465c:	4a27      	ldr	r2, [pc, #156]	; (80046fc <UART_SetConfig+0xa74>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d909      	bls.n	8004676 <UART_SetConfig+0x9ee>
 8004662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004664:	4a26      	ldr	r2, [pc, #152]	; (8004700 <UART_SetConfig+0xa78>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d805      	bhi.n	8004676 <UART_SetConfig+0x9ee>
        {
          huart->Instance->BRR = usartdiv;
 800466a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	f000 fbc4 	bl	8004dfe <UART_SetConfig+0x1176>
        }
        else
        {
          ret = HAL_ERROR;
 8004676:	231b      	movs	r3, #27
 8004678:	2258      	movs	r2, #88	; 0x58
 800467a:	4694      	mov	ip, r2
 800467c:	44bc      	add	ip, r7
 800467e:	4463      	add	r3, ip
 8004680:	2201      	movs	r2, #1
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	f000 fbbb 	bl	8004dfe <UART_SetConfig+0x1176>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	2380      	movs	r3, #128	; 0x80
 800468e:	021b      	lsls	r3, r3, #8
 8004690:	429a      	cmp	r2, r3
 8004692:	d000      	beq.n	8004696 <UART_SetConfig+0xa0e>
 8004694:	e1e6      	b.n	8004a64 <UART_SetConfig+0xddc>
  {
    switch (clocksource)
 8004696:	2323      	movs	r3, #35	; 0x23
 8004698:	2258      	movs	r2, #88	; 0x58
 800469a:	4694      	mov	ip, r2
 800469c:	44bc      	add	ip, r7
 800469e:	4463      	add	r3, ip
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d100      	bne.n	80046a8 <UART_SetConfig+0xa20>
 80046a6:	e08f      	b.n	80047c8 <UART_SetConfig+0xb40>
 80046a8:	dc02      	bgt.n	80046b0 <UART_SetConfig+0xa28>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02a      	beq.n	8004704 <UART_SetConfig+0xa7c>
 80046ae:	e1a5      	b.n	80049fc <UART_SetConfig+0xd74>
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d100      	bne.n	80046b6 <UART_SetConfig+0xa2e>
 80046b4:	e0df      	b.n	8004876 <UART_SetConfig+0xbee>
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d100      	bne.n	80046bc <UART_SetConfig+0xa34>
 80046ba:	e13e      	b.n	800493a <UART_SetConfig+0xcb2>
 80046bc:	e19e      	b.n	80049fc <UART_SetConfig+0xd74>
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	f4240000 	.word	0xf4240000
 80046c8:	01e84800 	.word	0x01e84800
 80046cc:	03d09000 	.word	0x03d09000
 80046d0:	07a12000 	.word	0x07a12000
 80046d4:	0f424000 	.word	0x0f424000
 80046d8:	14585500 	.word	0x14585500
 80046dc:	186a0000 	.word	0x186a0000
 80046e0:	1e848000 	.word	0x1e848000
 80046e4:	28b0aa00 	.word	0x28b0aa00
 80046e8:	3d090000 	.word	0x3d090000
 80046ec:	7a120000 	.word	0x7a120000
 80046f0:	000aaa00 	.word	0x000aaa00
 80046f4:	000ccc00 	.word	0x000ccc00
 80046f8:	00155500 	.word	0x00155500
 80046fc:	000002ff 	.word	0x000002ff
 8004700:	000fffff 	.word	0x000fffff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004704:	f7fe fe82 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004708:	0003      	movs	r3, r0
 800470a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800470c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	d044      	beq.n	800479e <UART_SetConfig+0xb16>
 8004714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b01      	cmp	r3, #1
 800471a:	d03e      	beq.n	800479a <UART_SetConfig+0xb12>
 800471c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b02      	cmp	r3, #2
 8004722:	d038      	beq.n	8004796 <UART_SetConfig+0xb0e>
 8004724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	2b03      	cmp	r3, #3
 800472a:	d032      	beq.n	8004792 <UART_SetConfig+0xb0a>
 800472c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	2b04      	cmp	r3, #4
 8004732:	d02c      	beq.n	800478e <UART_SetConfig+0xb06>
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2b05      	cmp	r3, #5
 800473a:	d026      	beq.n	800478a <UART_SetConfig+0xb02>
 800473c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2b06      	cmp	r3, #6
 8004742:	d020      	beq.n	8004786 <UART_SetConfig+0xafe>
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	2b07      	cmp	r3, #7
 800474a:	d01a      	beq.n	8004782 <UART_SetConfig+0xafa>
 800474c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b08      	cmp	r3, #8
 8004752:	d014      	beq.n	800477e <UART_SetConfig+0xaf6>
 8004754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	2b09      	cmp	r3, #9
 800475a:	d00e      	beq.n	800477a <UART_SetConfig+0xaf2>
 800475c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2b0a      	cmp	r3, #10
 8004762:	d008      	beq.n	8004776 <UART_SetConfig+0xaee>
 8004764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	2b0b      	cmp	r3, #11
 800476a:	d102      	bne.n	8004772 <UART_SetConfig+0xaea>
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	e016      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004772:	2301      	movs	r3, #1
 8004774:	e014      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	e012      	b.n	80047a0 <UART_SetConfig+0xb18>
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	e010      	b.n	80047a0 <UART_SetConfig+0xb18>
 800477e:	2320      	movs	r3, #32
 8004780:	e00e      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004782:	2310      	movs	r3, #16
 8004784:	e00c      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004786:	230c      	movs	r3, #12
 8004788:	e00a      	b.n	80047a0 <UART_SetConfig+0xb18>
 800478a:	230a      	movs	r3, #10
 800478c:	e008      	b.n	80047a0 <UART_SetConfig+0xb18>
 800478e:	2308      	movs	r3, #8
 8004790:	e006      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004792:	2306      	movs	r3, #6
 8004794:	e004      	b.n	80047a0 <UART_SetConfig+0xb18>
 8004796:	2304      	movs	r3, #4
 8004798:	e002      	b.n	80047a0 <UART_SetConfig+0xb18>
 800479a:	2302      	movs	r3, #2
 800479c:	e000      	b.n	80047a0 <UART_SetConfig+0xb18>
 800479e:	2301      	movs	r3, #1
 80047a0:	0019      	movs	r1, r3
 80047a2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80047a4:	f7fb fcae 	bl	8000104 <__udivsi3>
 80047a8:	0003      	movs	r3, r0
 80047aa:	005a      	lsls	r2, r3, #1
 80047ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	18d2      	adds	r2, r2, r3
 80047b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	0019      	movs	r1, r3
 80047ba:	0010      	movs	r0, r2
 80047bc:	f7fb fca2 	bl	8000104 <__udivsi3>
 80047c0:	0003      	movs	r3, r0
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80047c6:	e121      	b.n	8004a0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d043      	beq.n	8004858 <UART_SetConfig+0xbd0>
 80047d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d03d      	beq.n	8004854 <UART_SetConfig+0xbcc>
 80047d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d037      	beq.n	8004850 <UART_SetConfig+0xbc8>
 80047e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d031      	beq.n	800484c <UART_SetConfig+0xbc4>
 80047e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d02b      	beq.n	8004848 <UART_SetConfig+0xbc0>
 80047f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d025      	beq.n	8004844 <UART_SetConfig+0xbbc>
 80047f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	2b06      	cmp	r3, #6
 80047fe:	d01f      	beq.n	8004840 <UART_SetConfig+0xbb8>
 8004800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b07      	cmp	r3, #7
 8004806:	d019      	beq.n	800483c <UART_SetConfig+0xbb4>
 8004808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	2b08      	cmp	r3, #8
 800480e:	d013      	beq.n	8004838 <UART_SetConfig+0xbb0>
 8004810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	2b09      	cmp	r3, #9
 8004816:	d00d      	beq.n	8004834 <UART_SetConfig+0xbac>
 8004818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	2b0a      	cmp	r3, #10
 800481e:	d007      	beq.n	8004830 <UART_SetConfig+0xba8>
 8004820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	2b0b      	cmp	r3, #11
 8004826:	d101      	bne.n	800482c <UART_SetConfig+0xba4>
 8004828:	4bba      	ldr	r3, [pc, #744]	; (8004b14 <UART_SetConfig+0xe8c>)
 800482a:	e016      	b.n	800485a <UART_SetConfig+0xbd2>
 800482c:	4bba      	ldr	r3, [pc, #744]	; (8004b18 <UART_SetConfig+0xe90>)
 800482e:	e014      	b.n	800485a <UART_SetConfig+0xbd2>
 8004830:	4bba      	ldr	r3, [pc, #744]	; (8004b1c <UART_SetConfig+0xe94>)
 8004832:	e012      	b.n	800485a <UART_SetConfig+0xbd2>
 8004834:	4bba      	ldr	r3, [pc, #744]	; (8004b20 <UART_SetConfig+0xe98>)
 8004836:	e010      	b.n	800485a <UART_SetConfig+0xbd2>
 8004838:	4bba      	ldr	r3, [pc, #744]	; (8004b24 <UART_SetConfig+0xe9c>)
 800483a:	e00e      	b.n	800485a <UART_SetConfig+0xbd2>
 800483c:	4bba      	ldr	r3, [pc, #744]	; (8004b28 <UART_SetConfig+0xea0>)
 800483e:	e00c      	b.n	800485a <UART_SetConfig+0xbd2>
 8004840:	4bba      	ldr	r3, [pc, #744]	; (8004b2c <UART_SetConfig+0xea4>)
 8004842:	e00a      	b.n	800485a <UART_SetConfig+0xbd2>
 8004844:	4bba      	ldr	r3, [pc, #744]	; (8004b30 <UART_SetConfig+0xea8>)
 8004846:	e008      	b.n	800485a <UART_SetConfig+0xbd2>
 8004848:	4bba      	ldr	r3, [pc, #744]	; (8004b34 <UART_SetConfig+0xeac>)
 800484a:	e006      	b.n	800485a <UART_SetConfig+0xbd2>
 800484c:	4bba      	ldr	r3, [pc, #744]	; (8004b38 <UART_SetConfig+0xeb0>)
 800484e:	e004      	b.n	800485a <UART_SetConfig+0xbd2>
 8004850:	4bba      	ldr	r3, [pc, #744]	; (8004b3c <UART_SetConfig+0xeb4>)
 8004852:	e002      	b.n	800485a <UART_SetConfig+0xbd2>
 8004854:	4bba      	ldr	r3, [pc, #744]	; (8004b40 <UART_SetConfig+0xeb8>)
 8004856:	e000      	b.n	800485a <UART_SetConfig+0xbd2>
 8004858:	4baf      	ldr	r3, [pc, #700]	; (8004b18 <UART_SetConfig+0xe90>)
 800485a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800485c:	6852      	ldr	r2, [r2, #4]
 800485e:	0852      	lsrs	r2, r2, #1
 8004860:	189a      	adds	r2, r3, r2
 8004862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0019      	movs	r1, r3
 8004868:	0010      	movs	r0, r2
 800486a:	f7fb fc4b 	bl	8000104 <__udivsi3>
 800486e:	0003      	movs	r3, r0
 8004870:	b29b      	uxth	r3, r3
 8004872:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004874:	e0ca      	b.n	8004a0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004876:	f7fe fd3d 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 800487a:	0003      	movs	r3, r0
 800487c:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800487e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d044      	beq.n	8004910 <UART_SetConfig+0xc88>
 8004886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b01      	cmp	r3, #1
 800488c:	d03e      	beq.n	800490c <UART_SetConfig+0xc84>
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b02      	cmp	r3, #2
 8004894:	d038      	beq.n	8004908 <UART_SetConfig+0xc80>
 8004896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b03      	cmp	r3, #3
 800489c:	d032      	beq.n	8004904 <UART_SetConfig+0xc7c>
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d02c      	beq.n	8004900 <UART_SetConfig+0xc78>
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d026      	beq.n	80048fc <UART_SetConfig+0xc74>
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b06      	cmp	r3, #6
 80048b4:	d020      	beq.n	80048f8 <UART_SetConfig+0xc70>
 80048b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b07      	cmp	r3, #7
 80048bc:	d01a      	beq.n	80048f4 <UART_SetConfig+0xc6c>
 80048be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d014      	beq.n	80048f0 <UART_SetConfig+0xc68>
 80048c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b09      	cmp	r3, #9
 80048cc:	d00e      	beq.n	80048ec <UART_SetConfig+0xc64>
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b0a      	cmp	r3, #10
 80048d4:	d008      	beq.n	80048e8 <UART_SetConfig+0xc60>
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b0b      	cmp	r3, #11
 80048dc:	d102      	bne.n	80048e4 <UART_SetConfig+0xc5c>
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	e016      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e014      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	e012      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048ec:	2340      	movs	r3, #64	; 0x40
 80048ee:	e010      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048f0:	2320      	movs	r3, #32
 80048f2:	e00e      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048f4:	2310      	movs	r3, #16
 80048f6:	e00c      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048f8:	230c      	movs	r3, #12
 80048fa:	e00a      	b.n	8004912 <UART_SetConfig+0xc8a>
 80048fc:	230a      	movs	r3, #10
 80048fe:	e008      	b.n	8004912 <UART_SetConfig+0xc8a>
 8004900:	2308      	movs	r3, #8
 8004902:	e006      	b.n	8004912 <UART_SetConfig+0xc8a>
 8004904:	2306      	movs	r3, #6
 8004906:	e004      	b.n	8004912 <UART_SetConfig+0xc8a>
 8004908:	2304      	movs	r3, #4
 800490a:	e002      	b.n	8004912 <UART_SetConfig+0xc8a>
 800490c:	2302      	movs	r3, #2
 800490e:	e000      	b.n	8004912 <UART_SetConfig+0xc8a>
 8004910:	2301      	movs	r3, #1
 8004912:	0019      	movs	r1, r3
 8004914:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004916:	f7fb fbf5 	bl	8000104 <__udivsi3>
 800491a:	0003      	movs	r3, r0
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	18d2      	adds	r2, r2, r3
 8004926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	0019      	movs	r1, r3
 800492c:	0010      	movs	r0, r2
 800492e:	f7fb fbe9 	bl	8000104 <__udivsi3>
 8004932:	0003      	movs	r3, r0
 8004934:	b29b      	uxth	r3, r3
 8004936:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004938:	e068      	b.n	8004a0c <UART_SetConfig+0xd84>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04c      	beq.n	80049dc <UART_SetConfig+0xd54>
 8004942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b01      	cmp	r3, #1
 8004948:	d045      	beq.n	80049d6 <UART_SetConfig+0xd4e>
 800494a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2b02      	cmp	r3, #2
 8004950:	d03e      	beq.n	80049d0 <UART_SetConfig+0xd48>
 8004952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b03      	cmp	r3, #3
 8004958:	d038      	beq.n	80049cc <UART_SetConfig+0xd44>
 800495a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b04      	cmp	r3, #4
 8004960:	d031      	beq.n	80049c6 <UART_SetConfig+0xd3e>
 8004962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b05      	cmp	r3, #5
 8004968:	d02b      	beq.n	80049c2 <UART_SetConfig+0xd3a>
 800496a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b06      	cmp	r3, #6
 8004970:	d025      	beq.n	80049be <UART_SetConfig+0xd36>
 8004972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b07      	cmp	r3, #7
 8004978:	d01e      	beq.n	80049b8 <UART_SetConfig+0xd30>
 800497a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b08      	cmp	r3, #8
 8004980:	d017      	beq.n	80049b2 <UART_SetConfig+0xd2a>
 8004982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b09      	cmp	r3, #9
 8004988:	d010      	beq.n	80049ac <UART_SetConfig+0xd24>
 800498a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b0a      	cmp	r3, #10
 8004990:	d009      	beq.n	80049a6 <UART_SetConfig+0xd1e>
 8004992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b0b      	cmp	r3, #11
 8004998:	d102      	bne.n	80049a0 <UART_SetConfig+0xd18>
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	e01f      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	025b      	lsls	r3, r3, #9
 80049a4:	e01c      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	e019      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	e016      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	e013      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	015b      	lsls	r3, r3, #5
 80049bc:	e010      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049be:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <UART_SetConfig+0xebc>)
 80049c0:	e00e      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049c2:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <UART_SetConfig+0xec0>)
 80049c4:	e00c      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	019b      	lsls	r3, r3, #6
 80049ca:	e009      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049cc:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <UART_SetConfig+0xec4>)
 80049ce:	e007      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	01db      	lsls	r3, r3, #7
 80049d4:	e004      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	e001      	b.n	80049e0 <UART_SetConfig+0xd58>
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	025b      	lsls	r3, r3, #9
 80049e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049e2:	6852      	ldr	r2, [r2, #4]
 80049e4:	0852      	lsrs	r2, r2, #1
 80049e6:	189a      	adds	r2, r3, r2
 80049e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0019      	movs	r1, r3
 80049ee:	0010      	movs	r0, r2
 80049f0:	f7fb fb88 	bl	8000104 <__udivsi3>
 80049f4:	0003      	movs	r3, r0
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80049fa:	e007      	b.n	8004a0c <UART_SetConfig+0xd84>
      default:
        ret = HAL_ERROR;
 80049fc:	231b      	movs	r3, #27
 80049fe:	2258      	movs	r2, #88	; 0x58
 8004a00:	4694      	mov	ip, r2
 8004a02:	44bc      	add	ip, r7
 8004a04:	4463      	add	r3, ip
 8004a06:	2201      	movs	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
        break;
 8004a0a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0e:	2b0f      	cmp	r3, #15
 8004a10:	d920      	bls.n	8004a54 <UART_SetConfig+0xdcc>
 8004a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a14:	4a4e      	ldr	r2, [pc, #312]	; (8004b50 <UART_SetConfig+0xec8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d81c      	bhi.n	8004a54 <UART_SetConfig+0xdcc>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	200e      	movs	r0, #14
 8004a20:	2458      	movs	r4, #88	; 0x58
 8004a22:	193b      	adds	r3, r7, r4
 8004a24:	181b      	adds	r3, r3, r0
 8004a26:	210f      	movs	r1, #15
 8004a28:	438a      	bics	r2, r1
 8004a2a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2207      	movs	r2, #7
 8004a34:	4013      	ands	r3, r2
 8004a36:	b299      	uxth	r1, r3
 8004a38:	193b      	adds	r3, r7, r4
 8004a3a:	181b      	adds	r3, r3, r0
 8004a3c:	193a      	adds	r2, r7, r4
 8004a3e:	1812      	adds	r2, r2, r0
 8004a40:	8812      	ldrh	r2, [r2, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	193a      	adds	r2, r7, r4
 8004a4c:	1812      	adds	r2, r2, r0
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	e1d4      	b.n	8004dfe <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8004a54:	231b      	movs	r3, #27
 8004a56:	2258      	movs	r2, #88	; 0x58
 8004a58:	4694      	mov	ip, r2
 8004a5a:	44bc      	add	ip, r7
 8004a5c:	4463      	add	r3, ip
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e1cc      	b.n	8004dfe <UART_SetConfig+0x1176>
    }
  }
  else
  {
    switch (clocksource)
 8004a64:	2323      	movs	r3, #35	; 0x23
 8004a66:	2258      	movs	r2, #88	; 0x58
 8004a68:	4694      	mov	ip, r2
 8004a6a:	44bc      	add	ip, r7
 8004a6c:	4463      	add	r3, ip
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d100      	bne.n	8004a76 <UART_SetConfig+0xdee>
 8004a74:	e08f      	b.n	8004b96 <UART_SetConfig+0xf0e>
 8004a76:	dc02      	bgt.n	8004a7e <UART_SetConfig+0xdf6>
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <UART_SetConfig+0xe04>
 8004a7c:	e1a4      	b.n	8004dc8 <UART_SetConfig+0x1140>
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d100      	bne.n	8004a84 <UART_SetConfig+0xdfc>
 8004a82:	e0df      	b.n	8004c44 <UART_SetConfig+0xfbc>
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d100      	bne.n	8004a8a <UART_SetConfig+0xe02>
 8004a88:	e13e      	b.n	8004d08 <UART_SetConfig+0x1080>
 8004a8a:	e19d      	b.n	8004dc8 <UART_SetConfig+0x1140>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a8c:	f7fe fcbe 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004a90:	0003      	movs	r3, r0
 8004a92:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d100      	bne.n	8004a9e <UART_SetConfig+0xe16>
 8004a9c:	e066      	b.n	8004b6c <UART_SetConfig+0xee4>
 8004a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d100      	bne.n	8004aa8 <UART_SetConfig+0xe20>
 8004aa6:	e05f      	b.n	8004b68 <UART_SetConfig+0xee0>
 8004aa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d059      	beq.n	8004b64 <UART_SetConfig+0xedc>
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d053      	beq.n	8004b60 <UART_SetConfig+0xed8>
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d04d      	beq.n	8004b5c <UART_SetConfig+0xed4>
 8004ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	2b05      	cmp	r3, #5
 8004ac6:	d047      	beq.n	8004b58 <UART_SetConfig+0xed0>
 8004ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	2b06      	cmp	r3, #6
 8004ace:	d041      	beq.n	8004b54 <UART_SetConfig+0xecc>
 8004ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	2b07      	cmp	r3, #7
 8004ad6:	d01a      	beq.n	8004b0e <UART_SetConfig+0xe86>
 8004ad8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d014      	beq.n	8004b0a <UART_SetConfig+0xe82>
 8004ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b09      	cmp	r3, #9
 8004ae6:	d00e      	beq.n	8004b06 <UART_SetConfig+0xe7e>
 8004ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	2b0a      	cmp	r3, #10
 8004aee:	d008      	beq.n	8004b02 <UART_SetConfig+0xe7a>
 8004af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b0b      	cmp	r3, #11
 8004af6:	d102      	bne.n	8004afe <UART_SetConfig+0xe76>
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	e037      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e035      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b02:	2380      	movs	r3, #128	; 0x80
 8004b04:	e033      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b06:	2340      	movs	r3, #64	; 0x40
 8004b08:	e031      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e02f      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b0e:	2310      	movs	r3, #16
 8004b10:	e02d      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	0001e848 	.word	0x0001e848
 8004b18:	01e84800 	.word	0x01e84800
 8004b1c:	0003d090 	.word	0x0003d090
 8004b20:	0007a120 	.word	0x0007a120
 8004b24:	000f4240 	.word	0x000f4240
 8004b28:	001e8480 	.word	0x001e8480
 8004b2c:	0028b0aa 	.word	0x0028b0aa
 8004b30:	0030d400 	.word	0x0030d400
 8004b34:	003d0900 	.word	0x003d0900
 8004b38:	00516154 	.word	0x00516154
 8004b3c:	007a1200 	.word	0x007a1200
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	00001554 	.word	0x00001554
 8004b48:	00001998 	.word	0x00001998
 8004b4c:	00002aaa 	.word	0x00002aaa
 8004b50:	0000ffff 	.word	0x0000ffff
 8004b54:	230c      	movs	r3, #12
 8004b56:	e00a      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b58:	230a      	movs	r3, #10
 8004b5a:	e008      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	e006      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b60:	2306      	movs	r3, #6
 8004b62:	e004      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	e002      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e000      	b.n	8004b6e <UART_SetConfig+0xee6>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	0019      	movs	r1, r3
 8004b70:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004b72:	f7fb fac7 	bl	8000104 <__udivsi3>
 8004b76:	0003      	movs	r3, r0
 8004b78:	001a      	movs	r2, r3
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	18d2      	adds	r2, r2, r3
 8004b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	0019      	movs	r1, r3
 8004b88:	0010      	movs	r0, r2
 8004b8a:	f7fb fabb 	bl	8000104 <__udivsi3>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004b94:	e120      	b.n	8004dd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d043      	beq.n	8004c26 <UART_SetConfig+0xf9e>
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d03d      	beq.n	8004c22 <UART_SetConfig+0xf9a>
 8004ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d037      	beq.n	8004c1e <UART_SetConfig+0xf96>
 8004bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d031      	beq.n	8004c1a <UART_SetConfig+0xf92>
 8004bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d02b      	beq.n	8004c16 <UART_SetConfig+0xf8e>
 8004bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	d025      	beq.n	8004c12 <UART_SetConfig+0xf8a>
 8004bc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b06      	cmp	r3, #6
 8004bcc:	d01f      	beq.n	8004c0e <UART_SetConfig+0xf86>
 8004bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	d019      	beq.n	8004c0a <UART_SetConfig+0xf82>
 8004bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d013      	beq.n	8004c06 <UART_SetConfig+0xf7e>
 8004bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b09      	cmp	r3, #9
 8004be4:	d00d      	beq.n	8004c02 <UART_SetConfig+0xf7a>
 8004be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b0a      	cmp	r3, #10
 8004bec:	d007      	beq.n	8004bfe <UART_SetConfig+0xf76>
 8004bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b0b      	cmp	r3, #11
 8004bf4:	d101      	bne.n	8004bfa <UART_SetConfig+0xf72>
 8004bf6:	4b8e      	ldr	r3, [pc, #568]	; (8004e30 <UART_SetConfig+0x11a8>)
 8004bf8:	e016      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004bfa:	4b8e      	ldr	r3, [pc, #568]	; (8004e34 <UART_SetConfig+0x11ac>)
 8004bfc:	e014      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004bfe:	4b8e      	ldr	r3, [pc, #568]	; (8004e38 <UART_SetConfig+0x11b0>)
 8004c00:	e012      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c02:	4b8e      	ldr	r3, [pc, #568]	; (8004e3c <UART_SetConfig+0x11b4>)
 8004c04:	e010      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c06:	4b8e      	ldr	r3, [pc, #568]	; (8004e40 <UART_SetConfig+0x11b8>)
 8004c08:	e00e      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c0a:	4b8e      	ldr	r3, [pc, #568]	; (8004e44 <UART_SetConfig+0x11bc>)
 8004c0c:	e00c      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c0e:	4b8e      	ldr	r3, [pc, #568]	; (8004e48 <UART_SetConfig+0x11c0>)
 8004c10:	e00a      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c12:	4b8e      	ldr	r3, [pc, #568]	; (8004e4c <UART_SetConfig+0x11c4>)
 8004c14:	e008      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c16:	4b8e      	ldr	r3, [pc, #568]	; (8004e50 <UART_SetConfig+0x11c8>)
 8004c18:	e006      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c1a:	4b8e      	ldr	r3, [pc, #568]	; (8004e54 <UART_SetConfig+0x11cc>)
 8004c1c:	e004      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c1e:	4b8e      	ldr	r3, [pc, #568]	; (8004e58 <UART_SetConfig+0x11d0>)
 8004c20:	e002      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c22:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <UART_SetConfig+0x11d4>)
 8004c24:	e000      	b.n	8004c28 <UART_SetConfig+0xfa0>
 8004c26:	4b83      	ldr	r3, [pc, #524]	; (8004e34 <UART_SetConfig+0x11ac>)
 8004c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c2a:	6852      	ldr	r2, [r2, #4]
 8004c2c:	0852      	lsrs	r2, r2, #1
 8004c2e:	189a      	adds	r2, r3, r2
 8004c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	0019      	movs	r1, r3
 8004c36:	0010      	movs	r0, r2
 8004c38:	f7fb fa64 	bl	8000104 <__udivsi3>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004c42:	e0c9      	b.n	8004dd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c44:	f7fe fb56 	bl	80032f4 <HAL_RCC_GetSysClockFreq>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d044      	beq.n	8004cde <UART_SetConfig+0x1056>
 8004c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d03e      	beq.n	8004cda <UART_SetConfig+0x1052>
 8004c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d038      	beq.n	8004cd6 <UART_SetConfig+0x104e>
 8004c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d032      	beq.n	8004cd2 <UART_SetConfig+0x104a>
 8004c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d02c      	beq.n	8004cce <UART_SetConfig+0x1046>
 8004c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d026      	beq.n	8004cca <UART_SetConfig+0x1042>
 8004c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c80:	2b06      	cmp	r3, #6
 8004c82:	d020      	beq.n	8004cc6 <UART_SetConfig+0x103e>
 8004c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	2b07      	cmp	r3, #7
 8004c8a:	d01a      	beq.n	8004cc2 <UART_SetConfig+0x103a>
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d014      	beq.n	8004cbe <UART_SetConfig+0x1036>
 8004c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	2b09      	cmp	r3, #9
 8004c9a:	d00e      	beq.n	8004cba <UART_SetConfig+0x1032>
 8004c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	2b0a      	cmp	r3, #10
 8004ca2:	d008      	beq.n	8004cb6 <UART_SetConfig+0x102e>
 8004ca4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b0b      	cmp	r3, #11
 8004caa:	d102      	bne.n	8004cb2 <UART_SetConfig+0x102a>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	e016      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e014      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	e012      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cba:	2340      	movs	r3, #64	; 0x40
 8004cbc:	e010      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	e00e      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	e00c      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	e00a      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cca:	230a      	movs	r3, #10
 8004ccc:	e008      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cce:	2308      	movs	r3, #8
 8004cd0:	e006      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	e004      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	e002      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e000      	b.n	8004ce0 <UART_SetConfig+0x1058>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004ce4:	f7fb fa0e 	bl	8000104 <__udivsi3>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	001a      	movs	r2, r3
 8004cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	18d2      	adds	r2, r2, r3
 8004cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	0010      	movs	r0, r2
 8004cfc:	f7fb fa02 	bl	8000104 <__udivsi3>
 8004d00:	0003      	movs	r3, r0
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004d06:	e067      	b.n	8004dd8 <UART_SetConfig+0x1150>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d04b      	beq.n	8004da8 <UART_SetConfig+0x1120>
 8004d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d044      	beq.n	8004da2 <UART_SetConfig+0x111a>
 8004d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d03d      	beq.n	8004d9c <UART_SetConfig+0x1114>
 8004d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d037      	beq.n	8004d98 <UART_SetConfig+0x1110>
 8004d28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d030      	beq.n	8004d92 <UART_SetConfig+0x110a>
 8004d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d02a      	beq.n	8004d8e <UART_SetConfig+0x1106>
 8004d38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d024      	beq.n	8004d8a <UART_SetConfig+0x1102>
 8004d40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	2b07      	cmp	r3, #7
 8004d46:	d01d      	beq.n	8004d84 <UART_SetConfig+0x10fc>
 8004d48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d016      	beq.n	8004d7e <UART_SetConfig+0x10f6>
 8004d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b09      	cmp	r3, #9
 8004d56:	d00f      	beq.n	8004d78 <UART_SetConfig+0x10f0>
 8004d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b0a      	cmp	r3, #10
 8004d5e:	d008      	beq.n	8004d72 <UART_SetConfig+0x10ea>
 8004d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	2b0b      	cmp	r3, #11
 8004d66:	d101      	bne.n	8004d6c <UART_SetConfig+0x10e4>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	e01f      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	e01c      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d72:	2380      	movs	r3, #128	; 0x80
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	e019      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	e016      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	e013      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	e010      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d8a:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <UART_SetConfig+0x11d8>)
 8004d8c:	e00e      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d8e:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <UART_SetConfig+0x11dc>)
 8004d90:	e00c      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	015b      	lsls	r3, r3, #5
 8004d96:	e009      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d98:	4b33      	ldr	r3, [pc, #204]	; (8004e68 <UART_SetConfig+0x11e0>)
 8004d9a:	e007      	b.n	8004dac <UART_SetConfig+0x1124>
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	019b      	lsls	r3, r3, #6
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0x1124>
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	01db      	lsls	r3, r3, #7
 8004da6:	e001      	b.n	8004dac <UART_SetConfig+0x1124>
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dae:	6852      	ldr	r2, [r2, #4]
 8004db0:	0852      	lsrs	r2, r2, #1
 8004db2:	189a      	adds	r2, r3, r2
 8004db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	0019      	movs	r1, r3
 8004dba:	0010      	movs	r0, r2
 8004dbc:	f7fb f9a2 	bl	8000104 <__udivsi3>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004dc6:	e007      	b.n	8004dd8 <UART_SetConfig+0x1150>
      default:
        ret = HAL_ERROR;
 8004dc8:	231b      	movs	r3, #27
 8004dca:	2258      	movs	r2, #88	; 0x58
 8004dcc:	4694      	mov	ip, r2
 8004dce:	44bc      	add	ip, r7
 8004dd0:	4463      	add	r3, ip
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
        break;
 8004dd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d908      	bls.n	8004df0 <UART_SetConfig+0x1168>
 8004dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <UART_SetConfig+0x11e4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d804      	bhi.n	8004df0 <UART_SetConfig+0x1168>
    {
      huart->Instance->BRR = usartdiv;
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	e006      	b.n	8004dfe <UART_SetConfig+0x1176>
    }
    else
    {
      ret = HAL_ERROR;
 8004df0:	231b      	movs	r3, #27
 8004df2:	2258      	movs	r2, #88	; 0x58
 8004df4:	4694      	mov	ip, r2
 8004df6:	44bc      	add	ip, r7
 8004df8:	4463      	add	r3, ip
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e00:	226a      	movs	r2, #106	; 0x6a
 8004e02:	2101      	movs	r1, #1
 8004e04:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e08:	2268      	movs	r2, #104	; 0x68
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e10:	2200      	movs	r2, #0
 8004e12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e16:	2200      	movs	r2, #0
 8004e18:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004e1a:	231b      	movs	r3, #27
 8004e1c:	2258      	movs	r2, #88	; 0x58
 8004e1e:	4694      	mov	ip, r2
 8004e20:	44bc      	add	ip, r7
 8004e22:	4463      	add	r3, ip
 8004e24:	781b      	ldrb	r3, [r3, #0]
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b021      	add	sp, #132	; 0x84
 8004e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	0000f424 	.word	0x0000f424
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	0001e848 	.word	0x0001e848
 8004e3c:	0003d090 	.word	0x0003d090
 8004e40:	0007a120 	.word	0x0007a120
 8004e44:	000f4240 	.word	0x000f4240
 8004e48:	00145855 	.word	0x00145855
 8004e4c:	00186a00 	.word	0x00186a00
 8004e50:	001e8480 	.word	0x001e8480
 8004e54:	0028b0aa 	.word	0x0028b0aa
 8004e58:	003d0900 	.word	0x003d0900
 8004e5c:	007a1200 	.word	0x007a1200
 8004e60:	00000aaa 	.word	0x00000aaa
 8004e64:	00000ccc 	.word	0x00000ccc
 8004e68:	00001555 	.word	0x00001555
 8004e6c:	0000ffff 	.word	0x0000ffff

08004e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d00b      	beq.n	8004e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <UART_AdvFeatureConfig+0x144>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a43      	ldr	r2, [pc, #268]	; (8004fb8 <UART_AdvFeatureConfig+0x148>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	d00b      	beq.n	8004ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4a3b      	ldr	r2, [pc, #236]	; (8004fbc <UART_AdvFeatureConfig+0x14c>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <UART_AdvFeatureConfig+0x150>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	2210      	movs	r2, #16
 8004f06:	4013      	ands	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <UART_AdvFeatureConfig+0x154>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	0019      	movs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2220      	movs	r2, #32
 8004f28:	4013      	ands	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <UART_AdvFeatureConfig+0x158>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	0019      	movs	r1, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	d01d      	beq.n	8004f8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <UART_AdvFeatureConfig+0x15c>)
 8004f56:	4013      	ands	r3, r2
 8004f58:	0019      	movs	r1, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	035b      	lsls	r3, r3, #13
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d10b      	bne.n	8004f8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <UART_AdvFeatureConfig+0x160>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <UART_AdvFeatureConfig+0x164>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	46c0      	nop			; (mov r8, r8)
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b002      	add	sp, #8
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fffdffff 	.word	0xfffdffff
 8004fb8:	fffeffff 	.word	0xfffeffff
 8004fbc:	fffbffff 	.word	0xfffbffff
 8004fc0:	ffff7fff 	.word	0xffff7fff
 8004fc4:	ffffefff 	.word	0xffffefff
 8004fc8:	ffffdfff 	.word	0xffffdfff
 8004fcc:	ffefffff 	.word	0xffefffff
 8004fd0:	ff9fffff 	.word	0xff9fffff
 8004fd4:	fff7ffff 	.word	0xfff7ffff

08004fd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2288      	movs	r2, #136	; 0x88
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fe8:	f7fc f8fc 	bl	80011e4 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2208      	movs	r2, #8
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b08      	cmp	r3, #8
 8004ffc:	d10d      	bne.n	800501a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	0399      	lsls	r1, r3, #14
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4b18      	ldr	r3, [pc, #96]	; (8005068 <UART_CheckIdleState+0x90>)
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	0013      	movs	r3, r2
 800500c:	2200      	movs	r2, #0
 800500e:	f000 f82d 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d001      	beq.n	800501a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e021      	b.n	800505e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2204      	movs	r2, #4
 8005022:	4013      	ands	r3, r2
 8005024:	2b04      	cmp	r3, #4
 8005026:	d10d      	bne.n	8005044 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	2380      	movs	r3, #128	; 0x80
 800502c:	03d9      	lsls	r1, r3, #15
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <UART_CheckIdleState+0x90>)
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	0013      	movs	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	f000 f818 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 800503c:	1e03      	subs	r3, r0, #0
 800503e:	d001      	beq.n	8005044 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e00c      	b.n	800505e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2280      	movs	r2, #128	; 0x80
 8005048:	2120      	movs	r1, #32
 800504a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2284      	movs	r2, #132	; 0x84
 8005050:	2120      	movs	r1, #32
 8005052:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	227c      	movs	r2, #124	; 0x7c
 8005058:	2100      	movs	r1, #0
 800505a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	0018      	movs	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	b004      	add	sp, #16
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	01ffffff 	.word	0x01ffffff

0800506c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	1dfb      	adds	r3, r7, #7
 800507a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507c:	e02b      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3301      	adds	r3, #1
 8005082:	d028      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fc f8ae 	bl	80011e4 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11d      	bne.n	80050d6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4916      	ldr	r1, [pc, #88]	; (8005100 <UART_WaitOnFlagUntilTimeout+0x94>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	438a      	bics	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	2120      	movs	r1, #32
 80050c0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2284      	movs	r2, #132	; 0x84
 80050c6:	2120      	movs	r1, #32
 80050c8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	227c      	movs	r2, #124	; 0x7c
 80050ce:	2100      	movs	r1, #0
 80050d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	425a      	negs	r2, r3
 80050e6:	4153      	adcs	r3, r2
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	001a      	movs	r2, r3
 80050ec:	1dfb      	adds	r3, r7, #7
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0c4      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	0018      	movs	r0, r3
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	fffffe5f 	.word	0xfffffe5f

08005104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	490b      	ldr	r1, [pc, #44]	; (8005144 <UART_EndRxTransfer+0x40>)
 8005118:	400a      	ands	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4908      	ldr	r1, [pc, #32]	; (8005148 <UART_EndRxTransfer+0x44>)
 8005128:	400a      	ands	r2, r1
 800512a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2284      	movs	r2, #132	; 0x84
 8005130:	2120      	movs	r1, #32
 8005132:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	46bd      	mov	sp, r7
 800513e:	b002      	add	sp, #8
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	fffffedf 	.word	0xfffffedf
 8005148:	effffffe 	.word	0xeffffffe

0800514c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	225e      	movs	r2, #94	; 0x5e
 800515e:	2100      	movs	r1, #0
 8005160:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2256      	movs	r2, #86	; 0x56
 8005166:	2100      	movs	r1, #0
 8005168:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0018      	movs	r0, r3
 800516e:	f7fe fd83 	bl	8003c78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b004      	add	sp, #16
 8005178:	bd80      	pop	{r7, pc}

0800517a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b082      	sub	sp, #8
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	438a      	bics	r2, r1
 8005190:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2280      	movs	r2, #128	; 0x80
 8005196:	2120      	movs	r1, #32
 8005198:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fe fd60 	bl	8003c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46bd      	mov	sp, r7
 80051ac:	b002      	add	sp, #8
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051c8:	46c0      	nop			; (mov r8, r8)
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051d8:	46c0      	nop			; (mov r8, r8)
 80051da:	46bd      	mov	sp, r7
 80051dc:	b002      	add	sp, #8
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	227c      	movs	r2, #124	; 0x7c
 80051ec:	5c9b      	ldrb	r3, [r3, r2]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e027      	b.n	8005246 <HAL_UARTEx_DisableFifoMode+0x66>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	227c      	movs	r2, #124	; 0x7c
 80051fa:	2101      	movs	r1, #1
 80051fc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2280      	movs	r2, #128	; 0x80
 8005202:	2124      	movs	r1, #36	; 0x24
 8005204:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2101      	movs	r1, #1
 800521a:	438a      	bics	r2, r1
 800521c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	4a0b      	ldr	r2, [pc, #44]	; (8005250 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005222:	4013      	ands	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2280      	movs	r2, #128	; 0x80
 8005238:	2120      	movs	r1, #32
 800523a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	227c      	movs	r2, #124	; 0x7c
 8005240:	2100      	movs	r1, #0
 8005242:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	dfffffff 	.word	0xdfffffff

08005254 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	227c      	movs	r2, #124	; 0x7c
 8005262:	5c9b      	ldrb	r3, [r3, r2]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005268:	2302      	movs	r3, #2
 800526a:	e02e      	b.n	80052ca <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	227c      	movs	r2, #124	; 0x7c
 8005270:	2101      	movs	r1, #1
 8005272:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2280      	movs	r2, #128	; 0x80
 8005278:	2124      	movs	r1, #36	; 0x24
 800527a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2101      	movs	r1, #1
 8005290:	438a      	bics	r2, r1
 8005292:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	08d9      	lsrs	r1, r3, #3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 f854 	bl	8005358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2280      	movs	r2, #128	; 0x80
 80052bc:	2120      	movs	r1, #32
 80052be:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	227c      	movs	r2, #124	; 0x7c
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b004      	add	sp, #16
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	227c      	movs	r2, #124	; 0x7c
 80052e2:	5c9b      	ldrb	r3, [r3, r2]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e02f      	b.n	800534c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	227c      	movs	r2, #124	; 0x7c
 80052f0:	2101      	movs	r1, #1
 80052f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2280      	movs	r2, #128	; 0x80
 80052f8:	2124      	movs	r1, #36	; 0x24
 80052fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2101      	movs	r1, #1
 8005310:	438a      	bics	r2, r1
 8005312:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800531c:	4013      	ands	r3, r2
 800531e:	0019      	movs	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f000 f813 	bl	8005358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	2120      	movs	r1, #32
 8005340:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	227c      	movs	r2, #124	; 0x7c
 8005346:	2100      	movs	r1, #0
 8005348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	b004      	add	sp, #16
 8005352:	bd80      	pop	{r7, pc}
 8005354:	f1ffffff 	.word	0xf1ffffff

08005358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005360:	2314      	movs	r3, #20
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <UARTEx_SetNbDataToProcess+0xcc>)
 8005366:	ca03      	ldmia	r2!, {r0, r1}
 8005368:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800536a:	230c      	movs	r3, #12
 800536c:	18fb      	adds	r3, r7, r3
 800536e:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <UARTEx_SetNbDataToProcess+0xd0>)
 8005370:	ca03      	ldmia	r2!, {r0, r1}
 8005372:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005378:	2b00      	cmp	r3, #0
 800537a:	d108      	bne.n	800538e <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	226a      	movs	r2, #106	; 0x6a
 8005380:	2101      	movs	r1, #1
 8005382:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2268      	movs	r2, #104	; 0x68
 8005388:	2101      	movs	r1, #1
 800538a:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800538c:	e046      	b.n	800541c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800538e:	261f      	movs	r6, #31
 8005390:	19bb      	adds	r3, r7, r6
 8005392:	2208      	movs	r2, #8
 8005394:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005396:	201e      	movs	r0, #30
 8005398:	183b      	adds	r3, r7, r0
 800539a:	2208      	movs	r2, #8
 800539c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	0e5b      	lsrs	r3, r3, #25
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	241d      	movs	r4, #29
 80053aa:	193b      	adds	r3, r7, r4
 80053ac:	2107      	movs	r1, #7
 80053ae:	400a      	ands	r2, r1
 80053b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	0f5b      	lsrs	r3, r3, #29
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	251c      	movs	r5, #28
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	2107      	movs	r1, #7
 80053c2:	400a      	ands	r2, r1
 80053c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80053c6:	183b      	adds	r3, r7, r0
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	197a      	adds	r2, r7, r5
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	2114      	movs	r1, #20
 80053d0:	1879      	adds	r1, r7, r1
 80053d2:	5c8a      	ldrb	r2, [r1, r2]
 80053d4:	435a      	muls	r2, r3
 80053d6:	0010      	movs	r0, r2
 80053d8:	197b      	adds	r3, r7, r5
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	250c      	movs	r5, #12
 80053de:	197a      	adds	r2, r7, r5
 80053e0:	5cd3      	ldrb	r3, [r2, r3]
 80053e2:	0019      	movs	r1, r3
 80053e4:	f7fa ff18 	bl	8000218 <__divsi3>
 80053e8:	0003      	movs	r3, r0
 80053ea:	b299      	uxth	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	226a      	movs	r2, #106	; 0x6a
 80053f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80053f2:	19bb      	adds	r3, r7, r6
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	193a      	adds	r2, r7, r4
 80053f8:	7812      	ldrb	r2, [r2, #0]
 80053fa:	2114      	movs	r1, #20
 80053fc:	1879      	adds	r1, r7, r1
 80053fe:	5c8a      	ldrb	r2, [r1, r2]
 8005400:	435a      	muls	r2, r3
 8005402:	0010      	movs	r0, r2
 8005404:	193b      	adds	r3, r7, r4
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	197a      	adds	r2, r7, r5
 800540a:	5cd3      	ldrb	r3, [r2, r3]
 800540c:	0019      	movs	r1, r3
 800540e:	f7fa ff03 	bl	8000218 <__divsi3>
 8005412:	0003      	movs	r3, r0
 8005414:	b299      	uxth	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2268      	movs	r2, #104	; 0x68
 800541a:	5299      	strh	r1, [r3, r2]
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	b009      	add	sp, #36	; 0x24
 8005422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005424:	080086a8 	.word	0x080086a8
 8005428:	080086b0 	.word	0x080086b0

0800542c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	7c1b      	ldrb	r3, [r3, #16]
 800543a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2238      	movs	r2, #56	; 0x38
 8005440:	5c9b      	ldrb	r3, [r3, r2]
 8005442:	001a      	movs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4353      	muls	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	2100      	movs	r1, #0
 8005458:	0018      	movs	r0, r3
 800545a:	f002 f901 	bl	8007660 <memset>
}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bd80      	pop	{r7, pc}

08005466 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005466:	b590      	push	{r4, r7, lr}
 8005468:	b087      	sub	sp, #28
 800546a:	af02      	add	r7, sp, #8
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	0008      	movs	r0, r1
 8005470:	0011      	movs	r1, r2
 8005472:	1cfb      	adds	r3, r7, #3
 8005474:	1c02      	adds	r2, r0, #0
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	1cbb      	adds	r3, r7, #2
 800547a:	1c0a      	adds	r2, r1, #0
 800547c:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	240f      	movs	r4, #15
 8005484:	193b      	adds	r3, r7, r4
 8005486:	7c12      	ldrb	r2, [r2, #16]
 8005488:	701a      	strb	r2, [r3, #0]
  offset = src_tile_row;
 800548a:	210c      	movs	r1, #12
 800548c:	187b      	adds	r3, r7, r1
 800548e:	1cfa      	adds	r2, r7, #3
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800549a:	193b      	adds	r3, r7, r4
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	0008      	movs	r0, r1
 80054a4:	1879      	adds	r1, r7, r1
 80054a6:	8809      	ldrh	r1, [r1, #0]
 80054a8:	434a      	muls	r2, r1
 80054aa:	801a      	strh	r2, [r3, #0]
  offset *= 8;
 80054ac:	0001      	movs	r1, r0
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	187a      	adds	r2, r7, r1
 80054b2:	8812      	ldrh	r2, [r2, #0]
 80054b4:	00d2      	lsls	r2, r2, #3
 80054b6:	801a      	strh	r2, [r3, #0]
  ptr += offset;
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	18d3      	adds	r3, r2, r3
 80054c0:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80054c2:	193b      	adds	r3, r7, r4
 80054c4:	7819      	ldrb	r1, [r3, #0]
 80054c6:	1cbb      	adds	r3, r7, #2
 80054c8:	781a      	ldrb	r2, [r3, #0]
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	000b      	movs	r3, r1
 80054d2:	2100      	movs	r1, #0
 80054d4:	f001 ffb4 	bl	8007440 <u8x8_DrawTile>
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b005      	add	sp, #20
 80054de:	bd90      	pop	{r4, r7, pc}

080054e0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80054e0:	b5b0      	push	{r4, r5, r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80054e8:	230f      	movs	r3, #15
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]
  src_max = u8g2->tile_buf_height;
 80054f0:	230d      	movs	r3, #13
 80054f2:	18fb      	adds	r3, r7, r3
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	2138      	movs	r1, #56	; 0x38
 80054f8:	5c52      	ldrb	r2, [r2, r1]
 80054fa:	701a      	strb	r2, [r3, #0]
  dest_row = u8g2->tile_curr_row;
 80054fc:	230e      	movs	r3, #14
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	2139      	movs	r1, #57	; 0x39
 8005504:	5c52      	ldrb	r2, [r2, r1]
 8005506:	701a      	strb	r2, [r3, #0]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	230c      	movs	r3, #12
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	7c52      	ldrb	r2, [r2, #17]
 8005512:	701a      	strb	r2, [r3, #0]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8005514:	250e      	movs	r5, #14
 8005516:	197b      	adds	r3, r7, r5
 8005518:	781a      	ldrb	r2, [r3, #0]
 800551a:	210f      	movs	r1, #15
 800551c:	000c      	movs	r4, r1
 800551e:	187b      	adds	r3, r7, r1
 8005520:	7819      	ldrb	r1, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0018      	movs	r0, r3
 8005526:	f7ff ff9e 	bl	8005466 <u8g2_send_tile_row>
    src_row++;
 800552a:	0021      	movs	r1, r4
 800552c:	187b      	adds	r3, r7, r1
 800552e:	781a      	ldrb	r2, [r3, #0]
 8005530:	187b      	adds	r3, r7, r1
 8005532:	3201      	adds	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
    dest_row++;
 8005536:	197b      	adds	r3, r7, r5
 8005538:	781a      	ldrb	r2, [r3, #0]
 800553a:	197b      	adds	r3, r7, r5
 800553c:	3201      	adds	r2, #1
 800553e:	701a      	strb	r2, [r3, #0]
  } while( src_row < src_max && dest_row < dest_max );
 8005540:	187a      	adds	r2, r7, r1
 8005542:	230d      	movs	r3, #13
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d207      	bcs.n	800555e <u8g2_send_buffer+0x7e>
 800554e:	230e      	movs	r3, #14
 8005550:	18fa      	adds	r2, r7, r3
 8005552:	230c      	movs	r3, #12
 8005554:	18fb      	adds	r3, r7, r3
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d3da      	bcc.n	8005514 <u8g2_send_buffer+0x34>
}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b004      	add	sp, #16
 8005564:	bdb0      	pop	{r4, r5, r7, pc}

08005566 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f7ff ffb5 	bl	80054e0 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f001 ffbe 	bl	80074fa <u8x8_RefreshDisplay>
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}

08005586 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	000a      	movs	r2, r1
 8005590:	1cfb      	adds	r3, r7, #3
 8005592:	701a      	strb	r2, [r3, #0]
  u8g2->tile_curr_row = row;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	1cfa      	adds	r2, r7, #3
 8005598:	2139      	movs	r1, #57	; 0x39
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	545a      	strb	r2, [r3, r1]
  u8g2->cb->update_dimension(u8g2);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	0010      	movs	r0, r2
 80055a8:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	0010      	movs	r0, r2
 80055b4:	4798      	blx	r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b002      	add	sp, #8
 80055bc:	bd80      	pop	{r7, pc}

080055be <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2283      	movs	r2, #131	; 0x83
 80055ca:	5c9b      	ldrb	r3, [r3, r2]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <u8g2_FirstPage+0x1a>
  {
    u8g2_ClearBuffer(u8g2);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	0018      	movs	r0, r3
 80055d4:	f7ff ff2a 	bl	800542c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2100      	movs	r1, #0
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff ffd2 	bl	8005586 <u8g2_SetBufferCurrTileRow>
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}

080055ea <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b084      	sub	sp, #16
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0018      	movs	r0, r3
 80055f6:	f7ff ff73 	bl	80054e0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80055fa:	200f      	movs	r0, #15
 80055fc:	183b      	adds	r3, r7, r0
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	2139      	movs	r1, #57	; 0x39
 8005602:	5c52      	ldrb	r2, [r2, r1]
 8005604:	701a      	strb	r2, [r3, #0]
  row += u8g2->tile_buf_height;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2238      	movs	r2, #56	; 0x38
 800560a:	5c99      	ldrb	r1, [r3, r2]
 800560c:	183b      	adds	r3, r7, r0
 800560e:	183a      	adds	r2, r7, r0
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	188a      	adds	r2, r1, r2
 8005614:	701a      	strb	r2, [r3, #0]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	7c5b      	ldrb	r3, [r3, #17]
 800561c:	183a      	adds	r2, r7, r0
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d305      	bcc.n	8005630 <u8g2_NextPage+0x46>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	0018      	movs	r0, r3
 8005628:	f001 ff67 	bl	80074fa <u8x8_RefreshDisplay>
    return 0;
 800562c:	2300      	movs	r3, #0
 800562e:	e011      	b.n	8005654 <u8g2_NextPage+0x6a>
  }
  if ( u8g2->is_auto_page_clear )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2283      	movs	r2, #131	; 0x83
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <u8g2_NextPage+0x58>
  {
    u8g2_ClearBuffer(u8g2);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0018      	movs	r0, r3
 800563e:	f7ff fef5 	bl	800542c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005642:	230f      	movs	r3, #15
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f7ff ff9a 	bl	8005586 <u8g2_SetBufferCurrTileRow>
  return 1;
 8005652:	2301      	movs	r3, #1
}
 8005654:	0018      	movs	r0, r3
 8005656:	46bd      	mov	sp, r7
 8005658:	b004      	add	sp, #16
 800565a:	bd80      	pop	{r7, pc}

0800565c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f7ff ffa9 	bl	80055be <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	0018      	movs	r0, r3
 8005670:	f7ff ffbb 	bl	80055ea <u8g2_NextPage>
 8005674:	1e03      	subs	r3, r0, #0
 8005676:	d1f9      	bne.n	800566c <u8g2_ClearDisplay+0x10>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2100      	movs	r1, #0
 800567c:	0018      	movs	r0, r3
 800567e:	f7ff ff82 	bl	8005586 <u8g2_SetBufferCurrTileRow>
}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b002      	add	sp, #8
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2208      	movs	r2, #8
 8005698:	701a      	strb	r2, [r3, #0]
  return buf;
 800569a:	4b02      	ldr	r3, [pc, #8]	; (80056a4 <u8g2_m_16_8_f+0x18>)
  #endif
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200000b4 	.word	0x200000b4

080056a8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
//  buf = u8g2_m_16_8_2(&tile_buf_height);
//  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
//}
///* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b089      	sub	sp, #36	; 0x24
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
 80056b4:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80056b6:	687c      	ldr	r4, [r7, #4]
 80056b8:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 80056ba:	490f      	ldr	r1, [pc, #60]	; (80056f8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x50>)
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	0023      	movs	r3, r4
 80056c4:	f001 ff82 	bl	80075cc <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80056c8:	2413      	movs	r4, #19
 80056ca:	193b      	adds	r3, r7, r4
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff ffdd 	bl	800568c <u8g2_m_16_8_f>
 80056d2:	0003      	movs	r3, r0
 80056d4:	617b      	str	r3, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80056d6:	193b      	adds	r3, r7, r4
 80056d8:	781a      	ldrb	r2, [r3, #0]
 80056da:	4c08      	ldr	r4, [pc, #32]	; (80056fc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x54>)
 80056dc:	6979      	ldr	r1, [r7, #20]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	0023      	movs	r3, r4
 80056e6:	f001 f9dc 	bl	8006aa2 <u8g2_SetupBuffer>
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b007      	add	sp, #28
 80056f0:	bd90      	pop	{r4, r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	08007041 	.word	0x08007041
 80056f8:	0800731d 	.word	0x0800731d
 80056fc:	080068ab 	.word	0x080068ab

08005700 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	000a      	movs	r2, r1
 800570a:	1cfb      	adds	r3, r7, #3
 800570c:	701a      	strb	r2, [r3, #0]
  font += offset;
 800570e:	1cfb      	adds	r3, r7, #3
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	18d3      	adds	r3, r2, r3
 8005716:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	781b      	ldrb	r3, [r3, #0]
}
 800571c:	0018      	movs	r0, r3
 800571e:	46bd      	mov	sp, r7
 8005720:	b002      	add	sp, #8
 8005722:	bd80      	pop	{r7, pc}

08005724 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	000a      	movs	r2, r1
 800572e:	1cfb      	adds	r3, r7, #3
 8005730:	701a      	strb	r2, [r3, #0]
    uint16_t pos;
    font += offset;
 8005732:	1cfb      	adds	r3, r7, #3
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	18d3      	adds	r3, r2, r3
 800573a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	200e      	movs	r0, #14
 8005742:	183b      	adds	r3, r7, r0
 8005744:	801a      	strh	r2, [r3, #0]
    font++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3301      	adds	r3, #1
 800574a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800574c:	183b      	adds	r3, r7, r0
 800574e:	183a      	adds	r2, r7, r0
 8005750:	8812      	ldrh	r2, [r2, #0]
 8005752:	0212      	lsls	r2, r2, #8
 8005754:	801a      	strh	r2, [r3, #0]
    pos += u8x8_pgm_read( font);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b299      	uxth	r1, r3
 800575c:	183b      	adds	r3, r7, r0
 800575e:	183a      	adds	r2, r7, r0
 8005760:	8812      	ldrh	r2, [r2, #0]
 8005762:	188a      	adds	r2, r1, r2
 8005764:	801a      	strh	r2, [r3, #0]
    return pos;
 8005766:	183b      	adds	r3, r7, r0
 8005768:	881b      	ldrh	r3, [r3, #0]
}
 800576a:	0018      	movs	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	b004      	add	sp, #16
 8005770:	bd80      	pop	{r7, pc}

08005772 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2100      	movs	r1, #0
 8005780:	0018      	movs	r0, r3
 8005782:	f7ff ffbd 	bl	8005700 <u8g2_font_get_byte>
 8005786:	0003      	movs	r3, r0
 8005788:	001a      	movs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff ffb4 	bl	8005700 <u8g2_font_get_byte>
 8005798:	0003      	movs	r3, r0
 800579a:	001a      	movs	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2102      	movs	r1, #2
 80057a4:	0018      	movs	r0, r3
 80057a6:	f7ff ffab 	bl	8005700 <u8g2_font_get_byte>
 80057aa:	0003      	movs	r3, r0
 80057ac:	001a      	movs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2103      	movs	r1, #3
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff ffa2 	bl	8005700 <u8g2_font_get_byte>
 80057bc:	0003      	movs	r3, r0
 80057be:	001a      	movs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2104      	movs	r1, #4
 80057c8:	0018      	movs	r0, r3
 80057ca:	f7ff ff99 	bl	8005700 <u8g2_font_get_byte>
 80057ce:	0003      	movs	r3, r0
 80057d0:	001a      	movs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2105      	movs	r1, #5
 80057da:	0018      	movs	r0, r3
 80057dc:	f7ff ff90 	bl	8005700 <u8g2_font_get_byte>
 80057e0:	0003      	movs	r3, r0
 80057e2:	001a      	movs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2106      	movs	r1, #6
 80057ec:	0018      	movs	r0, r3
 80057ee:	f7ff ff87 	bl	8005700 <u8g2_font_get_byte>
 80057f2:	0003      	movs	r3, r0
 80057f4:	001a      	movs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2107      	movs	r1, #7
 80057fe:	0018      	movs	r0, r3
 8005800:	f7ff ff7e 	bl	8005700 <u8g2_font_get_byte>
 8005804:	0003      	movs	r3, r0
 8005806:	001a      	movs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2108      	movs	r1, #8
 8005810:	0018      	movs	r0, r3
 8005812:	f7ff ff75 	bl	8005700 <u8g2_font_get_byte>
 8005816:	0003      	movs	r3, r0
 8005818:	001a      	movs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2109      	movs	r1, #9
 8005822:	0018      	movs	r0, r3
 8005824:	f7ff ff6c 	bl	8005700 <u8g2_font_get_byte>
 8005828:	0003      	movs	r3, r0
 800582a:	b25a      	sxtb	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	210a      	movs	r1, #10
 8005834:	0018      	movs	r0, r3
 8005836:	f7ff ff63 	bl	8005700 <u8g2_font_get_byte>
 800583a:	0003      	movs	r3, r0
 800583c:	b25a      	sxtb	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	210b      	movs	r1, #11
 8005846:	0018      	movs	r0, r3
 8005848:	f7ff ff5a 	bl	8005700 <u8g2_font_get_byte>
 800584c:	0003      	movs	r3, r0
 800584e:	b25a      	sxtb	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	210c      	movs	r1, #12
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff ff51 	bl	8005700 <u8g2_font_get_byte>
 800585e:	0003      	movs	r3, r0
 8005860:	b25a      	sxtb	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	210d      	movs	r1, #13
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff48 	bl	8005700 <u8g2_font_get_byte>
 8005870:	0003      	movs	r3, r0
 8005872:	b25a      	sxtb	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	210e      	movs	r1, #14
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff ff3f 	bl	8005700 <u8g2_font_get_byte>
 8005882:	0003      	movs	r3, r0
 8005884:	b25a      	sxtb	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	210f      	movs	r1, #15
 800588e:	0018      	movs	r0, r3
 8005890:	f7ff ff36 	bl	8005700 <u8g2_font_get_byte>
 8005894:	0003      	movs	r3, r0
 8005896:	b25a      	sxtb	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2110      	movs	r1, #16
 80058a0:	0018      	movs	r0, r3
 80058a2:	f7ff ff2d 	bl	8005700 <u8g2_font_get_byte>
 80058a6:	0003      	movs	r3, r0
 80058a8:	b25a      	sxtb	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2111      	movs	r1, #17
 80058b2:	0018      	movs	r0, r3
 80058b4:	f7ff ff36 	bl	8005724 <u8g2_font_get_word>
 80058b8:	0003      	movs	r3, r0
 80058ba:	001a      	movs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2113      	movs	r1, #19
 80058c4:	0018      	movs	r0, r3
 80058c6:	f7ff ff2d 	bl	8005724 <u8g2_font_get_word>
 80058ca:	0003      	movs	r3, r0
 80058cc:	001a      	movs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2115      	movs	r1, #21
 80058d6:	0018      	movs	r0, r3
 80058d8:	f7ff ff24 	bl	8005724 <u8g2_font_get_word>
 80058dc:	0003      	movs	r3, r0
 80058de:	001a      	movs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	82da      	strh	r2, [r3, #22]
#endif
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}

080058ec <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	000a      	movs	r2, r1
 80058f6:	1cfb      	adds	r3, r7, #3
 80058f8:	701a      	strb	r2, [r3, #0]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80058fa:	210d      	movs	r1, #13
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	7a92      	ldrb	r2, [r2, #10]
 8005902:	701a      	strb	r2, [r3, #0]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	200f      	movs	r0, #15
 800590a:	183b      	adds	r3, r7, r0
 800590c:	7812      	ldrb	r2, [r2, #0]
 800590e:	701a      	strb	r2, [r3, #0]
  
  val >>= bit_pos;
 8005910:	183b      	adds	r3, r7, r0
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	187b      	adds	r3, r7, r1
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	411a      	asrs	r2, r3
 800591a:	183b      	adds	r3, r7, r0
 800591c:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt = bit_pos;
 800591e:	200e      	movs	r0, #14
 8005920:	183b      	adds	r3, r7, r0
 8005922:	187a      	adds	r2, r7, r1
 8005924:	7812      	ldrb	r2, [r2, #0]
 8005926:	701a      	strb	r2, [r3, #0]
  bit_pos_plus_cnt += cnt;
 8005928:	183b      	adds	r3, r7, r0
 800592a:	1839      	adds	r1, r7, r0
 800592c:	1cfa      	adds	r2, r7, #3
 800592e:	7809      	ldrb	r1, [r1, #0]
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	188a      	adds	r2, r1, r2
 8005934:	701a      	strb	r2, [r3, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8005936:	183b      	adds	r3, r7, r0
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b07      	cmp	r3, #7
 800593c:	d927      	bls.n	800598e <u8g2_font_decode_get_unsigned_bits+0xa2>
  {
    uint8_t s = 8;
 800593e:	200c      	movs	r0, #12
 8005940:	183b      	adds	r3, r7, r0
 8005942:	2208      	movs	r2, #8
 8005944:	701a      	strb	r2, [r3, #0]
    s -= bit_pos;
 8005946:	183b      	adds	r3, r7, r0
 8005948:	1839      	adds	r1, r7, r0
 800594a:	220d      	movs	r2, #13
 800594c:	18ba      	adds	r2, r7, r2
 800594e:	7809      	ldrb	r1, [r1, #0]
 8005950:	7812      	ldrb	r2, [r2, #0]
 8005952:	1a8a      	subs	r2, r1, r2
 8005954:	701a      	strb	r2, [r3, #0]
    f->decode_ptr++;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	1c5a      	adds	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	001a      	movs	r2, r3
 8005968:	183b      	adds	r3, r7, r0
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	409a      	lsls	r2, r3
 800596e:	0013      	movs	r3, r2
 8005970:	b25a      	sxtb	r2, r3
 8005972:	210f      	movs	r1, #15
 8005974:	187b      	adds	r3, r7, r1
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	b25b      	sxtb	r3, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	b25a      	sxtb	r2, r3
 800597e:	187b      	adds	r3, r7, r1
 8005980:	701a      	strb	r2, [r3, #0]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8005982:	220e      	movs	r2, #14
 8005984:	18bb      	adds	r3, r7, r2
 8005986:	18ba      	adds	r2, r7, r2
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	3a08      	subs	r2, #8
 800598c:	701a      	strb	r2, [r3, #0]
  }
  val &= (1U<<cnt)-1;
 800598e:	1cfb      	adds	r3, r7, #3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	4252      	negs	r2, r2
 8005996:	409a      	lsls	r2, r3
 8005998:	0013      	movs	r3, r2
 800599a:	b2db      	uxtb	r3, r3
 800599c:	43db      	mvns	r3, r3
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	200f      	movs	r0, #15
 80059a2:	183b      	adds	r3, r7, r0
 80059a4:	1839      	adds	r1, r7, r0
 80059a6:	7809      	ldrb	r1, [r1, #0]
 80059a8:	400a      	ands	r2, r1
 80059aa:	701a      	strb	r2, [r3, #0]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	220e      	movs	r2, #14
 80059b0:	18ba      	adds	r2, r7, r2
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	729a      	strb	r2, [r3, #10]
  return val;
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	781b      	ldrb	r3, [r3, #0]
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b004      	add	sp, #16
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	000a      	movs	r2, r1
 80059cc:	1cfb      	adds	r3, r7, #3
 80059ce:	701a      	strb	r2, [r3, #0]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80059d0:	1cfb      	adds	r3, r7, #3
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0011      	movs	r1, r2
 80059d8:	0018      	movs	r0, r3
 80059da:	f7ff ff87 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 80059de:	0003      	movs	r3, r0
 80059e0:	001a      	movs	r2, r3
 80059e2:	210f      	movs	r1, #15
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	701a      	strb	r2, [r3, #0]
  d = 1;
 80059e8:	200e      	movs	r0, #14
 80059ea:	183b      	adds	r3, r7, r0
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
  cnt--;
 80059f0:	1cfb      	adds	r3, r7, #3
 80059f2:	781a      	ldrb	r2, [r3, #0]
 80059f4:	1cfb      	adds	r3, r7, #3
 80059f6:	3a01      	subs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
  d <<= cnt;
 80059fa:	183b      	adds	r3, r7, r0
 80059fc:	2200      	movs	r2, #0
 80059fe:	569a      	ldrsb	r2, [r3, r2]
 8005a00:	1cfb      	adds	r3, r7, #3
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	409a      	lsls	r2, r3
 8005a06:	183b      	adds	r3, r7, r0
 8005a08:	701a      	strb	r2, [r3, #0]
  v -= d;
 8005a0a:	187b      	adds	r3, r7, r1
 8005a0c:	781a      	ldrb	r2, [r3, #0]
 8005a0e:	183b      	adds	r3, r7, r0
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	701a      	strb	r2, [r3, #0]
  return v;
 8005a1a:	187b      	adds	r3, r7, r1
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b25b      	sxtb	r3, r3
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8005a20:	0018      	movs	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	b004      	add	sp, #16
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8005a28:	b5b0      	push	{r4, r5, r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	0005      	movs	r5, r0
 8005a30:	000c      	movs	r4, r1
 8005a32:	0010      	movs	r0, r2
 8005a34:	0019      	movs	r1, r3
 8005a36:	1dfb      	adds	r3, r7, #7
 8005a38:	1c2a      	adds	r2, r5, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	1dbb      	adds	r3, r7, #6
 8005a3e:	1c22      	adds	r2, r4, #0
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	1d7b      	adds	r3, r7, #5
 8005a44:	1c02      	adds	r2, r0, #0
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	1c0a      	adds	r2, r1, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
  switch(dir)
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d00b      	beq.n	8005a6e <u8g2_add_vector_y+0x46>
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d011      	beq.n	8005a7e <u8g2_add_vector_y+0x56>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d117      	bne.n	8005a8e <u8g2_add_vector_y+0x66>
  {
    case 0:
      dy += y;
 8005a5e:	1d7b      	adds	r3, r7, #5
 8005a60:	7819      	ldrb	r1, [r3, #0]
 8005a62:	1dfb      	adds	r3, r7, #7
 8005a64:	1dfa      	adds	r2, r7, #7
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	188a      	adds	r2, r1, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
      break;
 8005a6c:	e017      	b.n	8005a9e <u8g2_add_vector_y+0x76>
    case 1:
      dy += x;
 8005a6e:	1dbb      	adds	r3, r7, #6
 8005a70:	7819      	ldrb	r1, [r3, #0]
 8005a72:	1dfb      	adds	r3, r7, #7
 8005a74:	1dfa      	adds	r2, r7, #7
 8005a76:	7812      	ldrb	r2, [r2, #0]
 8005a78:	188a      	adds	r2, r1, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
      break;
 8005a7c:	e00f      	b.n	8005a9e <u8g2_add_vector_y+0x76>
    case 2:
      dy -= y;
 8005a7e:	1d7b      	adds	r3, r7, #5
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	1df9      	adds	r1, r7, #7
 8005a86:	7809      	ldrb	r1, [r1, #0]
 8005a88:	1a8a      	subs	r2, r1, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
      break;
 8005a8c:	e007      	b.n	8005a9e <u8g2_add_vector_y+0x76>
    default:
      dy -= x;
 8005a8e:	1dbb      	adds	r3, r7, #6
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	1dfb      	adds	r3, r7, #7
 8005a94:	1df9      	adds	r1, r7, #7
 8005a96:	7809      	ldrb	r1, [r1, #0]
 8005a98:	1a8a      	subs	r2, r1, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
      break;      
 8005a9c:	46c0      	nop			; (mov r8, r8)
  }
  return dy;
 8005a9e:	1dfb      	adds	r3, r7, #7
 8005aa0:	781b      	ldrb	r3, [r3, #0]
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b002      	add	sp, #8
 8005aa8:	bdb0      	pop	{r4, r5, r7, pc}

08005aaa <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8005aaa:	b5b0      	push	{r4, r5, r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	0005      	movs	r5, r0
 8005ab2:	000c      	movs	r4, r1
 8005ab4:	0010      	movs	r0, r2
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	1dfb      	adds	r3, r7, #7
 8005aba:	1c2a      	adds	r2, r5, #0
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	1dbb      	adds	r3, r7, #6
 8005ac0:	1c22      	adds	r2, r4, #0
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	1d7b      	adds	r3, r7, #5
 8005ac6:	1c02      	adds	r2, r0, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	1d3b      	adds	r3, r7, #4
 8005acc:	1c0a      	adds	r2, r1, #0
 8005ace:	701a      	strb	r2, [r3, #0]
  switch(dir)
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d00b      	beq.n	8005af0 <u8g2_add_vector_x+0x46>
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d011      	beq.n	8005b00 <u8g2_add_vector_x+0x56>
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d117      	bne.n	8005b10 <u8g2_add_vector_x+0x66>
  {
    case 0:
      dx += x;
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	7819      	ldrb	r1, [r3, #0]
 8005ae4:	1dfb      	adds	r3, r7, #7
 8005ae6:	1dfa      	adds	r2, r7, #7
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	188a      	adds	r2, r1, r2
 8005aec:	701a      	strb	r2, [r3, #0]
      break;
 8005aee:	e017      	b.n	8005b20 <u8g2_add_vector_x+0x76>
    case 1:
      dx -= y;
 8005af0:	1d7b      	adds	r3, r7, #5
 8005af2:	781a      	ldrb	r2, [r3, #0]
 8005af4:	1dfb      	adds	r3, r7, #7
 8005af6:	1df9      	adds	r1, r7, #7
 8005af8:	7809      	ldrb	r1, [r1, #0]
 8005afa:	1a8a      	subs	r2, r1, r2
 8005afc:	701a      	strb	r2, [r3, #0]
      break;
 8005afe:	e00f      	b.n	8005b20 <u8g2_add_vector_x+0x76>
    case 2:
      dx -= x;
 8005b00:	1dbb      	adds	r3, r7, #6
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	1dfb      	adds	r3, r7, #7
 8005b06:	1df9      	adds	r1, r7, #7
 8005b08:	7809      	ldrb	r1, [r1, #0]
 8005b0a:	1a8a      	subs	r2, r1, r2
 8005b0c:	701a      	strb	r2, [r3, #0]
      break;
 8005b0e:	e007      	b.n	8005b20 <u8g2_add_vector_x+0x76>
    default:
      dx += y;
 8005b10:	1d7b      	adds	r3, r7, #5
 8005b12:	7819      	ldrb	r1, [r3, #0]
 8005b14:	1dfb      	adds	r3, r7, #7
 8005b16:	1dfa      	adds	r2, r7, #7
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	188a      	adds	r2, r1, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
      break;      
 8005b1e:	46c0      	nop			; (mov r8, r8)
  }
  return dx;
 8005b20:	1dfb      	adds	r3, r7, #7
 8005b22:	781b      	ldrb	r3, [r3, #0]
}
 8005b24:	0018      	movs	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	b002      	add	sp, #8
 8005b2a:	bdb0      	pop	{r4, r5, r7, pc}

08005b2c <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8005b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b2e:	b089      	sub	sp, #36	; 0x24
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	0008      	movs	r0, r1
 8005b36:	0011      	movs	r1, r2
 8005b38:	1cfb      	adds	r3, r7, #3
 8005b3a:	1c02      	adds	r2, r0, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	1cbb      	adds	r3, r7, #2
 8005b40:	1c0a      	adds	r2, r1, #0
 8005b42:	701a      	strb	r2, [r3, #0]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3354      	adds	r3, #84	; 0x54
 8005b48:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005b4a:	2317      	movs	r3, #23
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	1cfa      	adds	r2, r7, #3
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	701a      	strb	r2, [r3, #0]
  
  /* get the local position */
  lx = decode->x;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	2206      	movs	r2, #6
 8005b58:	569a      	ldrsb	r2, [r3, r2]
 8005b5a:	2315      	movs	r3, #21
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	701a      	strb	r2, [r3, #0]
  ly = decode->y;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2207      	movs	r2, #7
 8005b64:	569a      	ldrsb	r2, [r3, r2]
 8005b66:	2314      	movs	r3, #20
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	701a      	strb	r2, [r3, #0]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	569a      	ldrsb	r2, [r3, r2]
 8005b72:	200f      	movs	r0, #15
 8005b74:	183b      	adds	r3, r7, r0
 8005b76:	701a      	strb	r2, [r3, #0]
    rem -= lx;
 8005b78:	183b      	adds	r3, r7, r0
 8005b7a:	1839      	adds	r1, r7, r0
 8005b7c:	2215      	movs	r2, #21
 8005b7e:	18ba      	adds	r2, r7, r2
 8005b80:	7809      	ldrb	r1, [r1, #0]
 8005b82:	7812      	ldrb	r2, [r2, #0]
 8005b84:	1a8a      	subs	r2, r1, r2
 8005b86:	701a      	strb	r2, [r3, #0]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8005b88:	2316      	movs	r3, #22
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	183a      	adds	r2, r7, r0
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	701a      	strb	r2, [r3, #0]
    if ( cnt < rem )
 8005b92:	2317      	movs	r3, #23
 8005b94:	18fa      	adds	r2, r7, r3
 8005b96:	183b      	adds	r3, r7, r0
 8005b98:	7812      	ldrb	r2, [r2, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d205      	bcs.n	8005bac <u8g2_font_decode_len+0x80>
      current = cnt;
 8005ba0:	2316      	movs	r3, #22
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	2217      	movs	r2, #23
 8005ba6:	18ba      	adds	r2, r7, r2
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	701a      	strb	r2, [r3, #0]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8005bac:	200e      	movs	r0, #14
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	7912      	ldrb	r2, [r2, #4]
 8005bb4:	701a      	strb	r2, [r3, #0]
    y = decode->target_y;
 8005bb6:	260d      	movs	r6, #13
 8005bb8:	19bb      	adds	r3, r7, r6
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	7952      	ldrb	r2, [r2, #5]
 8005bbe:	701a      	strb	r2, [r3, #0]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8005bc0:	2315      	movs	r3, #21
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	5659      	ldrsb	r1, [r3, r1]
 8005bc8:	2214      	movs	r2, #20
 8005bca:	18bb      	adds	r3, r7, r2
 8005bcc:	2200      	movs	r2, #0
 8005bce:	569a      	ldrsb	r2, [r3, r2]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	7b9d      	ldrb	r5, [r3, #14]
 8005bd4:	183c      	adds	r4, r7, r0
 8005bd6:	183b      	adds	r3, r7, r0
 8005bd8:	7818      	ldrb	r0, [r3, #0]
 8005bda:	002b      	movs	r3, r5
 8005bdc:	f7ff ff65 	bl	8005aaa <u8g2_add_vector_x>
 8005be0:	0003      	movs	r3, r0
 8005be2:	7023      	strb	r3, [r4, #0]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8005be4:	2315      	movs	r3, #21
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	2100      	movs	r1, #0
 8005bea:	5659      	ldrsb	r1, [r3, r1]
 8005bec:	2214      	movs	r2, #20
 8005bee:	18bb      	adds	r3, r7, r2
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	569a      	ldrsb	r2, [r3, r2]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	7b9d      	ldrb	r5, [r3, #14]
 8005bf8:	19bc      	adds	r4, r7, r6
 8005bfa:	19bb      	adds	r3, r7, r6
 8005bfc:	7818      	ldrb	r0, [r3, #0]
 8005bfe:	002b      	movs	r3, r5
 8005c00:	f7ff ff12 	bl	8005a28 <u8g2_add_vector_y>
 8005c04:	0003      	movs	r3, r0
 8005c06:	7023      	strb	r3, [r4, #0]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8005c08:	1cbb      	adds	r3, r7, #2
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d016      	beq.n	8005c3e <u8g2_font_decode_len+0x112>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	7b19      	ldrb	r1, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2282      	movs	r2, #130	; 0x82
 8005c18:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	7b9b      	ldrb	r3, [r3, #14]
 8005c1e:	2216      	movs	r2, #22
 8005c20:	18ba      	adds	r2, r7, r2
 8005c22:	7815      	ldrb	r5, [r2, #0]
 8005c24:	220d      	movs	r2, #13
 8005c26:	18ba      	adds	r2, r7, r2
 8005c28:	7814      	ldrb	r4, [r2, #0]
 8005c2a:	220e      	movs	r2, #14
 8005c2c:	18ba      	adds	r2, r7, r2
 8005c2e:	7811      	ldrb	r1, [r2, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	002b      	movs	r3, r5
 8005c36:	0022      	movs	r2, r4
 8005c38:	f000 fd1e 	bl	8006678 <u8g2_DrawHVLine>
 8005c3c:	e019      	b.n	8005c72 <u8g2_font_decode_len+0x146>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	7adb      	ldrb	r3, [r3, #11]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d115      	bne.n	8005c72 <u8g2_font_decode_len+0x146>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	7b59      	ldrb	r1, [r3, #13]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2282      	movs	r2, #130	; 0x82
 8005c4e:	5499      	strb	r1, [r3, r2]
      u8g2_DrawHVLine(u8g2, 
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	7b9b      	ldrb	r3, [r3, #14]
 8005c54:	2216      	movs	r2, #22
 8005c56:	18ba      	adds	r2, r7, r2
 8005c58:	7815      	ldrb	r5, [r2, #0]
 8005c5a:	220d      	movs	r2, #13
 8005c5c:	18ba      	adds	r2, r7, r2
 8005c5e:	7814      	ldrb	r4, [r2, #0]
 8005c60:	220e      	movs	r2, #14
 8005c62:	18ba      	adds	r2, r7, r2
 8005c64:	7811      	ldrb	r1, [r2, #0]
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	002b      	movs	r3, r5
 8005c6c:	0022      	movs	r2, r4
 8005c6e:	f000 fd03 	bl	8006678 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8005c72:	2317      	movs	r3, #23
 8005c74:	18fa      	adds	r2, r7, r3
 8005c76:	230f      	movs	r3, #15
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	7812      	ldrb	r2, [r2, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d313      	bcc.n	8005caa <u8g2_font_decode_len+0x17e>
      break;
    cnt -= rem;
 8005c82:	2217      	movs	r2, #23
 8005c84:	18bb      	adds	r3, r7, r2
 8005c86:	18b9      	adds	r1, r7, r2
 8005c88:	220f      	movs	r2, #15
 8005c8a:	18ba      	adds	r2, r7, r2
 8005c8c:	7809      	ldrb	r1, [r1, #0]
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	1a8a      	subs	r2, r1, r2
 8005c92:	701a      	strb	r2, [r3, #0]
    lx = 0;
 8005c94:	2315      	movs	r3, #21
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
    ly++;
 8005c9c:	2114      	movs	r1, #20
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	187b      	adds	r3, r7, r1
 8005ca4:	3201      	adds	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]
    rem = decode->glyph_width;
 8005ca8:	e760      	b.n	8005b6c <u8g2_font_decode_len+0x40>
      break;
 8005caa:	46c0      	nop			; (mov r8, r8)
  }
  lx += cnt;
 8005cac:	2015      	movs	r0, #21
 8005cae:	183b      	adds	r3, r7, r0
 8005cb0:	1839      	adds	r1, r7, r0
 8005cb2:	2217      	movs	r2, #23
 8005cb4:	18ba      	adds	r2, r7, r2
 8005cb6:	7809      	ldrb	r1, [r1, #0]
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	188a      	adds	r2, r1, r2
 8005cbc:	701a      	strb	r2, [r3, #0]
  
  decode->x = lx;
 8005cbe:	183b      	adds	r3, r7, r0
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	569a      	ldrsb	r2, [r3, r2]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8005cc8:	2314      	movs	r3, #20
 8005cca:	18fb      	adds	r3, r7, r3
 8005ccc:	2200      	movs	r2, #0
 8005cce:	569a      	ldrsb	r2, [r3, r2]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	71da      	strb	r2, [r3, #7]
  
}
 8005cd4:	46c0      	nop			; (mov r8, r8)
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	b007      	add	sp, #28
 8005cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cdc <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3354      	adds	r3, #84	; 0x54
 8005cea:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2268      	movs	r2, #104	; 0x68
 8005cfc:	5c9a      	ldrb	r2, [r3, r2]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	0011      	movs	r1, r2
 8005d02:	0018      	movs	r0, r3
 8005d04:	f7ff fdf2 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	b25a      	sxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2269      	movs	r2, #105	; 0x69
 8005d14:	5c9a      	ldrb	r2, [r3, r2]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0011      	movs	r1, r2
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f7ff fde6 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 8005d20:	0003      	movs	r3, r0
 8005d22:	b25a      	sxtb	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2282      	movs	r2, #130	; 0x82
 8005d2c:	5c9a      	ldrb	r2, [r3, r2]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	7b1b      	ldrb	r3, [r3, #12]
 8005d36:	425a      	negs	r2, r3
 8005d38:	4153      	adcs	r3, r2
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	735a      	strb	r2, [r3, #13]
}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b004      	add	sp, #16
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d4c:	b089      	sub	sp, #36	; 0x24
 8005d4e:	af02      	add	r7, sp, #8
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3354      	adds	r3, #84	; 0x54
 8005d58:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	0011      	movs	r1, r2
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7ff ffbb 	bl	8005cdc <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8005d66:	230f      	movs	r3, #15
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	215d      	movs	r1, #93	; 0x5d
 8005d6e:	5c52      	ldrb	r2, [r2, r1]
 8005d70:	701a      	strb	r2, [r3, #0]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	226a      	movs	r2, #106	; 0x6a
 8005d76:	5c9a      	ldrb	r2, [r3, r2]
 8005d78:	230e      	movs	r3, #14
 8005d7a:	18fc      	adds	r4, r7, r3
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	0011      	movs	r1, r2
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7ff fe1e 	bl	80059c2 <u8g2_font_decode_get_signed_bits>
 8005d86:	0003      	movs	r3, r0
 8005d88:	7023      	strb	r3, [r4, #0]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	226b      	movs	r2, #107	; 0x6b
 8005d8e:	5c9a      	ldrb	r2, [r3, r2]
 8005d90:	230d      	movs	r3, #13
 8005d92:	18fc      	adds	r4, r7, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	0011      	movs	r1, r2
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7ff fe12 	bl	80059c2 <u8g2_font_decode_get_signed_bits>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	7023      	strb	r3, [r4, #0]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	226c      	movs	r2, #108	; 0x6c
 8005da6:	5c9a      	ldrb	r2, [r3, r2]
 8005da8:	230c      	movs	r3, #12
 8005daa:	18fc      	adds	r4, r7, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	0011      	movs	r1, r2
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7ff fe06 	bl	80059c2 <u8g2_font_decode_get_signed_bits>
 8005db6:	0003      	movs	r3, r0
 8005db8:	7023      	strb	r3, [r4, #0]
  
  if ( decode->glyph_width > 0 )
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	7a1b      	ldrb	r3, [r3, #8]
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dc00      	bgt.n	8005dc6 <u8g2_font_decode_glyph+0x7c>
 8005dc4:	e12b      	b.n	800601e <u8g2_font_decode_glyph+0x2d4>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	7918      	ldrb	r0, [r3, #4]
 8005dca:	250f      	movs	r5, #15
 8005dcc:	197b      	adds	r3, r7, r5
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	260d      	movs	r6, #13
 8005dd2:	19bb      	adds	r3, r7, r6
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	425b      	negs	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	b25a      	sxtb	r2, r3
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	7b9c      	ldrb	r4, [r3, #14]
 8005de4:	230e      	movs	r3, #14
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	2100      	movs	r1, #0
 8005dea:	5659      	ldrsb	r1, [r3, r1]
 8005dec:	0023      	movs	r3, r4
 8005dee:	f7ff fe5c 	bl	8005aaa <u8g2_add_vector_x>
 8005df2:	0003      	movs	r3, r0
 8005df4:	001a      	movs	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	7958      	ldrb	r0, [r3, #5]
 8005dfe:	197b      	adds	r3, r7, r5
 8005e00:	781a      	ldrb	r2, [r3, #0]
 8005e02:	19bb      	adds	r3, r7, r6
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	18d3      	adds	r3, r2, r3
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	425b      	negs	r3, r3
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	b25a      	sxtb	r2, r3
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	7b9c      	ldrb	r4, [r3, #14]
 8005e14:	230e      	movs	r3, #14
 8005e16:	18fb      	adds	r3, r7, r3
 8005e18:	2100      	movs	r1, #0
 8005e1a:	5659      	ldrsb	r1, [r3, r1]
 8005e1c:	0023      	movs	r3, r4
 8005e1e:	f7ff fe03 	bl	8005a28 <u8g2_add_vector_y>
 8005e22:	0003      	movs	r3, r0
 8005e24:	001a      	movs	r2, r3
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8005e2a:	2117      	movs	r1, #23
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	7912      	ldrb	r2, [r2, #4]
 8005e32:	701a      	strb	r2, [r3, #0]
      y0 = decode->target_y;
 8005e34:	2015      	movs	r0, #21
 8005e36:	183b      	adds	r3, r7, r0
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	7952      	ldrb	r2, [r2, #5]
 8005e3c:	701a      	strb	r2, [r3, #0]
      x1 = x0;
 8005e3e:	2316      	movs	r3, #22
 8005e40:	18fb      	adds	r3, r7, r3
 8005e42:	187a      	adds	r2, r7, r1
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
      y1 = y0;
 8005e48:	2314      	movs	r3, #20
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	183a      	adds	r2, r7, r0
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	7b9b      	ldrb	r3, [r3, #14]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d01c      	beq.n	8005e94 <u8g2_font_decode_glyph+0x14a>
 8005e5a:	dc02      	bgt.n	8005e62 <u8g2_font_decode_glyph+0x118>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <u8g2_font_decode_glyph+0x122>
 8005e60:	e080      	b.n	8005f64 <u8g2_font_decode_glyph+0x21a>
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d035      	beq.n	8005ed2 <u8g2_font_decode_glyph+0x188>
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d05d      	beq.n	8005f26 <u8g2_font_decode_glyph+0x1dc>
 8005e6a:	e07b      	b.n	8005f64 <u8g2_font_decode_glyph+0x21a>
      {
	case 0:
	    x1 += decode->glyph_width;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	7a1b      	ldrb	r3, [r3, #8]
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	b2d9      	uxtb	r1, r3
 8005e74:	2216      	movs	r2, #22
 8005e76:	18bb      	adds	r3, r7, r2
 8005e78:	18ba      	adds	r2, r7, r2
 8005e7a:	7812      	ldrb	r2, [r2, #0]
 8005e7c:	188a      	adds	r2, r1, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
	    y1 += h;
 8005e80:	230f      	movs	r3, #15
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	7819      	ldrb	r1, [r3, #0]
 8005e86:	2214      	movs	r2, #20
 8005e88:	18bb      	adds	r3, r7, r2
 8005e8a:	18ba      	adds	r2, r7, r2
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	188a      	adds	r2, r1, r2
 8005e90:	701a      	strb	r2, [r3, #0]
	    break;
 8005e92:	e067      	b.n	8005f64 <u8g2_font_decode_glyph+0x21a>
	case 1:
	    x0 -= h;
 8005e94:	230f      	movs	r3, #15
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	781a      	ldrb	r2, [r3, #0]
 8005e9a:	2017      	movs	r0, #23
 8005e9c:	183b      	adds	r3, r7, r0
 8005e9e:	1839      	adds	r1, r7, r0
 8005ea0:	7809      	ldrb	r1, [r1, #0]
 8005ea2:	1a8a      	subs	r2, r1, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005ea6:	183b      	adds	r3, r7, r0
 8005ea8:	781a      	ldrb	r2, [r3, #0]
 8005eaa:	183b      	adds	r3, r7, r0
 8005eac:	3201      	adds	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
	    x1++;
 8005eb0:	2116      	movs	r1, #22
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	3201      	adds	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
	    y1 += decode->glyph_width;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	7a1b      	ldrb	r3, [r3, #8]
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	b2d9      	uxtb	r1, r3
 8005ec4:	2214      	movs	r2, #20
 8005ec6:	18bb      	adds	r3, r7, r2
 8005ec8:	18ba      	adds	r2, r7, r2
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	188a      	adds	r2, r1, r2
 8005ece:	701a      	strb	r2, [r3, #0]
	    break;
 8005ed0:	e048      	b.n	8005f64 <u8g2_font_decode_glyph+0x21a>
	case 2:
	    x0 -= decode->glyph_width;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	7a1b      	ldrb	r3, [r3, #8]
 8005ed6:	b25b      	sxtb	r3, r3
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	2017      	movs	r0, #23
 8005edc:	183b      	adds	r3, r7, r0
 8005ede:	1839      	adds	r1, r7, r0
 8005ee0:	7809      	ldrb	r1, [r1, #0]
 8005ee2:	1a8a      	subs	r2, r1, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005ee6:	183b      	adds	r3, r7, r0
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	183b      	adds	r3, r7, r0
 8005eec:	3201      	adds	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
	    x1++;
 8005ef0:	2116      	movs	r1, #22
 8005ef2:	187b      	adds	r3, r7, r1
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	3201      	adds	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
	    y0 -= h;
 8005efc:	230f      	movs	r3, #15
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	2015      	movs	r0, #21
 8005f04:	183b      	adds	r3, r7, r0
 8005f06:	1839      	adds	r1, r7, r0
 8005f08:	7809      	ldrb	r1, [r1, #0]
 8005f0a:	1a8a      	subs	r2, r1, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005f0e:	183b      	adds	r3, r7, r0
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	183b      	adds	r3, r7, r0
 8005f14:	3201      	adds	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
	    y1++;
 8005f18:	2114      	movs	r1, #20
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	781a      	ldrb	r2, [r3, #0]
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	3201      	adds	r2, #1
 8005f22:	701a      	strb	r2, [r3, #0]
	    break;	  
 8005f24:	e01e      	b.n	8005f64 <u8g2_font_decode_glyph+0x21a>
	case 3:
	    x1 += h;
 8005f26:	230f      	movs	r3, #15
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	7819      	ldrb	r1, [r3, #0]
 8005f2c:	2216      	movs	r2, #22
 8005f2e:	18bb      	adds	r3, r7, r2
 8005f30:	18ba      	adds	r2, r7, r2
 8005f32:	7812      	ldrb	r2, [r2, #0]
 8005f34:	188a      	adds	r2, r1, r2
 8005f36:	701a      	strb	r2, [r3, #0]
	    y0 -= decode->glyph_width;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	7a1b      	ldrb	r3, [r3, #8]
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	2015      	movs	r0, #21
 8005f42:	183b      	adds	r3, r7, r0
 8005f44:	1839      	adds	r1, r7, r0
 8005f46:	7809      	ldrb	r1, [r1, #0]
 8005f48:	1a8a      	subs	r2, r1, r2
 8005f4a:	701a      	strb	r2, [r3, #0]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005f4c:	183b      	adds	r3, r7, r0
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	183b      	adds	r3, r7, r0
 8005f52:	3201      	adds	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
	    y1++;
 8005f56:	2114      	movs	r1, #20
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	781a      	ldrb	r2, [r3, #0]
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	3201      	adds	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
	    break;	  
 8005f62:	46c0      	nop			; (mov r8, r8)
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8005f64:	2316      	movs	r3, #22
 8005f66:	18fb      	adds	r3, r7, r3
 8005f68:	781c      	ldrb	r4, [r3, #0]
 8005f6a:	2315      	movs	r3, #21
 8005f6c:	18fb      	adds	r3, r7, r3
 8005f6e:	781a      	ldrb	r2, [r3, #0]
 8005f70:	2317      	movs	r3, #23
 8005f72:	18fb      	adds	r3, r7, r3
 8005f74:	7819      	ldrb	r1, [r3, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	2314      	movs	r3, #20
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	0023      	movs	r3, r4
 8005f82:	f000 fc5e 	bl	8006842 <u8g2_IsIntersection>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d104      	bne.n	8005f94 <u8g2_font_decode_glyph+0x24a>
	return d;
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b25b      	sxtb	r3, r3
 8005f92:	e048      	b.n	8006026 <u8g2_font_decode_glyph+0x2dc>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2200      	movs	r2, #0
 8005f98:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2266      	movs	r2, #102	; 0x66
 8005fa4:	5c9a      	ldrb	r2, [r3, r2]
 8005fa6:	230b      	movs	r3, #11
 8005fa8:	18fc      	adds	r4, r7, r3
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	0011      	movs	r1, r2
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f7ff fc9c 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 8005fb4:	0003      	movs	r3, r0
 8005fb6:	7023      	strb	r3, [r4, #0]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2267      	movs	r2, #103	; 0x67
 8005fbc:	5c9a      	ldrb	r2, [r3, r2]
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	18fc      	adds	r4, r7, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7ff fc90 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	7023      	strb	r3, [r4, #0]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8005fd0:	230b      	movs	r3, #11
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	7819      	ldrb	r1, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7ff fda6 	bl	8005b2c <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8005fe0:	230a      	movs	r3, #10
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	7819      	ldrb	r1, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	0018      	movs	r0, r3
 8005fec:	f7ff fd9e 	bl	8005b2c <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f7ff fc79 	bl	80058ec <u8g2_font_decode_get_unsigned_bits>
 8005ffa:	1e03      	subs	r3, r0, #0
 8005ffc:	d1e8      	bne.n	8005fd0 <u8g2_font_decode_glyph+0x286>

      if ( decode->y >= h )
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	79db      	ldrb	r3, [r3, #7]
 8006002:	b25b      	sxtb	r3, r3
 8006004:	220f      	movs	r2, #15
 8006006:	18ba      	adds	r2, r7, r2
 8006008:	7812      	ldrb	r2, [r2, #0]
 800600a:	b252      	sxtb	r2, r2
 800600c:	429a      	cmp	r2, r3
 800600e:	dd00      	ble.n	8006012 <u8g2_font_decode_glyph+0x2c8>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006010:	e7c6      	b.n	8005fa0 <u8g2_font_decode_glyph+0x256>
	break;
 8006012:	46c0      	nop			; (mov r8, r8)
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	7b19      	ldrb	r1, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2282      	movs	r2, #130	; 0x82
 800601c:	5499      	strb	r1, [r3, r2]
  }
  return d;
 800601e:	230c      	movs	r3, #12
 8006020:	18fb      	adds	r3, r7, r3
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b25b      	sxtb	r3, r3
}
 8006026:	0018      	movs	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	b007      	add	sp, #28
 800602c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800602e <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800602e:	b5b0      	push	{r4, r5, r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	000a      	movs	r2, r1
 8006038:	1cbb      	adds	r3, r7, #2
 800603a:	801a      	strh	r2, [r3, #0]
  const uint8_t *font = u8g2->font;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3317      	adds	r3, #23
 8006046:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006048:	1cbb      	adds	r3, r7, #2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	2bff      	cmp	r3, #255	; 0xff
 800604e:	d82d      	bhi.n	80060ac <u8g2_font_get_glyph_data+0x7e>
  {
    if ( encoding >= 'a' )
 8006050:	1cbb      	adds	r3, r7, #2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	2b60      	cmp	r3, #96	; 0x60
 8006056:	d907      	bls.n	8006068 <u8g2_font_get_glyph_data+0x3a>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2278      	movs	r2, #120	; 0x78
 800605c:	5a9b      	ldrh	r3, [r3, r2]
 800605e:	001a      	movs	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	189b      	adds	r3, r3, r2
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	e00a      	b.n	800607e <u8g2_font_get_glyph_data+0x50>
    }
    else if ( encoding >= 'A' )
 8006068:	1cbb      	adds	r3, r7, #2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d906      	bls.n	800607e <u8g2_font_get_glyph_data+0x50>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2276      	movs	r2, #118	; 0x76
 8006074:	5a9b      	ldrh	r3, [r3, r2]
 8006076:	001a      	movs	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	189b      	adds	r3, r3, r2
 800607c:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	3301      	adds	r3, #1
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d05f      	beq.n	8006148 <u8g2_font_get_glyph_data+0x11a>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	1cba      	adds	r2, r7, #2
 8006090:	8812      	ldrh	r2, [r2, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d102      	bne.n	800609c <u8g2_font_get_glyph_data+0x6e>
      {
	return font+2;	/* skip encoding and glyph size */
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	3302      	adds	r3, #2
 800609a:	e059      	b.n	8006150 <u8g2_font_get_glyph_data+0x122>
      }
      font += u8x8_pgm_read( font + 1 );
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	001a      	movs	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	189b      	adds	r3, r3, r2
 80060a8:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80060aa:	e7e8      	b.n	800607e <u8g2_font_get_glyph_data+0x50>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	227a      	movs	r2, #122	; 0x7a
 80060b0:	5a9b      	ldrh	r3, [r3, r2]
 80060b2:	001a      	movs	r2, r3
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2100      	movs	r1, #0
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff fb2e 	bl	8005724 <u8g2_font_get_word>
 80060c8:	0003      	movs	r3, r0
 80060ca:	001a      	movs	r2, r3
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80060d2:	250e      	movs	r5, #14
 80060d4:	197c      	adds	r4, r7, r5
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	2102      	movs	r1, #2
 80060da:	0018      	movs	r0, r3
 80060dc:	f7ff fb22 	bl	8005724 <u8g2_font_get_word>
 80060e0:	0003      	movs	r3, r0
 80060e2:	8023      	strh	r3, [r4, #0]
      unicode_lookup_table+=4;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3304      	adds	r3, #4
 80060e8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80060ea:	197a      	adds	r2, r7, r5
 80060ec:	1cbb      	adds	r3, r7, #2
 80060ee:	8812      	ldrh	r2, [r2, #0]
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d3e3      	bcc.n	80060be <u8g2_font_get_glyph_data+0x90>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	200e      	movs	r0, #14
 80060fc:	183b      	adds	r3, r7, r0
 80060fe:	801a      	strh	r2, [r3, #0]
      e <<= 8;
 8006100:	183b      	adds	r3, r7, r0
 8006102:	183a      	adds	r2, r7, r0
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	0212      	lsls	r2, r2, #8
 8006108:	801a      	strh	r2, [r3, #0]
      e |= u8x8_pgm_read( font + 1 );
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	3301      	adds	r3, #1
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b299      	uxth	r1, r3
 8006112:	183b      	adds	r3, r7, r0
 8006114:	183a      	adds	r2, r7, r0
 8006116:	8812      	ldrh	r2, [r2, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	801a      	strh	r2, [r3, #0]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800611c:	183b      	adds	r3, r7, r0
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d013      	beq.n	800614c <u8g2_font_get_glyph_data+0x11e>
	break;
  
      if ( e == encoding )
 8006124:	230e      	movs	r3, #14
 8006126:	18fa      	adds	r2, r7, r3
 8006128:	1cbb      	adds	r3, r7, #2
 800612a:	8812      	ldrh	r2, [r2, #0]
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d102      	bne.n	8006138 <u8g2_font_get_glyph_data+0x10a>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	3303      	adds	r3, #3
 8006136:	e00b      	b.n	8006150 <u8g2_font_get_glyph_data+0x122>
      }
      font += u8x8_pgm_read( font + 2 );
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	3302      	adds	r3, #2
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	001a      	movs	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	189b      	adds	r3, r3, r2
 8006144:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8006146:	e7d6      	b.n	80060f6 <u8g2_font_get_glyph_data+0xc8>
	break;
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	e000      	b.n	800614e <u8g2_font_get_glyph_data+0x120>
	break;
 800614c:	46c0      	nop			; (mov r8, r8)
    }  
  }
#endif
  
  return NULL;
 800614e:	2300      	movs	r3, #0
}
 8006150:	0018      	movs	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	b006      	add	sp, #24
 8006156:	bdb0      	pop	{r4, r5, r7, pc}

08006158 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	000c      	movs	r4, r1
 8006162:	0010      	movs	r0, r2
 8006164:	0019      	movs	r1, r3
 8006166:	1cfb      	adds	r3, r7, #3
 8006168:	1c22      	adds	r2, r4, #0
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	1cbb      	adds	r3, r7, #2
 800616e:	1c02      	adds	r2, r0, #0
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	003b      	movs	r3, r7
 8006174:	1c0a      	adds	r2, r1, #0
 8006176:	801a      	strh	r2, [r3, #0]
  u8g2_uint_t dx = 0;
 8006178:	230f      	movs	r3, #15
 800617a:	18fb      	adds	r3, r7, r3
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
  u8g2->font_decode.target_x = x;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	1cfa      	adds	r2, r7, #3
 8006184:	2158      	movs	r1, #88	; 0x58
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	545a      	strb	r2, [r3, r1]
  u8g2->font_decode.target_y = y;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	1cba      	adds	r2, r7, #2
 800618e:	2159      	movs	r1, #89	; 0x59
 8006190:	7812      	ldrb	r2, [r2, #0]
 8006192:	545a      	strb	r2, [r3, r1]
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006194:	003b      	movs	r3, r7
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	0011      	movs	r1, r2
 800619c:	0018      	movs	r0, r3
 800619e:	f7ff ff46 	bl	800602e <u8g2_font_get_glyph_data>
 80061a2:	0003      	movs	r3, r0
 80061a4:	60bb      	str	r3, [r7, #8]
  if ( glyph_data != NULL )
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <u8g2_font_draw_glyph+0x6a>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0011      	movs	r1, r2
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7ff fdc9 	bl	8005d4a <u8g2_font_decode_glyph>
 80061b8:	0003      	movs	r3, r0
 80061ba:	001a      	movs	r2, r3
 80061bc:	230f      	movs	r3, #15
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	701a      	strb	r2, [r3, #0]
  }
  return dx;
 80061c2:	230f      	movs	r3, #15
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	781b      	ldrb	r3, [r3, #0]
}
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b005      	add	sp, #20
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	000c      	movs	r4, r1
 80061da:	0010      	movs	r0, r2
 80061dc:	0019      	movs	r1, r3
 80061de:	1cfb      	adds	r3, r7, #3
 80061e0:	1c22      	adds	r2, r4, #0
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	1cbb      	adds	r3, r7, #2
 80061e6:	1c02      	adds	r2, r0, #0
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	003b      	movs	r3, r7
 80061ec:	1c0a      	adds	r2, r1, #0
 80061ee:	801a      	strh	r2, [r3, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2262      	movs	r2, #98	; 0x62
 80061f4:	5c9b      	ldrb	r3, [r3, r2]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d015      	beq.n	8006226 <u8g2_DrawGlyph+0x56>
 80061fa:	dc02      	bgt.n	8006202 <u8g2_DrawGlyph+0x32>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <u8g2_DrawGlyph+0x3c>
 8006200:	e038      	b.n	8006274 <u8g2_DrawGlyph+0xa4>
 8006202:	2b02      	cmp	r3, #2
 8006204:	d01c      	beq.n	8006240 <u8g2_DrawGlyph+0x70>
 8006206:	2b03      	cmp	r3, #3
 8006208:	d027      	beq.n	800625a <u8g2_DrawGlyph+0x8a>
 800620a:	e033      	b.n	8006274 <u8g2_DrawGlyph+0xa4>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	0010      	movs	r0, r2
 8006214:	4798      	blx	r3
 8006216:	0003      	movs	r3, r0
 8006218:	0019      	movs	r1, r3
 800621a:	1cbb      	adds	r3, r7, #2
 800621c:	1cba      	adds	r2, r7, #2
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	188a      	adds	r2, r1, r2
 8006222:	701a      	strb	r2, [r3, #0]
      break;
 8006224:	e026      	b.n	8006274 <u8g2_DrawGlyph+0xa4>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	0010      	movs	r0, r2
 800622e:	4798      	blx	r3
 8006230:	0003      	movs	r3, r0
 8006232:	0019      	movs	r1, r3
 8006234:	1cfb      	adds	r3, r7, #3
 8006236:	1cfa      	adds	r2, r7, #3
 8006238:	7812      	ldrb	r2, [r2, #0]
 800623a:	1a52      	subs	r2, r2, r1
 800623c:	701a      	strb	r2, [r3, #0]
      break;
 800623e:	e019      	b.n	8006274 <u8g2_DrawGlyph+0xa4>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	0010      	movs	r0, r2
 8006248:	4798      	blx	r3
 800624a:	0003      	movs	r3, r0
 800624c:	0019      	movs	r1, r3
 800624e:	1cbb      	adds	r3, r7, #2
 8006250:	1cba      	adds	r2, r7, #2
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	1a52      	subs	r2, r2, r1
 8006256:	701a      	strb	r2, [r3, #0]
      break;
 8006258:	e00c      	b.n	8006274 <u8g2_DrawGlyph+0xa4>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	0010      	movs	r0, r2
 8006262:	4798      	blx	r3
 8006264:	0003      	movs	r3, r0
 8006266:	0019      	movs	r1, r3
 8006268:	1cfb      	adds	r3, r7, #3
 800626a:	1cfa      	adds	r2, r7, #3
 800626c:	7812      	ldrb	r2, [r2, #0]
 800626e:	188a      	adds	r2, r1, r2
 8006270:	701a      	strb	r2, [r3, #0]
      break;
 8006272:	46c0      	nop			; (mov r8, r8)
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006274:	003b      	movs	r3, r7
 8006276:	881c      	ldrh	r4, [r3, #0]
 8006278:	1cbb      	adds	r3, r7, #2
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	1cfb      	adds	r3, r7, #3
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	0023      	movs	r3, r4
 8006284:	f7ff ff68 	bl	8006158 <u8g2_font_draw_glyph>
 8006288:	0003      	movs	r3, r0
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b003      	add	sp, #12
 8006290:	bd90      	pop	{r4, r7, pc}
	...

08006294 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006294:	b5b0      	push	{r4, r5, r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	0008      	movs	r0, r1
 800629e:	0011      	movs	r1, r2
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	230b      	movs	r3, #11
 80062a4:	18fb      	adds	r3, r7, r3
 80062a6:	1c02      	adds	r2, r0, #0
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	230a      	movs	r3, #10
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	1c0a      	adds	r2, r1, #0
 80062b0:	701a      	strb	r2, [r3, #0]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	0018      	movs	r0, r3
 80062b6:	f000 fd77 	bl	8006da8 <u8x8_utf8_init>
  sum = 0;
 80062ba:	2317      	movs	r3, #23
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	7811      	ldrb	r1, [r2, #0]
 80062ca:	2514      	movs	r5, #20
 80062cc:	197c      	adds	r4, r7, r5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	0010      	movs	r0, r2
 80062d2:	4798      	blx	r3
 80062d4:	0003      	movs	r3, r0
 80062d6:	8023      	strh	r3, [r4, #0]
    if ( e == 0x0ffff )
 80062d8:	197b      	adds	r3, r7, r5
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	4a32      	ldr	r2, [pc, #200]	; (80063a8 <u8g2_draw_string+0x114>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d059      	beq.n	8006396 <u8g2_draw_string+0x102>
      break;
    str++;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3301      	adds	r3, #1
 80062e6:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80062e8:	2314      	movs	r3, #20
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	4a2f      	ldr	r2, [pc, #188]	; (80063ac <u8g2_draw_string+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d0e6      	beq.n	80062c2 <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80062f4:	2313      	movs	r3, #19
 80062f6:	18fc      	adds	r4, r7, r3
 80062f8:	2314      	movs	r3, #20
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	881d      	ldrh	r5, [r3, #0]
 80062fe:	230a      	movs	r3, #10
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	230b      	movs	r3, #11
 8006306:	18fb      	adds	r3, r7, r3
 8006308:	7819      	ldrb	r1, [r3, #0]
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	002b      	movs	r3, r5
 800630e:	f7ff ff5f 	bl	80061d0 <u8g2_DrawGlyph>
 8006312:	0003      	movs	r3, r0
 8006314:	7023      	strb	r3, [r4, #0]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2262      	movs	r2, #98	; 0x62
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d012      	beq.n	8006346 <u8g2_draw_string+0xb2>
 8006320:	dc02      	bgt.n	8006328 <u8g2_draw_string+0x94>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <u8g2_draw_string+0x9e>
 8006326:	e02c      	b.n	8006382 <u8g2_draw_string+0xee>
 8006328:	2b02      	cmp	r3, #2
 800632a:	d016      	beq.n	800635a <u8g2_draw_string+0xc6>
 800632c:	2b03      	cmp	r3, #3
 800632e:	d01e      	beq.n	800636e <u8g2_draw_string+0xda>
 8006330:	e027      	b.n	8006382 <u8g2_draw_string+0xee>
      {
	case 0:
	  x += delta;
 8006332:	220b      	movs	r2, #11
 8006334:	18bb      	adds	r3, r7, r2
 8006336:	18b9      	adds	r1, r7, r2
 8006338:	2213      	movs	r2, #19
 800633a:	18ba      	adds	r2, r7, r2
 800633c:	7809      	ldrb	r1, [r1, #0]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	188a      	adds	r2, r1, r2
 8006342:	701a      	strb	r2, [r3, #0]
	  break;
 8006344:	e01d      	b.n	8006382 <u8g2_draw_string+0xee>
	case 1:
	  y += delta;
 8006346:	220a      	movs	r2, #10
 8006348:	18bb      	adds	r3, r7, r2
 800634a:	18b9      	adds	r1, r7, r2
 800634c:	2213      	movs	r2, #19
 800634e:	18ba      	adds	r2, r7, r2
 8006350:	7809      	ldrb	r1, [r1, #0]
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	188a      	adds	r2, r1, r2
 8006356:	701a      	strb	r2, [r3, #0]
	  break;
 8006358:	e013      	b.n	8006382 <u8g2_draw_string+0xee>
	case 2:
	  x -= delta;
 800635a:	220b      	movs	r2, #11
 800635c:	18bb      	adds	r3, r7, r2
 800635e:	18b9      	adds	r1, r7, r2
 8006360:	2213      	movs	r2, #19
 8006362:	18ba      	adds	r2, r7, r2
 8006364:	7809      	ldrb	r1, [r1, #0]
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	1a8a      	subs	r2, r1, r2
 800636a:	701a      	strb	r2, [r3, #0]
	  break;
 800636c:	e009      	b.n	8006382 <u8g2_draw_string+0xee>
	case 3:
	  y -= delta;
 800636e:	220a      	movs	r2, #10
 8006370:	18bb      	adds	r3, r7, r2
 8006372:	18b9      	adds	r1, r7, r2
 8006374:	2213      	movs	r2, #19
 8006376:	18ba      	adds	r2, r7, r2
 8006378:	7809      	ldrb	r1, [r1, #0]
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	1a8a      	subs	r2, r1, r2
 800637e:	701a      	strb	r2, [r3, #0]
	  break;
 8006380:	46c0      	nop			; (mov r8, r8)

#else
      x += delta;
#endif

      sum += delta;    
 8006382:	2217      	movs	r2, #23
 8006384:	18bb      	adds	r3, r7, r2
 8006386:	18b9      	adds	r1, r7, r2
 8006388:	2213      	movs	r2, #19
 800638a:	18ba      	adds	r2, r7, r2
 800638c:	7809      	ldrb	r1, [r1, #0]
 800638e:	7812      	ldrb	r2, [r2, #0]
 8006390:	188a      	adds	r2, r1, r2
 8006392:	701a      	strb	r2, [r3, #0]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006394:	e795      	b.n	80062c2 <u8g2_draw_string+0x2e>
      break;
 8006396:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sum;
 8006398:	2317      	movs	r3, #23
 800639a:	18fb      	adds	r3, r7, r3
 800639c:	781b      	ldrb	r3, [r3, #0]
}
 800639e:	0018      	movs	r0, r3
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b006      	add	sp, #24
 80063a4:	bdb0      	pop	{r4, r5, r7, pc}
 80063a6:	46c0      	nop			; (mov r8, r8)
 80063a8:	0000ffff 	.word	0x0000ffff
 80063ac:	0000fffe 	.word	0x0000fffe

080063b0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80063b0:	b5b0      	push	{r4, r5, r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	0008      	movs	r0, r1
 80063ba:	0011      	movs	r1, r2
 80063bc:	607b      	str	r3, [r7, #4]
 80063be:	250b      	movs	r5, #11
 80063c0:	197b      	adds	r3, r7, r5
 80063c2:	1c02      	adds	r2, r0, #0
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	200a      	movs	r0, #10
 80063c8:	183b      	adds	r3, r7, r0
 80063ca:	1c0a      	adds	r2, r1, #0
 80063cc:	701a      	strb	r2, [r3, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <u8g2_DrawStr+0x40>)
 80063d2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80063d4:	687c      	ldr	r4, [r7, #4]
 80063d6:	183b      	adds	r3, r7, r0
 80063d8:	781a      	ldrb	r2, [r3, #0]
 80063da:	197b      	adds	r3, r7, r5
 80063dc:	7819      	ldrb	r1, [r3, #0]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	0023      	movs	r3, r4
 80063e2:	f7ff ff57 	bl	8006294 <u8g2_draw_string>
 80063e6:	0003      	movs	r3, r0
}
 80063e8:	0018      	movs	r0, r3
 80063ea:	46bd      	mov	sp, r7
 80063ec:	b004      	add	sp, #16
 80063ee:	bdb0      	pop	{r4, r5, r7, pc}
 80063f0:	08006dc1 	.word	0x08006dc1

080063f4 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05d      	beq.n	80064c0 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2271      	movs	r2, #113	; 0x71
 8006408:	5699      	ldrsb	r1, [r3, r2]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	227e      	movs	r2, #126	; 0x7e
 800640e:	5499      	strb	r1, [r3, r2]
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2272      	movs	r2, #114	; 0x72
 8006414:	5699      	ldrsb	r1, [r3, r2]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	227f      	movs	r2, #127	; 0x7f
 800641a:	5499      	strb	r1, [r3, r2]
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	227d      	movs	r2, #125	; 0x7d
 8006420:	5c9b      	ldrb	r3, [r3, r2]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04d      	beq.n	80064c2 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	227d      	movs	r2, #125	; 0x7d
 800642a:	5c9b      	ldrb	r3, [r3, r2]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d11c      	bne.n	800646a <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	227e      	movs	r2, #126	; 0x7e
 8006434:	569a      	ldrsb	r2, [r3, r2]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2173      	movs	r1, #115	; 0x73
 800643a:	565b      	ldrsb	r3, [r3, r1]
 800643c:	429a      	cmp	r2, r3
 800643e:	da05      	bge.n	800644c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2273      	movs	r2, #115	; 0x73
 8006444:	5699      	ldrsb	r1, [r3, r2]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	227e      	movs	r2, #126	; 0x7e
 800644a:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	227f      	movs	r2, #127	; 0x7f
 8006450:	569a      	ldrsb	r2, [r3, r2]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2174      	movs	r1, #116	; 0x74
 8006456:	565b      	ldrsb	r3, [r3, r1]
 8006458:	429a      	cmp	r2, r3
 800645a:	dd32      	ble.n	80064c2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2274      	movs	r2, #116	; 0x74
 8006460:	5699      	ldrsb	r1, [r3, r2]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	227f      	movs	r2, #127	; 0x7f
 8006466:	5499      	strb	r1, [r3, r2]
 8006468:	e02b      	b.n	80064c2 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	227e      	movs	r2, #126	; 0x7e
 800646e:	569b      	ldrsb	r3, [r3, r2]
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	226e      	movs	r2, #110	; 0x6e
 8006476:	569b      	ldrsb	r3, [r3, r2]
 8006478:	0018      	movs	r0, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2270      	movs	r2, #112	; 0x70
 800647e:	569b      	ldrsb	r3, [r3, r2]
 8006480:	18c3      	adds	r3, r0, r3
 8006482:	4299      	cmp	r1, r3
 8006484:	da0d      	bge.n	80064a2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	226e      	movs	r2, #110	; 0x6e
 800648a:	569b      	ldrsb	r3, [r3, r2]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2170      	movs	r1, #112	; 0x70
 8006492:	565b      	ldrsb	r3, [r3, r1]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	18d3      	adds	r3, r2, r3
 8006498:	b2db      	uxtb	r3, r3
 800649a:	b259      	sxtb	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	227e      	movs	r2, #126	; 0x7e
 80064a0:	5499      	strb	r1, [r3, r2]
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	227f      	movs	r2, #127	; 0x7f
 80064a6:	569a      	ldrsb	r2, [r3, r2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2170      	movs	r1, #112	; 0x70
 80064ac:	565b      	ldrsb	r3, [r3, r1]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	dd07      	ble.n	80064c2 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2270      	movs	r2, #112	; 0x70
 80064b6:	5699      	ldrsb	r1, [r3, r2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	227f      	movs	r2, #127	; 0x7f
 80064bc:	5499      	strb	r1, [r3, r2]
 80064be:	e000      	b.n	80064c2 <u8g2_UpdateRefHeight+0xce>
    return;
 80064c0:	46c0      	nop			; (mov r8, r8)
  }  
}
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  return 0;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	0018      	movs	r0, r3
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b002      	add	sp, #8
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a03      	ldr	r2, [pc, #12]	; (80064f4 <u8g2_SetFontPosBaseline+0x18>)
 80064e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	080064c9 	.word	0x080064c9

080064f8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	429a      	cmp	r2, r3
 800650a:	d00d      	beq.n	8006528 <u8g2_SetFont+0x30>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	64da      	str	r2, [r3, #76]	; 0x4c
    u8g2_read_font_info(&(u8g2->font_info), font);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3364      	adds	r3, #100	; 0x64
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	0011      	movs	r1, r2
 800651a:	0018      	movs	r0, r3
 800651c:	f7ff f929 	bl	8005772 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f7ff ff66 	bl	80063f4 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8006528:	46c0      	nop			; (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b002      	add	sp, #8
 800652e:	bd80      	pop	{r7, pc}

08006530 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8006530:	b590      	push	{r4, r7, lr}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	0019      	movs	r1, r3
 800653c:	1dfb      	adds	r3, r7, #7
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	1dbb      	adds	r3, r7, #6
 8006542:	1c0a      	adds	r2, r1, #0
 8006544:	701a      	strb	r2, [r3, #0]
  u8g2_uint_t a = *ap;
 8006546:	2417      	movs	r4, #23
 8006548:	193b      	adds	r3, r7, r4
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
  u8g2_uint_t b;
  b  = a;
 8006550:	2016      	movs	r0, #22
 8006552:	183b      	adds	r3, r7, r0
 8006554:	193a      	adds	r2, r7, r4
 8006556:	7812      	ldrb	r2, [r2, #0]
 8006558:	701a      	strb	r2, [r3, #0]
  b += *len;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	7819      	ldrb	r1, [r3, #0]
 800655e:	183b      	adds	r3, r7, r0
 8006560:	183a      	adds	r2, r7, r0
 8006562:	7812      	ldrb	r2, [r2, #0]
 8006564:	188a      	adds	r2, r1, r2
 8006566:	701a      	strb	r2, [r3, #0]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8006568:	193a      	adds	r2, r7, r4
 800656a:	183b      	adds	r3, r7, r0
 800656c:	7812      	ldrb	r2, [r2, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	429a      	cmp	r2, r3
 8006572:	d916      	bls.n	80065a2 <u8g2_clip_intersection2+0x72>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8006574:	2317      	movs	r3, #23
 8006576:	18fa      	adds	r2, r7, r3
 8006578:	1dbb      	adds	r3, r7, #6
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d20a      	bcs.n	8006598 <u8g2_clip_intersection2+0x68>
    {
      b = d;
 8006582:	2116      	movs	r1, #22
 8006584:	187b      	adds	r3, r7, r1
 8006586:	1dba      	adds	r2, r7, #6
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	701a      	strb	r2, [r3, #0]
      b--;
 800658c:	187b      	adds	r3, r7, r1
 800658e:	781a      	ldrb	r2, [r3, #0]
 8006590:	187b      	adds	r3, r7, r1
 8006592:	3a01      	subs	r2, #1
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	e004      	b.n	80065a2 <u8g2_clip_intersection2+0x72>
    }
    else
    {
      a = c;
 8006598:	2317      	movs	r3, #23
 800659a:	18fb      	adds	r3, r7, r3
 800659c:	1dfa      	adds	r2, r7, #7
 800659e:	7812      	ldrb	r2, [r2, #0]
 80065a0:	701a      	strb	r2, [r3, #0]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80065a2:	2317      	movs	r3, #23
 80065a4:	18fa      	adds	r2, r7, r3
 80065a6:	1dbb      	adds	r3, r7, #6
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d301      	bcc.n	80065b4 <u8g2_clip_intersection2+0x84>
    return 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e032      	b.n	800661a <u8g2_clip_intersection2+0xea>
  if ( b <= c )
 80065b4:	2316      	movs	r3, #22
 80065b6:	18fa      	adds	r2, r7, r3
 80065b8:	1dfb      	adds	r3, r7, #7
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d801      	bhi.n	80065c6 <u8g2_clip_intersection2+0x96>
    return 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	e029      	b.n	800661a <u8g2_clip_intersection2+0xea>
  if ( a < c )		
 80065c6:	2317      	movs	r3, #23
 80065c8:	18fa      	adds	r2, r7, r3
 80065ca:	1dfb      	adds	r3, r7, #7
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d204      	bcs.n	80065de <u8g2_clip_intersection2+0xae>
    a = c;
 80065d4:	2317      	movs	r3, #23
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	1dfa      	adds	r2, r7, #7
 80065da:	7812      	ldrb	r2, [r2, #0]
 80065dc:	701a      	strb	r2, [r3, #0]
  if ( b > d )
 80065de:	2316      	movs	r3, #22
 80065e0:	18fa      	adds	r2, r7, r3
 80065e2:	1dbb      	adds	r3, r7, #6
 80065e4:	7812      	ldrb	r2, [r2, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d904      	bls.n	80065f6 <u8g2_clip_intersection2+0xc6>
    b = d;
 80065ec:	2316      	movs	r3, #22
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	1dba      	adds	r2, r7, #6
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	701a      	strb	r2, [r3, #0]
  
  *ap = a;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2417      	movs	r4, #23
 80065fa:	193a      	adds	r2, r7, r4
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	701a      	strb	r2, [r3, #0]
  b -= a;
 8006600:	2016      	movs	r0, #22
 8006602:	183b      	adds	r3, r7, r0
 8006604:	1839      	adds	r1, r7, r0
 8006606:	193a      	adds	r2, r7, r4
 8006608:	7809      	ldrb	r1, [r1, #0]
 800660a:	7812      	ldrb	r2, [r2, #0]
 800660c:	1a8a      	subs	r2, r1, r2
 800660e:	701a      	strb	r2, [r3, #0]
  *len = b;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	183a      	adds	r2, r7, r0
 8006614:	7812      	ldrb	r2, [r2, #0]
 8006616:	701a      	strb	r2, [r3, #0]
  return 1;
 8006618:	2301      	movs	r3, #1
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b007      	add	sp, #28
 8006620:	bd90      	pop	{r4, r7, pc}

08006622 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006622:	b5b0      	push	{r4, r5, r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af02      	add	r7, sp, #8
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	000c      	movs	r4, r1
 800662c:	0010      	movs	r0, r2
 800662e:	0019      	movs	r1, r3
 8006630:	1cfb      	adds	r3, r7, #3
 8006632:	1c22      	adds	r2, r4, #0
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	1cbb      	adds	r3, r7, #2
 8006638:	1c02      	adds	r2, r0, #0
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	1c7b      	adds	r3, r7, #1
 800663e:	1c0a      	adds	r2, r1, #0
 8006640:	701a      	strb	r2, [r3, #0]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	223c      	movs	r2, #60	; 0x3c
 8006646:	5c9a      	ldrb	r2, [r3, r2]
 8006648:	1cbb      	adds	r3, r7, #2
 800664a:	1cb9      	adds	r1, r7, #2
 800664c:	7809      	ldrb	r1, [r1, #0]
 800664e:	1a8a      	subs	r2, r1, r2
 8006650:	701a      	strb	r2, [r3, #0]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006656:	1c7b      	adds	r3, r7, #1
 8006658:	781d      	ldrb	r5, [r3, #0]
 800665a:	1cbb      	adds	r3, r7, #2
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	1cfb      	adds	r3, r7, #3
 8006660:	7819      	ldrb	r1, [r3, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	2318      	movs	r3, #24
 8006666:	18fb      	adds	r3, r7, r3
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	002b      	movs	r3, r5
 800666e:	47a0      	blx	r4
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bdb0      	pop	{r4, r5, r7, pc}

08006678 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006678:	b5b0      	push	{r4, r5, r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	000c      	movs	r4, r1
 8006682:	0010      	movs	r0, r2
 8006684:	0019      	movs	r1, r3
 8006686:	1cfb      	adds	r3, r7, #3
 8006688:	1c22      	adds	r2, r4, #0
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	1cbb      	adds	r3, r7, #2
 800668e:	1c02      	adds	r2, r0, #0
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	1c7b      	adds	r3, r7, #1
 8006694:	1c0a      	adds	r2, r1, #0
 8006696:	701a      	strb	r2, [r3, #0]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	227c      	movs	r2, #124	; 0x7c
 800669c:	5c9b      	ldrb	r3, [r3, r2]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d100      	bne.n	80066a4 <u8g2_DrawHVLine+0x2c>
 80066a2:	e08b      	b.n	80067bc <u8g2_DrawHVLine+0x144>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80066a4:	1c7b      	adds	r3, r7, #1
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d100      	bne.n	80066ae <u8g2_DrawHVLine+0x36>
 80066ac:	e086      	b.n	80067bc <u8g2_DrawHVLine+0x144>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80066ae:	1c7b      	adds	r3, r7, #1
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d926      	bls.n	8006704 <u8g2_DrawHVLine+0x8c>
      {
	if ( dir == 2 )
 80066b6:	2318      	movs	r3, #24
 80066b8:	18fb      	adds	r3, r7, r3
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d10e      	bne.n	80066de <u8g2_DrawHVLine+0x66>
	{
	  x -= len;
 80066c0:	1cfb      	adds	r3, r7, #3
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	1c7b      	adds	r3, r7, #1
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	1cfb      	adds	r3, r7, #3
 80066ce:	701a      	strb	r2, [r3, #0]
	  x++;
 80066d0:	1cfb      	adds	r3, r7, #3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	1cfb      	adds	r3, r7, #3
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e012      	b.n	8006704 <u8g2_DrawHVLine+0x8c>
	}
	else if ( dir == 3 )
 80066de:	2318      	movs	r3, #24
 80066e0:	18fb      	adds	r3, r7, r3
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d10d      	bne.n	8006704 <u8g2_DrawHVLine+0x8c>
	{
	  y -= len;
 80066e8:	1cbb      	adds	r3, r7, #2
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	1c7b      	adds	r3, r7, #1
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	1cbb      	adds	r3, r7, #2
 80066f6:	701a      	strb	r2, [r3, #0]
	  y++;
 80066f8:	1cbb      	adds	r3, r7, #2
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	1cbb      	adds	r3, r7, #2
 8006702:	701a      	strb	r2, [r3, #0]
	}
      }
      dir &= 1;  
 8006704:	2018      	movs	r0, #24
 8006706:	1839      	adds	r1, r7, r0
 8006708:	183b      	adds	r3, r7, r0
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2201      	movs	r2, #1
 800670e:	4013      	ands	r3, r2
 8006710:	700b      	strb	r3, [r1, #0]
      
      /* clip against the user window */
      if ( dir == 0 )
 8006712:	183b      	adds	r3, r7, r0
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d11b      	bne.n	8006752 <u8g2_DrawHVLine+0xda>
      {
	if ( y < u8g2->user_y0 )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2243      	movs	r2, #67	; 0x43
 800671e:	5c9a      	ldrb	r2, [r3, r2]
 8006720:	1cbb      	adds	r3, r7, #2
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d840      	bhi.n	80067aa <u8g2_DrawHVLine+0x132>
	  return;
	if ( y >= u8g2->user_y1 )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2244      	movs	r2, #68	; 0x44
 800672c:	5c9a      	ldrb	r2, [r3, r2]
 800672e:	1cbb      	adds	r3, r7, #2
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d93b      	bls.n	80067ae <u8g2_DrawHVLine+0x136>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2241      	movs	r2, #65	; 0x41
 800673a:	5c9c      	ldrb	r4, [r3, r2]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2242      	movs	r2, #66	; 0x42
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	1c79      	adds	r1, r7, #1
 8006744:	1cf8      	adds	r0, r7, #3
 8006746:	0022      	movs	r2, r4
 8006748:	f7ff fef2 	bl	8006530 <u8g2_clip_intersection2>
 800674c:	1e03      	subs	r3, r0, #0
 800674e:	d11b      	bne.n	8006788 <u8g2_DrawHVLine+0x110>
	  return;
 8006750:	e034      	b.n	80067bc <u8g2_DrawHVLine+0x144>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2241      	movs	r2, #65	; 0x41
 8006756:	5c9a      	ldrb	r2, [r3, r2]
 8006758:	1cfb      	adds	r3, r7, #3
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d828      	bhi.n	80067b2 <u8g2_DrawHVLine+0x13a>
	  return;
	if ( x >= u8g2->user_x1 )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2242      	movs	r2, #66	; 0x42
 8006764:	5c9a      	ldrb	r2, [r3, r2]
 8006766:	1cfb      	adds	r3, r7, #3
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d923      	bls.n	80067b6 <u8g2_DrawHVLine+0x13e>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2243      	movs	r2, #67	; 0x43
 8006772:	5c9c      	ldrb	r4, [r3, r2]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2244      	movs	r2, #68	; 0x44
 8006778:	5c9b      	ldrb	r3, [r3, r2]
 800677a:	1c79      	adds	r1, r7, #1
 800677c:	1cb8      	adds	r0, r7, #2
 800677e:	0022      	movs	r2, r4
 8006780:	f7ff fed6 	bl	8006530 <u8g2_clip_intersection2>
 8006784:	1e03      	subs	r3, r0, #0
 8006786:	d018      	beq.n	80067ba <u8g2_DrawHVLine+0x142>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	689c      	ldr	r4, [r3, #8]
 800678e:	1cfb      	adds	r3, r7, #3
 8006790:	7819      	ldrb	r1, [r3, #0]
 8006792:	1cbb      	adds	r3, r7, #2
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	1c7b      	adds	r3, r7, #1
 8006798:	781d      	ldrb	r5, [r3, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	2318      	movs	r3, #24
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	002b      	movs	r3, r5
 80067a6:	47a0      	blx	r4
 80067a8:	e008      	b.n	80067bc <u8g2_DrawHVLine+0x144>
	  return;
 80067aa:	46c0      	nop			; (mov r8, r8)
 80067ac:	e006      	b.n	80067bc <u8g2_DrawHVLine+0x144>
	  return;
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	e004      	b.n	80067bc <u8g2_DrawHVLine+0x144>
	  return;
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	e002      	b.n	80067bc <u8g2_DrawHVLine+0x144>
	  return;
 80067b6:	46c0      	nop			; (mov r8, r8)
 80067b8:	e000      	b.n	80067bc <u8g2_DrawHVLine+0x144>
	  return;
 80067ba:	46c0      	nop			; (mov r8, r8)
    }
}
 80067bc:	46bd      	mov	sp, r7
 80067be:	b002      	add	sp, #8
 80067c0:	bdb0      	pop	{r4, r5, r7, pc}

080067c2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80067c2:	b5b0      	push	{r4, r5, r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	0005      	movs	r5, r0
 80067ca:	000c      	movs	r4, r1
 80067cc:	0010      	movs	r0, r2
 80067ce:	0019      	movs	r1, r3
 80067d0:	1dfb      	adds	r3, r7, #7
 80067d2:	1c2a      	adds	r2, r5, #0
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	1dbb      	adds	r3, r7, #6
 80067d8:	1c22      	adds	r2, r4, #0
 80067da:	701a      	strb	r2, [r3, #0]
 80067dc:	1d7b      	adds	r3, r7, #5
 80067de:	1c02      	adds	r2, r0, #0
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	1d3b      	adds	r3, r7, #4
 80067e4:	1c0a      	adds	r2, r1, #0
 80067e6:	701a      	strb	r2, [r3, #0]
  if ( v0 < a1 )		// v0 <= a1
 80067e8:	1d7a      	adds	r2, r7, #5
 80067ea:	1dbb      	adds	r3, r7, #6
 80067ec:	7812      	ldrb	r2, [r2, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d211      	bcs.n	8006818 <u8g2_is_intersection_decision_tree+0x56>
  {
    if ( v1 > a0 )	// v1 >= a0
 80067f4:	1d3a      	adds	r2, r7, #4
 80067f6:	1dfb      	adds	r3, r7, #7
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d901      	bls.n	8006804 <u8g2_is_intersection_decision_tree+0x42>
    {
      return 1;
 8006800:	2301      	movs	r3, #1
 8006802:	e01a      	b.n	800683a <u8g2_is_intersection_decision_tree+0x78>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8006804:	1d7a      	adds	r2, r7, #5
 8006806:	1d3b      	adds	r3, r7, #4
 8006808:	7812      	ldrb	r2, [r2, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d901      	bls.n	8006814 <u8g2_is_intersection_decision_tree+0x52>
      {
	return 1;
 8006810:	2301      	movs	r3, #1
 8006812:	e012      	b.n	800683a <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 8006814:	2300      	movs	r3, #0
 8006816:	e010      	b.n	800683a <u8g2_is_intersection_decision_tree+0x78>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8006818:	1d3a      	adds	r2, r7, #4
 800681a:	1dfb      	adds	r3, r7, #7
 800681c:	7812      	ldrb	r2, [r2, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d909      	bls.n	8006838 <u8g2_is_intersection_decision_tree+0x76>
    {
      if ( v0 > v1 )	// v0 > v1
 8006824:	1d7a      	adds	r2, r7, #5
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	7812      	ldrb	r2, [r2, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d901      	bls.n	8006834 <u8g2_is_intersection_decision_tree+0x72>
      {
	return 1;
 8006830:	2301      	movs	r3, #1
 8006832:	e002      	b.n	800683a <u8g2_is_intersection_decision_tree+0x78>
      }
      else
      {
	return 0;
 8006834:	2300      	movs	r3, #0
 8006836:	e000      	b.n	800683a <u8g2_is_intersection_decision_tree+0x78>
      }
    }
    else
    {
      return 0;
 8006838:	2300      	movs	r3, #0
    }
  }
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bdb0      	pop	{r4, r5, r7, pc}

08006842 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8006842:	b590      	push	{r4, r7, lr}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	000c      	movs	r4, r1
 800684c:	0010      	movs	r0, r2
 800684e:	0019      	movs	r1, r3
 8006850:	1cfb      	adds	r3, r7, #3
 8006852:	1c22      	adds	r2, r4, #0
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	1cbb      	adds	r3, r7, #2
 8006858:	1c02      	adds	r2, r0, #0
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	1c7b      	adds	r3, r7, #1
 800685e:	1c0a      	adds	r2, r1, #0
 8006860:	701a      	strb	r2, [r3, #0]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2243      	movs	r2, #67	; 0x43
 8006866:	5c98      	ldrb	r0, [r3, r2]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2244      	movs	r2, #68	; 0x44
 800686c:	5c99      	ldrb	r1, [r3, r2]
 800686e:	2318      	movs	r3, #24
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781c      	ldrb	r4, [r3, #0]
 8006874:	1cbb      	adds	r3, r7, #2
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	0023      	movs	r3, r4
 800687a:	f7ff ffa2 	bl	80067c2 <u8g2_is_intersection_decision_tree>
 800687e:	1e03      	subs	r3, r0, #0
 8006880:	d101      	bne.n	8006886 <u8g2_IsIntersection+0x44>
    return 0; 
 8006882:	2300      	movs	r3, #0
 8006884:	e00d      	b.n	80068a2 <u8g2_IsIntersection+0x60>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2241      	movs	r2, #65	; 0x41
 800688a:	5c98      	ldrb	r0, [r3, r2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2242      	movs	r2, #66	; 0x42
 8006890:	5c99      	ldrb	r1, [r3, r2]
 8006892:	1c7b      	adds	r3, r7, #1
 8006894:	781c      	ldrb	r4, [r3, #0]
 8006896:	1cfb      	adds	r3, r7, #3
 8006898:	781a      	ldrb	r2, [r3, #0]
 800689a:	0023      	movs	r3, r4
 800689c:	f7ff ff91 	bl	80067c2 <u8g2_is_intersection_decision_tree>
 80068a0:	0003      	movs	r3, r0
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b003      	add	sp, #12
 80068a8:	bd90      	pop	{r4, r7, pc}

080068aa <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80068aa:	b590      	push	{r4, r7, lr}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	000c      	movs	r4, r1
 80068b4:	0010      	movs	r0, r2
 80068b6:	0019      	movs	r1, r3
 80068b8:	1cfb      	adds	r3, r7, #3
 80068ba:	1c22      	adds	r2, r4, #0
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	1cbb      	adds	r3, r7, #2
 80068c0:	1c02      	adds	r2, r0, #0
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	1c7b      	adds	r3, r7, #1
 80068c6:	1c0a      	adds	r2, r1, #0
 80068c8:	701a      	strb	r2, [r3, #0]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80068ca:	2013      	movs	r0, #19
 80068cc:	183b      	adds	r3, r7, r0
 80068ce:	1cba      	adds	r2, r7, #2
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	701a      	strb	r2, [r3, #0]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80068d4:	183b      	adds	r3, r7, r0
 80068d6:	183a      	adds	r2, r7, r0
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	2107      	movs	r1, #7
 80068dc:	400a      	ands	r2, r1
 80068de:	701a      	strb	r2, [r3, #0]
  mask = 1;
 80068e0:	2110      	movs	r1, #16
 80068e2:	187b      	adds	r3, r7, r1
 80068e4:	2201      	movs	r2, #1
 80068e6:	701a      	strb	r2, [r3, #0]
  mask <<= bit_pos;
 80068e8:	187b      	adds	r3, r7, r1
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	183b      	adds	r3, r7, r0
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	409a      	lsls	r2, r3
 80068f2:	187b      	adds	r3, r7, r1
 80068f4:	701a      	strb	r2, [r3, #0]

  or_mask = 0;
 80068f6:	2312      	movs	r3, #18
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
  xor_mask = 0;
 80068fe:	2311      	movs	r3, #17
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color <= 1 )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2282      	movs	r2, #130	; 0x82
 800690a:	5c9b      	ldrb	r3, [r3, r2]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d805      	bhi.n	800691c <u8g2_ll_hvline_vertical_top_lsb+0x72>
    or_mask  = mask;
 8006910:	2312      	movs	r3, #18
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	2210      	movs	r2, #16
 8006916:	18ba      	adds	r2, r7, r2
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	701a      	strb	r2, [r3, #0]
  if ( u8g2->draw_color != 1 )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2282      	movs	r2, #130	; 0x82
 8006920:	5c9b      	ldrb	r3, [r3, r2]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d005      	beq.n	8006932 <u8g2_ll_hvline_vertical_top_lsb+0x88>
    xor_mask = mask;
 8006926:	2311      	movs	r3, #17
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	2210      	movs	r2, #16
 800692c:	18ba      	adds	r2, r7, r2
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	701a      	strb	r2, [r3, #0]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8006932:	200e      	movs	r0, #14
 8006934:	183b      	adds	r3, r7, r0
 8006936:	1cba      	adds	r2, r7, #2
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	801a      	strh	r2, [r3, #0]
  offset &= ~7;
 800693c:	183b      	adds	r3, r7, r0
 800693e:	183a      	adds	r2, r7, r0
 8006940:	8812      	ldrh	r2, [r2, #0]
 8006942:	2107      	movs	r1, #7
 8006944:	438a      	bics	r2, r1
 8006946:	801a      	strh	r2, [r3, #0]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	7c1b      	ldrb	r3, [r3, #16]
 800694e:	b29a      	uxth	r2, r3
 8006950:	183b      	adds	r3, r7, r0
 8006952:	1839      	adds	r1, r7, r0
 8006954:	8809      	ldrh	r1, [r1, #0]
 8006956:	434a      	muls	r2, r1
 8006958:	801a      	strh	r2, [r3, #0]
  ptr = u8g2->tile_buf_ptr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8006960:	183b      	adds	r3, r7, r0
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	18d3      	adds	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]
  ptr += x;
 800696a:	1cfb      	adds	r3, r7, #3
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	18d3      	adds	r3, r2, r3
 8006972:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8006974:	2328      	movs	r3, #40	; 0x28
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11e      	bne.n	80069bc <u8g2_ll_hvline_vertical_top_lsb+0x112>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	2312      	movs	r3, #18
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	4313      	orrs	r3, r2
 800698a:	b2da      	uxtb	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	781a      	ldrb	r2, [r3, #0]
 8006994:	2311      	movs	r3, #17
 8006996:	18fb      	adds	r3, r7, r3
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4053      	eors	r3, r2
 800699c:	b2da      	uxtb	r2, r3
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	701a      	strb	r2, [r3, #0]
	ptr++;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	3301      	adds	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
	len--;
 80069a8:	1c7b      	adds	r3, r7, #1
 80069aa:	781a      	ldrb	r2, [r3, #0]
 80069ac:	1c7b      	adds	r3, r7, #1
 80069ae:	3a01      	subs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
      } while( len != 0 );
 80069b2:	1c7b      	adds	r3, r7, #1
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e1      	bne.n	800697e <u8g2_ll_hvline_vertical_top_lsb+0xd4>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80069ba:	e050      	b.n	8006a5e <u8g2_ll_hvline_vertical_top_lsb+0x1b4>
      *ptr |= or_mask;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	2312      	movs	r3, #18
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	781a      	ldrb	r2, [r3, #0]
 80069d2:	2311      	movs	r3, #17
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	4053      	eors	r3, r2
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80069e0:	2013      	movs	r0, #19
 80069e2:	183b      	adds	r3, r7, r0
 80069e4:	781a      	ldrb	r2, [r3, #0]
 80069e6:	183b      	adds	r3, r7, r0
 80069e8:	3201      	adds	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
      bit_pos &= 7;
 80069ec:	183b      	adds	r3, r7, r0
 80069ee:	183a      	adds	r2, r7, r0
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	2107      	movs	r1, #7
 80069f4:	400a      	ands	r2, r1
 80069f6:	701a      	strb	r2, [r3, #0]
      len--;
 80069f8:	1c7b      	adds	r3, r7, #1
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	1c7b      	adds	r3, r7, #1
 80069fe:	3a01      	subs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
      if ( bit_pos == 0 )
 8006a02:	183b      	adds	r3, r7, r0
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d119      	bne.n	8006a3e <u8g2_ll_hvline_vertical_top_lsb+0x194>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	223a      	movs	r2, #58	; 0x3a
 8006a0e:	5c9b      	ldrb	r3, [r3, r2]
 8006a10:	001a      	movs	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	189b      	adds	r3, r3, r2
 8006a16:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2282      	movs	r2, #130	; 0x82
 8006a1c:	5c9b      	ldrb	r3, [r3, r2]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d803      	bhi.n	8006a2a <u8g2_ll_hvline_vertical_top_lsb+0x180>
	  or_mask  = 1;
 8006a22:	2312      	movs	r3, #18
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	2201      	movs	r2, #1
 8006a28:	701a      	strb	r2, [r3, #0]
	if ( u8g2->draw_color != 1 )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2282      	movs	r2, #130	; 0x82
 8006a2e:	5c9b      	ldrb	r3, [r3, r2]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d010      	beq.n	8006a56 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	  xor_mask = 1;
 8006a34:	2311      	movs	r3, #17
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e00b      	b.n	8006a56 <u8g2_ll_hvline_vertical_top_lsb+0x1ac>
	or_mask <<= 1;
 8006a3e:	2312      	movs	r3, #18
 8006a40:	18fa      	adds	r2, r7, r3
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	18db      	adds	r3, r3, r3
 8006a48:	7013      	strb	r3, [r2, #0]
	xor_mask <<= 1;
 8006a4a:	2311      	movs	r3, #17
 8006a4c:	18fa      	adds	r2, r7, r3
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	7013      	strb	r3, [r2, #0]
    } while( len != 0 );
 8006a56:	1c7b      	adds	r3, r7, #1
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1ae      	bne.n	80069bc <u8g2_ll_hvline_vertical_top_lsb+0x112>
}
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b007      	add	sp, #28
 8006a64:	bd90      	pop	{r4, r7, pc}

08006a66 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2245      	movs	r2, #69	; 0x45
 8006a72:	2100      	movs	r1, #0
 8006a74:	5499      	strb	r1, [r3, r2]
  u8g2->clip_y0 = 0;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2247      	movs	r2, #71	; 0x47
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2246      	movs	r2, #70	; 0x46
 8006a82:	21ff      	movs	r1, #255	; 0xff
 8006a84:	5499      	strb	r1, [r3, r2]
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2248      	movs	r2, #72	; 0x48
 8006a8a:	21ff      	movs	r1, #255	; 0xff
 8006a8c:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb->update_page_win(u8g2);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	0010      	movs	r0, r2
 8006a98:	4798      	blx	r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b002      	add	sp, #8
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	1dfb      	adds	r3, r7, #7
 8006ab0:	701a      	strb	r2, [r3, #0]
  u8g2->font = NULL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1dfa      	adds	r2, r7, #7
 8006ac8:	2138      	movs	r1, #56	; 0x38
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	545a      	strb	r2, [r3, r1]
  
  u8g2->tile_curr_row = 0;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2239      	movs	r2, #57	; 0x39
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	5499      	strb	r1, [r3, r2]
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	225f      	movs	r2, #95	; 0x5f
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]
  u8g2->bitmap_transparency = 0;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2281      	movs	r2, #129	; 0x81
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	5499      	strb	r1, [r3, r2]
  
  u8g2->draw_color = 1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2282      	movs	r2, #130	; 0x82
 8006aea:	2101      	movs	r1, #1
 8006aec:	5499      	strb	r1, [r3, r2]
  u8g2->is_auto_page_clear = 1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2283      	movs	r2, #131	; 0x83
 8006af2:	2101      	movs	r1, #1
 8006af4:	5499      	strb	r1, [r3, r2]
  
  u8g2->cb = u8g2_cb;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	0010      	movs	r0, r2
 8006b06:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f7ff ffab 	bl	8006a66 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff fce2 	bl	80064dc <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2262      	movs	r2, #98	; 0x62
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	5499      	strb	r1, [r3, r2]
#endif
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b004      	add	sp, #16
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8006b36:	210f      	movs	r1, #15
 8006b38:	0008      	movs	r0, r1
 8006b3a:	187b      	adds	r3, r7, r1
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	2138      	movs	r1, #56	; 0x38
 8006b40:	5c52      	ldrb	r2, [r2, r1]
 8006b42:	701a      	strb	r2, [r3, #0]
  t *= 8;
 8006b44:	0001      	movs	r1, r0
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	187a      	adds	r2, r7, r1
 8006b4a:	7812      	ldrb	r2, [r2, #0]
 8006b4c:	00d2      	lsls	r2, r2, #3
 8006b4e:	701a      	strb	r2, [r3, #0]
  u8g2->pixel_buf_height = t;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0008      	movs	r0, r1
 8006b54:	187a      	adds	r2, r7, r1
 8006b56:	213b      	movs	r1, #59	; 0x3b
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	545a      	strb	r2, [r3, r1]
  
  t = display_info->tile_width;
 8006b5c:	0001      	movs	r1, r0
 8006b5e:	187b      	adds	r3, r7, r1
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	7c12      	ldrb	r2, [r2, #16]
 8006b64:	701a      	strb	r2, [r3, #0]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8006b66:	187b      	adds	r3, r7, r1
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b1f      	cmp	r3, #31
 8006b6c:	d903      	bls.n	8006b76 <u8g2_update_dimension_common+0x4e>
    t = 31;
 8006b6e:	230f      	movs	r3, #15
 8006b70:	18fb      	adds	r3, r7, r3
 8006b72:	221f      	movs	r2, #31
 8006b74:	701a      	strb	r2, [r3, #0]
#endif
  t *= 8;
 8006b76:	210f      	movs	r1, #15
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	187a      	adds	r2, r7, r1
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	00d2      	lsls	r2, r2, #3
 8006b80:	701a      	strb	r2, [r3, #0]
  u8g2->pixel_buf_width = t;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	0008      	movs	r0, r1
 8006b86:	183a      	adds	r2, r7, r0
 8006b88:	213a      	movs	r1, #58	; 0x3a
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	545a      	strb	r2, [r3, r1]
  
  t = u8g2->tile_curr_row;
 8006b8e:	0001      	movs	r1, r0
 8006b90:	0008      	movs	r0, r1
 8006b92:	187b      	adds	r3, r7, r1
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	2139      	movs	r1, #57	; 0x39
 8006b98:	5c52      	ldrb	r2, [r2, r1]
 8006b9a:	701a      	strb	r2, [r3, #0]
  t *= 8;
 8006b9c:	0001      	movs	r1, r0
 8006b9e:	187b      	adds	r3, r7, r1
 8006ba0:	187a      	adds	r2, r7, r1
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	00d2      	lsls	r2, r2, #3
 8006ba6:	701a      	strb	r2, [r3, #0]
  u8g2->pixel_curr_row = t;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0008      	movs	r0, r1
 8006bac:	183a      	adds	r2, r7, r0
 8006bae:	213c      	movs	r1, #60	; 0x3c
 8006bb0:	7812      	ldrb	r2, [r2, #0]
 8006bb2:	545a      	strb	r2, [r3, r1]
  
  t = u8g2->tile_buf_height;
 8006bb4:	183b      	adds	r3, r7, r0
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	2138      	movs	r1, #56	; 0x38
 8006bba:	5c52      	ldrb	r2, [r2, r1]
 8006bbc:	701a      	strb	r2, [r3, #0]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8006bbe:	0001      	movs	r1, r0
 8006bc0:	187b      	adds	r3, r7, r1
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	2139      	movs	r1, #57	; 0x39
 8006bc8:	5c52      	ldrb	r2, [r2, r1]
 8006bca:	189b      	adds	r3, r3, r2
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	7c52      	ldrb	r2, [r2, #17]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	dd08      	ble.n	8006be6 <u8g2_update_dimension_common+0xbe>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	7c59      	ldrb	r1, [r3, #17]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2239      	movs	r2, #57	; 0x39
 8006bdc:	5c9a      	ldrb	r2, [r3, r2]
 8006bde:	230f      	movs	r3, #15
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	1a8a      	subs	r2, r1, r2
 8006be4:	701a      	strb	r2, [r3, #0]
  t *= 8;
 8006be6:	200f      	movs	r0, #15
 8006be8:	183b      	adds	r3, r7, r0
 8006bea:	183a      	adds	r2, r7, r0
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	00d2      	lsls	r2, r2, #3
 8006bf0:	701a      	strb	r2, [r3, #0]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	223c      	movs	r2, #60	; 0x3c
 8006bf6:	5c99      	ldrb	r1, [r3, r2]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	223d      	movs	r2, #61	; 0x3d
 8006bfc:	5499      	strb	r1, [r3, r2]
  u8g2->buf_y1 = u8g2->buf_y0;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	223d      	movs	r2, #61	; 0x3d
 8006c02:	5c99      	ldrb	r1, [r3, r2]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	223e      	movs	r2, #62	; 0x3e
 8006c08:	5499      	strb	r1, [r3, r2]
  u8g2->buf_y1 += t;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	223e      	movs	r2, #62	; 0x3e
 8006c0e:	5c9a      	ldrb	r2, [r3, r2]
 8006c10:	183b      	adds	r3, r7, r0
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	18d3      	adds	r3, r2, r3
 8006c16:	b2d9      	uxtb	r1, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	223e      	movs	r2, #62	; 0x3e
 8006c1c:	5499      	strb	r1, [r3, r2]
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	223f      	movs	r2, #63	; 0x3f
 8006c22:	21f0      	movs	r1, #240	; 0xf0
 8006c24:	5499      	strb	r1, [r3, r2]
  if ( display_info->pixel_width <= 240 )
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	8a9b      	ldrh	r3, [r3, #20]
 8006c2a:	2bf0      	cmp	r3, #240	; 0xf0
 8006c2c:	d805      	bhi.n	8006c3a <u8g2_update_dimension_common+0x112>
    u8g2->width = display_info->pixel_width;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	8a9b      	ldrh	r3, [r3, #20]
 8006c32:	b2d9      	uxtb	r1, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	223f      	movs	r2, #63	; 0x3f
 8006c38:	5499      	strb	r1, [r3, r2]
  u8g2->height = display_info->pixel_height;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	8adb      	ldrh	r3, [r3, #22]
 8006c3e:	b2d9      	uxtb	r1, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2240      	movs	r2, #64	; 0x40
 8006c44:	5499      	strb	r1, [r3, r2]
#endif

}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b004      	add	sp, #16
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8006c4e:	b5b0      	push	{r4, r5, r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af02      	add	r7, sp, #8
 8006c54:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2245      	movs	r2, #69	; 0x45
 8006c5a:	5c99      	ldrb	r1, [r3, r2]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2247      	movs	r2, #71	; 0x47
 8006c60:	5c9c      	ldrb	r4, [r3, r2]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2246      	movs	r2, #70	; 0x46
 8006c66:	5c9d      	ldrb	r5, [r3, r2]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2248      	movs	r2, #72	; 0x48
 8006c6c:	5c9b      	ldrb	r3, [r3, r2]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	002b      	movs	r3, r5
 8006c74:	0022      	movs	r2, r4
 8006c76:	f7ff fde4 	bl	8006842 <u8g2_IsIntersection>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d104      	bne.n	8006c88 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	227c      	movs	r2, #124	; 0x7c
 8006c82:	2100      	movs	r1, #0
 8006c84:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8006c86:	e03b      	b.n	8006d00 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	227c      	movs	r2, #124	; 0x7c
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2241      	movs	r2, #65	; 0x41
 8006c94:	5c9a      	ldrb	r2, [r3, r2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2145      	movs	r1, #69	; 0x45
 8006c9a:	5c5b      	ldrb	r3, [r3, r1]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d205      	bcs.n	8006cac <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2245      	movs	r2, #69	; 0x45
 8006ca4:	5c99      	ldrb	r1, [r3, r2]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2241      	movs	r2, #65	; 0x41
 8006caa:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2242      	movs	r2, #66	; 0x42
 8006cb0:	5c9a      	ldrb	r2, [r3, r2]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2146      	movs	r1, #70	; 0x46
 8006cb6:	5c5b      	ldrb	r3, [r3, r1]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d905      	bls.n	8006cc8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2246      	movs	r2, #70	; 0x46
 8006cc0:	5c99      	ldrb	r1, [r3, r2]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2242      	movs	r2, #66	; 0x42
 8006cc6:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2243      	movs	r2, #67	; 0x43
 8006ccc:	5c9a      	ldrb	r2, [r3, r2]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2147      	movs	r1, #71	; 0x47
 8006cd2:	5c5b      	ldrb	r3, [r3, r1]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d205      	bcs.n	8006ce4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2247      	movs	r2, #71	; 0x47
 8006cdc:	5c99      	ldrb	r1, [r3, r2]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2243      	movs	r2, #67	; 0x43
 8006ce2:	5499      	strb	r1, [r3, r2]
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2244      	movs	r2, #68	; 0x44
 8006ce8:	5c9a      	ldrb	r2, [r3, r2]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2148      	movs	r1, #72	; 0x48
 8006cee:	5c5b      	ldrb	r3, [r3, r1]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d905      	bls.n	8006d00 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2248      	movs	r2, #72	; 0x48
 8006cf8:	5c99      	ldrb	r1, [r3, r2]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2244      	movs	r2, #68	; 0x44
 8006cfe:	5499      	strb	r1, [r3, r2]
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bdb0      	pop	{r4, r5, r7, pc}

08006d08 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7ff ff08 	bl	8006b28 <u8g2_update_dimension_common>
}
 8006d18:	46c0      	nop			; (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b002      	add	sp, #8
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2241      	movs	r2, #65	; 0x41
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	5499      	strb	r1, [r3, r2]
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	223f      	movs	r2, #63	; 0x3f
 8006d34:	5c99      	ldrb	r1, [r3, r2]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2242      	movs	r2, #66	; 0x42
 8006d3a:	5499      	strb	r1, [r3, r2]
  
  u8g2->user_y0 = u8g2->buf_y0;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	223d      	movs	r2, #61	; 0x3d
 8006d40:	5c99      	ldrb	r1, [r3, r2]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2243      	movs	r2, #67	; 0x43
 8006d46:	5499      	strb	r1, [r3, r2]
  u8g2->user_y1 = u8g2->buf_y1;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	223e      	movs	r2, #62	; 0x3e
 8006d4c:	5c99      	ldrb	r1, [r3, r2]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2244      	movs	r2, #68	; 0x44
 8006d52:	5499      	strb	r1, [r3, r2]
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	0018      	movs	r0, r3
 8006d58:	f7ff ff79 	bl	8006c4e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	000c      	movs	r4, r1
 8006d6e:	0010      	movs	r0, r2
 8006d70:	0019      	movs	r1, r3
 8006d72:	1cfb      	adds	r3, r7, #3
 8006d74:	1c22      	adds	r2, r4, #0
 8006d76:	701a      	strb	r2, [r3, #0]
 8006d78:	1cbb      	adds	r3, r7, #2
 8006d7a:	1c02      	adds	r2, r0, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	1c7b      	adds	r3, r7, #1
 8006d80:	1c0a      	adds	r2, r1, #0
 8006d82:	701a      	strb	r2, [r3, #0]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8006d84:	1c7b      	adds	r3, r7, #1
 8006d86:	781c      	ldrb	r4, [r3, #0]
 8006d88:	1cbb      	adds	r3, r7, #2
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	1cfb      	adds	r3, r7, #3
 8006d8e:	7819      	ldrb	r1, [r3, #0]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	2318      	movs	r3, #24
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	0023      	movs	r3, r4
 8006d9c:	f7ff fc41 	bl	8006622 <u8g2_draw_hv_line_2dir>
}
 8006da0:	46c0      	nop			; (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b003      	add	sp, #12
 8006da6:	bd90      	pop	{r4, r7, pc}

08006da8 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2226      	movs	r2, #38	; 0x26
 8006db4:	2100      	movs	r1, #0
 8006db6:	5499      	strb	r1, [r3, r2]
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b002      	add	sp, #8
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	000a      	movs	r2, r1
 8006dca:	1cfb      	adds	r3, r7, #3
 8006dcc:	701a      	strb	r2, [r3, #0]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8006dce:	1cfb      	adds	r3, r7, #3
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <u8x8_ascii_next+0x1e>
 8006dd6:	1cfb      	adds	r3, r7, #3
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b0a      	cmp	r3, #10
 8006ddc:	d101      	bne.n	8006de2 <u8x8_ascii_next+0x22>
    return 0x0ffff;	/* end of string detected*/
 8006dde:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <u8x8_ascii_next+0x30>)
 8006de0:	e002      	b.n	8006de8 <u8x8_ascii_next+0x28>
  return b;
 8006de2:	1cfb      	adds	r3, r7, #3
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0000ffff 	.word	0x0000ffff

08006df4 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	200b      	movs	r0, #11
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	1c0a      	adds	r2, r1, #0
 8006e04:	701a      	strb	r2, [r3, #0]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	691c      	ldr	r4, [r3, #16]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	183b      	adds	r3, r7, r0
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	000b      	movs	r3, r1
 8006e14:	2117      	movs	r1, #23
 8006e16:	47a0      	blx	r4
 8006e18:	0003      	movs	r3, r0
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b005      	add	sp, #20
 8006e20:	bd90      	pop	{r4, r7, pc}

08006e22 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	000a      	movs	r2, r1
 8006e2c:	1cfb      	adds	r3, r7, #3
 8006e2e:	701a      	strb	r2, [r3, #0]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8006e30:	1cfa      	adds	r2, r7, #3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2101      	movs	r1, #1
 8006e36:	0018      	movs	r0, r3
 8006e38:	f7ff ffdc 	bl	8006df4 <u8x8_byte_SendBytes>
 8006e3c:	0003      	movs	r3, r0
}
 8006e3e:	0018      	movs	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	b002      	add	sp, #8
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8006e46:	b590      	push	{r4, r7, lr}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691c      	ldr	r4, [r3, #16]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	2300      	movs	r3, #0
 8006e56:	2200      	movs	r2, #0
 8006e58:	2118      	movs	r1, #24
 8006e5a:	47a0      	blx	r4
 8006e5c:	0003      	movs	r3, r0
}
 8006e5e:	0018      	movs	r0, r3
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b003      	add	sp, #12
 8006e64:	bd90      	pop	{r4, r7, pc}

08006e66 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8006e66:	b590      	push	{r4, r7, lr}
 8006e68:	b083      	sub	sp, #12
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691c      	ldr	r4, [r3, #16]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	2300      	movs	r3, #0
 8006e76:	2200      	movs	r2, #0
 8006e78:	2119      	movs	r1, #25
 8006e7a:	47a0      	blx	r4
 8006e7c:	0003      	movs	r3, r0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b003      	add	sp, #12
 8006e84:	bd90      	pop	{r4, r7, pc}

08006e86 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006e86:	b590      	push	{r4, r7, lr}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	000a      	movs	r2, r1
 8006e90:	1cfb      	adds	r3, r7, #3
 8006e92:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68dc      	ldr	r4, [r3, #12]
 8006e98:	1cfb      	adds	r3, r7, #3
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	2115      	movs	r1, #21
 8006ea2:	47a0      	blx	r4
 8006ea4:	0003      	movs	r3, r0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b003      	add	sp, #12
 8006eac:	bd90      	pop	{r4, r7, pc}

08006eae <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8006eae:	b590      	push	{r4, r7, lr}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	000a      	movs	r2, r1
 8006eb8:	1cfb      	adds	r3, r7, #3
 8006eba:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68dc      	ldr	r4, [r3, #12]
 8006ec0:	1cfb      	adds	r3, r7, #3
 8006ec2:	781a      	ldrb	r2, [r3, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2116      	movs	r1, #22
 8006eca:	47a0      	blx	r4
 8006ecc:	0003      	movs	r3, r0
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b003      	add	sp, #12
 8006ed4:	bd90      	pop	{r4, r7, pc}

08006ed6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006ed6:	b590      	push	{r4, r7, lr}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	607a      	str	r2, [r7, #4]
 8006ee0:	200b      	movs	r0, #11
 8006ee2:	183b      	adds	r3, r7, r0
 8006ee4:	1c0a      	adds	r2, r1, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68dc      	ldr	r4, [r3, #12]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	183b      	adds	r3, r7, r0
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	000b      	movs	r3, r1
 8006ef6:	2117      	movs	r1, #23
 8006ef8:	47a0      	blx	r4
 8006efa:	0003      	movs	r3, r0
}
 8006efc:	0018      	movs	r0, r3
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b005      	add	sp, #20
 8006f02:	bd90      	pop	{r4, r7, pc}

08006f04 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68dc      	ldr	r4, [r3, #12]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	2300      	movs	r3, #0
 8006f14:	2200      	movs	r2, #0
 8006f16:	2118      	movs	r1, #24
 8006f18:	47a0      	blx	r4
 8006f1a:	0003      	movs	r3, r0
}
 8006f1c:	0018      	movs	r0, r3
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b003      	add	sp, #12
 8006f22:	bd90      	pop	{r4, r7, pc}

08006f24 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68dc      	ldr	r4, [r3, #12]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	2300      	movs	r3, #0
 8006f34:	2200      	movs	r2, #0
 8006f36:	2119      	movs	r1, #25
 8006f38:	47a0      	blx	r4
 8006f3a:	0003      	movs	r3, r0
}
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b003      	add	sp, #12
 8006f42:	bd90      	pop	{r4, r7, pc}

08006f44 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006f4e:	210f      	movs	r1, #15
 8006f50:	187b      	adds	r3, r7, r1
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	7812      	ldrb	r2, [r2, #0]
 8006f56:	701a      	strb	r2, [r3, #0]
    data++;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b17      	cmp	r3, #23
 8006f64:	d01b      	beq.n	8006f9e <u8x8_cad_SendSequence+0x5a>
 8006f66:	dc02      	bgt.n	8006f6e <u8x8_cad_SendSequence+0x2a>
 8006f68:	2b15      	cmp	r3, #21
 8006f6a:	db42      	blt.n	8006ff2 <u8x8_cad_SendSequence+0xae>
 8006f6c:	e004      	b.n	8006f78 <u8x8_cad_SendSequence+0x34>
 8006f6e:	2b19      	cmp	r3, #25
 8006f70:	dd24      	ble.n	8006fbc <u8x8_cad_SendSequence+0x78>
 8006f72:	2bfe      	cmp	r3, #254	; 0xfe
 8006f74:	d02c      	beq.n	8006fd0 <u8x8_cad_SendSequence+0x8c>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006f76:	e03c      	b.n	8006ff2 <u8x8_cad_SendSequence+0xae>
	  v = *data;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	210e      	movs	r1, #14
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	701a      	strb	r2, [r3, #0]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68dc      	ldr	r4, [r3, #12]
 8006f86:	187b      	adds	r3, r7, r1
 8006f88:	781a      	ldrb	r2, [r3, #0]
 8006f8a:	230f      	movs	r3, #15
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	7819      	ldrb	r1, [r3, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	2300      	movs	r3, #0
 8006f94:	47a0      	blx	r4
	  data++;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	603b      	str	r3, [r7, #0]
	  break;
 8006f9c:	e028      	b.n	8006ff0 <u8x8_cad_SendSequence+0xac>
	  v = *data;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	781a      	ldrb	r2, [r3, #0]
 8006fa2:	210e      	movs	r1, #14
 8006fa4:	187b      	adds	r3, r7, r1
 8006fa6:	701a      	strb	r2, [r3, #0]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006fa8:	187a      	adds	r2, r7, r1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2101      	movs	r1, #1
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7ff ff91 	bl	8006ed6 <u8x8_cad_SendData>
	  data++;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	603b      	str	r3, [r7, #0]
	  break;
 8006fba:	e019      	b.n	8006ff0 <u8x8_cad_SendSequence+0xac>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68dc      	ldr	r4, [r3, #12]
 8006fc0:	230f      	movs	r3, #15
 8006fc2:	18fb      	adds	r3, r7, r3
 8006fc4:	7819      	ldrb	r1, [r3, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	2200      	movs	r2, #0
 8006fcc:	47a0      	blx	r4
	  break;
 8006fce:	e00f      	b.n	8006ff0 <u8x8_cad_SendSequence+0xac>
	  v = *data;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	210e      	movs	r1, #14
 8006fd6:	187b      	adds	r3, r7, r1
 8006fd8:	701a      	strb	r2, [r3, #0]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006fda:	187b      	adds	r3, r7, r1
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2129      	movs	r1, #41	; 0x29
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f000 fa98 	bl	8007518 <u8x8_gpio_call>
	  data++;
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	603b      	str	r3, [r7, #0]
	  break;
 8006fee:	46c0      	nop			; (mov r8, r8)
    cmd = *data;
 8006ff0:	e7ad      	b.n	8006f4e <u8x8_cad_SendSequence+0xa>
	return;
 8006ff2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b005      	add	sp, #20
 8006ff8:	bd90      	pop	{r4, r7, pc}

08006ffa <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8006ffa:	b5b0      	push	{r4, r5, r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	607a      	str	r2, [r7, #4]
 8007004:	250b      	movs	r5, #11
 8007006:	197b      	adds	r3, r7, r5
 8007008:	1c0a      	adds	r2, r1, #0
 800700a:	701a      	strb	r2, [r3, #0]
    u8x8_byte_StartTransfer(u8x8);    
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	0018      	movs	r0, r3
 8007010:	f7ff ff19 	bl	8006e46 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2140      	movs	r1, #64	; 0x40
 8007018:	0018      	movs	r0, r3
 800701a:	f7ff ff02 	bl	8006e22 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	691c      	ldr	r4, [r3, #16]
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	197b      	adds	r3, r7, r5
 8007026:	781a      	ldrb	r2, [r3, #0]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	000b      	movs	r3, r1
 800702c:	2117      	movs	r1, #23
 800702e:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	0018      	movs	r0, r3
 8007034:	f7ff ff17 	bl	8006e66 <u8x8_byte_EndTransfer>
}
 8007038:	46c0      	nop			; (mov r8, r8)
 800703a:	46bd      	mov	sp, r7
 800703c:	b004      	add	sp, #16
 800703e:	bdb0      	pop	{r4, r5, r7, pc}

08007040 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007040:	b5b0      	push	{r4, r5, r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	0008      	movs	r0, r1
 800704a:	0011      	movs	r1, r2
 800704c:	607b      	str	r3, [r7, #4]
 800704e:	240b      	movs	r4, #11
 8007050:	193b      	adds	r3, r7, r4
 8007052:	1c02      	adds	r2, r0, #0
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	230a      	movs	r3, #10
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	1c0a      	adds	r2, r1, #0
 800705c:	701a      	strb	r2, [r3, #0]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800705e:	193b      	adds	r3, r7, r4
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	3b14      	subs	r3, #20
 8007064:	2b05      	cmp	r3, #5
 8007066:	d900      	bls.n	800706a <u8x8_cad_ssd13xx_fast_i2c+0x2a>
 8007068:	e07c      	b.n	8007164 <u8x8_cad_ssd13xx_fast_i2c+0x124>
 800706a:	009a      	lsls	r2, r3, #2
 800706c:	4b41      	ldr	r3, [pc, #260]	; (8007174 <u8x8_cad_ssd13xx_fast_i2c+0x134>)
 800706e:	18d3      	adds	r3, r2, r3
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	469f      	mov	pc, r3
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8007074:	4b40      	ldr	r3, [pc, #256]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <u8x8_cad_ssd13xx_fast_i2c+0x44>
	 u8x8_byte_EndTransfer(u8x8); 
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0018      	movs	r0, r3
 8007080:	f7ff fef1 	bl	8006e66 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0018      	movs	r0, r3
 8007088:	f7ff fedd 	bl	8006e46 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2100      	movs	r1, #0
 8007090:	0018      	movs	r0, r3
 8007092:	f7ff fec6 	bl	8006e22 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007096:	230a      	movs	r3, #10
 8007098:	18fb      	adds	r3, r7, r3
 800709a:	781a      	ldrb	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0011      	movs	r1, r2
 80070a0:	0018      	movs	r0, r3
 80070a2:	f7ff febe 	bl	8006e22 <u8x8_byte_SendByte>
      in_transfer = 1;
 80070a6:	4b34      	ldr	r3, [pc, #208]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 80070a8:	2201      	movs	r2, #1
 80070aa:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 80070ac:	e05c      	b.n	8007168 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 80070ae:	230a      	movs	r3, #10
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	0011      	movs	r1, r2
 80070b8:	0018      	movs	r0, r3
 80070ba:	f7ff feb2 	bl	8006e22 <u8x8_byte_SendByte>
      break;      
 80070be:	e053      	b.n	8007168 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 80070c0:	4b2d      	ldr	r3, [pc, #180]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <u8x8_cad_ssd13xx_fast_i2c+0x90>
	u8x8_byte_EndTransfer(u8x8); 
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	0018      	movs	r0, r3
 80070cc:	f7ff fecb 	bl	8006e66 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80070d4:	e00e      	b.n	80070f4 <u8x8_cad_ssd13xx_fast_i2c+0xb4>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2118      	movs	r1, #24
 80070dc:	0018      	movs	r0, r3
 80070de:	f7ff ff8c 	bl	8006ffa <u8x8_i2c_data_transfer>
	arg_int-=24;
 80070e2:	220a      	movs	r2, #10
 80070e4:	18bb      	adds	r3, r7, r2
 80070e6:	18ba      	adds	r2, r7, r2
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	3a18      	subs	r2, #24
 80070ec:	701a      	strb	r2, [r3, #0]
	p+=24;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3318      	adds	r3, #24
 80070f2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80070f4:	230a      	movs	r3, #10
 80070f6:	18fb      	adds	r3, r7, r3
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b18      	cmp	r3, #24
 80070fc:	d8eb      	bhi.n	80070d6 <u8x8_cad_ssd13xx_fast_i2c+0x96>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	230a      	movs	r3, #10
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	7819      	ldrb	r1, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff ff76 	bl	8006ffa <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
      break;
 8007114:	e028      	b.n	8007168 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2224      	movs	r2, #36	; 0x24
 800711a:	5c9b      	ldrb	r3, [r3, r2]
 800711c:	2bff      	cmp	r3, #255	; 0xff
 800711e:	d103      	bne.n	8007128 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
	u8x8->i2c_address = 0x078;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2224      	movs	r2, #36	; 0x24
 8007124:	2178      	movs	r1, #120	; 0x78
 8007126:	5499      	strb	r1, [r3, r2]
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691c      	ldr	r4, [r3, #16]
 800712c:	687d      	ldr	r5, [r7, #4]
 800712e:	230a      	movs	r3, #10
 8007130:	18fb      	adds	r3, r7, r3
 8007132:	781a      	ldrb	r2, [r3, #0]
 8007134:	230b      	movs	r3, #11
 8007136:	18fb      	adds	r3, r7, r3
 8007138:	7819      	ldrb	r1, [r3, #0]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	002b      	movs	r3, r5
 800713e:	47a0      	blx	r4
 8007140:	0003      	movs	r3, r0
 8007142:	e012      	b.n	800716a <u8x8_cad_ssd13xx_fast_i2c+0x12a>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
      break;
 800714a:	e00d      	b.n	8007168 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <u8x8_cad_ssd13xx_fast_i2c+0x11c>
	u8x8_byte_EndTransfer(u8x8); 
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	0018      	movs	r0, r3
 8007158:	f7ff fe85 	bl	8006e66 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <u8x8_cad_ssd13xx_fast_i2c+0x138>)
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
      break;
 8007162:	e001      	b.n	8007168 <u8x8_cad_ssd13xx_fast_i2c+0x128>
    default:
      return 0;
 8007164:	2300      	movs	r3, #0
 8007166:	e000      	b.n	800716a <u8x8_cad_ssd13xx_fast_i2c+0x12a>
  }
  return 1;
 8007168:	2301      	movs	r3, #1
}
 800716a:	0018      	movs	r0, r3
 800716c:	46bd      	mov	sp, r7
 800716e:	b006      	add	sp, #24
 8007170:	bdb0      	pop	{r4, r5, r7, pc}
 8007172:	46c0      	nop			; (mov r8, r8)
 8007174:	08009e14 	.word	0x08009e14
 8007178:	200004b4 	.word	0x200004b4

0800717c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	0008      	movs	r0, r1
 8007186:	0011      	movs	r1, r2
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	240b      	movs	r4, #11
 800718c:	193b      	adds	r3, r7, r4
 800718e:	1c02      	adds	r2, r0, #0
 8007190:	701a      	strb	r2, [r3, #0]
 8007192:	230a      	movs	r3, #10
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	1c0a      	adds	r2, r1, #0
 8007198:	701a      	strb	r2, [r3, #0]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800719a:	193b      	adds	r3, r7, r4
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b0d      	cmp	r3, #13
 80071a0:	d01b      	beq.n	80071da <u8x8_d_ssd1306_sh1106_generic+0x5e>
 80071a2:	dc02      	bgt.n	80071aa <u8x8_d_ssd1306_sh1106_generic+0x2e>
 80071a4:	2b0b      	cmp	r3, #11
 80071a6:	d005      	beq.n	80071b4 <u8x8_d_ssd1306_sh1106_generic+0x38>
 80071a8:	e0a8      	b.n	80072fc <u8x8_d_ssd1306_sh1106_generic+0x180>
 80071aa:	2b0e      	cmp	r3, #14
 80071ac:	d034      	beq.n	8007218 <u8x8_d_ssd1306_sh1106_generic+0x9c>
 80071ae:	2b0f      	cmp	r3, #15
 80071b0:	d048      	beq.n	8007244 <u8x8_d_ssd1306_sh1106_generic+0xc8>
 80071b2:	e0a3      	b.n	80072fc <u8x8_d_ssd1306_sh1106_generic+0x180>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80071b4:	230a      	movs	r3, #10
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d106      	bne.n	80071cc <u8x8_d_ssd1306_sh1106_generic+0x50>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80071be:	4a53      	ldr	r2, [pc, #332]	; (800730c <u8x8_d_ssd1306_sh1106_generic+0x190>)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0011      	movs	r1, r2
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7ff febd 	bl	8006f44 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80071ca:	e099      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80071cc:	4a50      	ldr	r2, [pc, #320]	; (8007310 <u8x8_d_ssd1306_sh1106_generic+0x194>)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7ff feb6 	bl	8006f44 <u8x8_cad_SendSequence>
      break;
 80071d8:	e092      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80071da:	230a      	movs	r3, #10
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10c      	bne.n	80071fe <u8x8_d_ssd1306_sh1106_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80071e4:	4a4b      	ldr	r2, [pc, #300]	; (8007314 <u8x8_d_ssd1306_sh1106_generic+0x198>)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	0011      	movs	r1, r2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f7ff feaa 	bl	8006f44 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	7c99      	ldrb	r1, [r3, #18]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2222      	movs	r2, #34	; 0x22
 80071fa:	5499      	strb	r1, [r3, r2]
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80071fc:	e080      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80071fe:	4a46      	ldr	r2, [pc, #280]	; (8007318 <u8x8_d_ssd1306_sh1106_generic+0x19c>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	0011      	movs	r1, r2
 8007204:	0018      	movs	r0, r3
 8007206:	f7ff fe9d 	bl	8006f44 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	7cd9      	ldrb	r1, [r3, #19]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2222      	movs	r2, #34	; 0x22
 8007214:	5499      	strb	r1, [r3, r2]
      break;
 8007216:	e073      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	0018      	movs	r0, r3
 800721c:	f7ff fe72 	bl	8006f04 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2181      	movs	r1, #129	; 0x81
 8007224:	0018      	movs	r0, r3
 8007226:	f7ff fe2e 	bl	8006e86 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800722a:	230a      	movs	r3, #10
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	781a      	ldrb	r2, [r3, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	0011      	movs	r1, r2
 8007234:	0018      	movs	r0, r3
 8007236:	f7ff fe3a 	bl	8006eae <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	0018      	movs	r0, r3
 800723e:	f7ff fe71 	bl	8006f24 <u8x8_cad_EndTransfer>
      break;
 8007242:	e05d      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	0018      	movs	r0, r3
 8007248:	f7ff fe5c 	bl	8006f04 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800724c:	2417      	movs	r4, #23
 800724e:	193b      	adds	r3, r7, r4
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7952      	ldrb	r2, [r2, #5]
 8007254:	701a      	strb	r2, [r3, #0]
      x *= 8;
 8007256:	193b      	adds	r3, r7, r4
 8007258:	193a      	adds	r2, r7, r4
 800725a:	7812      	ldrb	r2, [r2, #0]
 800725c:	00d2      	lsls	r2, r2, #3
 800725e:	701a      	strb	r2, [r3, #0]
      x += u8x8->x_offset;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2222      	movs	r2, #34	; 0x22
 8007264:	5c99      	ldrb	r1, [r3, r2]
 8007266:	193b      	adds	r3, r7, r4
 8007268:	193a      	adds	r2, r7, r4
 800726a:	7812      	ldrb	r2, [r2, #0]
 800726c:	188a      	adds	r2, r1, r2
 800726e:	701a      	strb	r2, [r3, #0]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2140      	movs	r1, #64	; 0x40
 8007274:	0018      	movs	r0, r3
 8007276:	f7ff fe06 	bl	8006e86 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800727a:	193b      	adds	r3, r7, r4
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2210      	movs	r2, #16
 8007284:	4313      	orrs	r3, r2
 8007286:	b2da      	uxtb	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0011      	movs	r1, r2
 800728c:	0018      	movs	r0, r3
 800728e:	f7ff fdfa 	bl	8006e86 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8007292:	193b      	adds	r3, r7, r4
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	220f      	movs	r2, #15
 8007298:	4013      	ands	r3, r2
 800729a:	b2da      	uxtb	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0011      	movs	r1, r2
 80072a0:	0018      	movs	r0, r3
 80072a2:	f7ff fe04 	bl	8006eae <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	799b      	ldrb	r3, [r3, #6]
 80072aa:	2250      	movs	r2, #80	; 0x50
 80072ac:	4252      	negs	r2, r2
 80072ae:	4313      	orrs	r3, r2
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	0011      	movs	r1, r2
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7ff fdf9 	bl	8006eae <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80072bc:	2116      	movs	r1, #22
 80072be:	187b      	adds	r3, r7, r1
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	7912      	ldrb	r2, [r2, #4]
 80072c4:	701a      	strb	r2, [r3, #0]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80072cc:	187b      	adds	r3, r7, r1
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	b2d9      	uxtb	r1, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0018      	movs	r0, r3
 80072da:	f7ff fdfc 	bl	8006ed6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80072de:	210a      	movs	r1, #10
 80072e0:	187b      	adds	r3, r7, r1
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	187b      	adds	r3, r7, r1
 80072e6:	3a01      	subs	r2, #1
 80072e8:	701a      	strb	r2, [r3, #0]
      } while( arg_int > 0 );
 80072ea:	187b      	adds	r3, r7, r1
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e4      	bne.n	80072bc <u8x8_d_ssd1306_sh1106_generic+0x140>
      
      u8x8_cad_EndTransfer(u8x8);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff fe15 	bl	8006f24 <u8x8_cad_EndTransfer>
      break;
 80072fa:	e001      	b.n	8007300 <u8x8_d_ssd1306_sh1106_generic+0x184>
    default:
      return 0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <u8x8_d_ssd1306_sh1106_generic+0x186>
  }
  return 1;
 8007300:	2301      	movs	r3, #1
}
 8007302:	0018      	movs	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	b007      	add	sp, #28
 8007308:	bd90      	pop	{r4, r7, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	08009e64 	.word	0x08009e64
 8007310:	08009e6c 	.word	0x08009e6c
 8007314:	08009e74 	.word	0x08009e74
 8007318:	08009e7c 	.word	0x08009e7c

0800731c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	0008      	movs	r0, r1
 8007326:	0011      	movs	r1, r2
 8007328:	607b      	str	r3, [r7, #4]
 800732a:	250b      	movs	r5, #11
 800732c:	197b      	adds	r3, r7, r5
 800732e:	1c02      	adds	r2, r0, #0
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	200a      	movs	r0, #10
 8007334:	183b      	adds	r3, r7, r0
 8007336:	1c0a      	adds	r2, r1, #0
 8007338:	701a      	strb	r2, [r3, #0]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800733a:	687c      	ldr	r4, [r7, #4]
 800733c:	183b      	adds	r3, r7, r0
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	197b      	adds	r3, r7, r5
 8007342:	7819      	ldrb	r1, [r3, #0]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	0023      	movs	r3, r4
 8007348:	f7ff ff18 	bl	800717c <u8x8_d_ssd1306_sh1106_generic>
 800734c:	1e03      	subs	r3, r0, #0
 800734e:	d001      	beq.n	8007354 <u8x8_d_ssd1306_128x64_noname+0x38>
    return 1;
 8007350:	2301      	movs	r3, #1
 8007352:	e01b      	b.n	800738c <u8x8_d_ssd1306_128x64_noname+0x70>
  
  switch(msg)
 8007354:	230b      	movs	r3, #11
 8007356:	18fb      	adds	r3, r7, r3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b09      	cmp	r3, #9
 800735c:	d00c      	beq.n	8007378 <u8x8_d_ssd1306_128x64_noname+0x5c>
 800735e:	2b0a      	cmp	r3, #10
 8007360:	d111      	bne.n	8007386 <u8x8_d_ssd1306_128x64_noname+0x6a>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	0018      	movs	r0, r3
 8007366:	f000 f82b 	bl	80073c0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <u8x8_d_ssd1306_128x64_noname+0x78>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	0011      	movs	r1, r2
 8007370:	0018      	movs	r0, r3
 8007372:	f7ff fde7 	bl	8006f44 <u8x8_cad_SendSequence>
      break;
 8007376:	e008      	b.n	800738a <u8x8_d_ssd1306_128x64_noname+0x6e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8007378:	4a07      	ldr	r2, [pc, #28]	; (8007398 <u8x8_d_ssd1306_128x64_noname+0x7c>)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	0011      	movs	r1, r2
 800737e:	0018      	movs	r0, r3
 8007380:	f000 f80c 	bl	800739c <u8x8_d_helper_display_setup_memory>
      break;
 8007384:	e001      	b.n	800738a <u8x8_d_ssd1306_128x64_noname+0x6e>
    default:
      return 0;
 8007386:	2300      	movs	r3, #0
 8007388:	e000      	b.n	800738c <u8x8_d_ssd1306_128x64_noname+0x70>
  }
  return 1;
 800738a:	2301      	movs	r3, #1
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bdb0      	pop	{r4, r5, r7, pc}
 8007394:	08009e2c 	.word	0x08009e2c
 8007398:	08009e84 	.word	0x08009e84

0800739c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	7c99      	ldrb	r1, [r3, #18]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2222      	movs	r2, #34	; 0x22
 80073b6:	5499      	strb	r1, [r3, r2]
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}

080073c0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695c      	ldr	r4, [r3, #20]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	2300      	movs	r3, #0
 80073d0:	2200      	movs	r2, #0
 80073d2:	2128      	movs	r1, #40	; 0x28
 80073d4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68dc      	ldr	r4, [r3, #12]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	2114      	movs	r1, #20
 80073e2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	214b      	movs	r1, #75	; 0x4b
 80073ea:	0018      	movs	r0, r3
 80073ec:	f000 f894 	bl	8007518 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	791a      	ldrb	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2129      	movs	r1, #41	; 0x29
 80073fa:	0018      	movs	r0, r3
 80073fc:	f000 f88c 	bl	8007518 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	214b      	movs	r1, #75	; 0x4b
 8007406:	0018      	movs	r0, r3
 8007408:	f000 f886 	bl	8007518 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	791a      	ldrb	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2129      	movs	r1, #41	; 0x29
 8007416:	0018      	movs	r0, r3
 8007418:	f000 f87e 	bl	8007518 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	214b      	movs	r1, #75	; 0x4b
 8007422:	0018      	movs	r0, r3
 8007424:	f000 f878 	bl	8007518 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	795a      	ldrb	r2, [r3, #5]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2129      	movs	r1, #41	; 0x29
 8007432:	0018      	movs	r0, r3
 8007434:	f000 f870 	bl	8007518 <u8x8_gpio_call>
}    
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b003      	add	sp, #12
 800743e:	bd90      	pop	{r4, r7, pc}

08007440 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	000c      	movs	r4, r1
 800744a:	0010      	movs	r0, r2
 800744c:	0019      	movs	r1, r3
 800744e:	1cfb      	adds	r3, r7, #3
 8007450:	1c22      	adds	r2, r4, #0
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	1cbb      	adds	r3, r7, #2
 8007456:	1c02      	adds	r2, r0, #0
 8007458:	701a      	strb	r2, [r3, #0]
 800745a:	1c7b      	adds	r3, r7, #1
 800745c:	1c0a      	adds	r2, r1, #0
 800745e:	701a      	strb	r2, [r3, #0]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007460:	2108      	movs	r1, #8
 8007462:	187b      	adds	r3, r7, r1
 8007464:	1cfa      	adds	r2, r7, #3
 8007466:	7812      	ldrb	r2, [r2, #0]
 8007468:	715a      	strb	r2, [r3, #5]
  tile.y_pos = y;
 800746a:	187b      	adds	r3, r7, r1
 800746c:	1cba      	adds	r2, r7, #2
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	719a      	strb	r2, [r3, #6]
  tile.cnt = cnt;
 8007472:	187b      	adds	r3, r7, r1
 8007474:	1c7a      	adds	r2, r7, #1
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	711a      	strb	r2, [r3, #4]
  tile.tile_ptr = tile_ptr;
 800747a:	187b      	adds	r3, r7, r1
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	601a      	str	r2, [r3, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689c      	ldr	r4, [r3, #8]
 8007484:	187b      	adds	r3, r7, r1
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	210f      	movs	r1, #15
 800748c:	47a0      	blx	r4
 800748e:	0003      	movs	r3, r0
}
 8007490:	0018      	movs	r0, r3
 8007492:	46bd      	mov	sp, r7
 8007494:	b005      	add	sp, #20
 8007496:	bd90      	pop	{r4, r7, pc}

08007498 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007498:	b590      	push	{r4, r7, lr}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689c      	ldr	r4, [r3, #8]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	2300      	movs	r3, #0
 80074a8:	2200      	movs	r2, #0
 80074aa:	2109      	movs	r1, #9
 80074ac:	47a0      	blx	r4
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b003      	add	sp, #12
 80074b4:	bd90      	pop	{r4, r7, pc}

080074b6 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80074b6:	b590      	push	{r4, r7, lr}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	689c      	ldr	r4, [r3, #8]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	2300      	movs	r3, #0
 80074c6:	2200      	movs	r2, #0
 80074c8:	210a      	movs	r1, #10
 80074ca:	47a0      	blx	r4
}
 80074cc:	46c0      	nop			; (mov r8, r8)
 80074ce:	46bd      	mov	sp, r7
 80074d0:	b003      	add	sp, #12
 80074d2:	bd90      	pop	{r4, r7, pc}

080074d4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	000a      	movs	r2, r1
 80074de:	1cfb      	adds	r3, r7, #3
 80074e0:	701a      	strb	r2, [r3, #0]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689c      	ldr	r4, [r3, #8]
 80074e6:	1cfb      	adds	r3, r7, #3
 80074e8:	781a      	ldrb	r2, [r3, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	2300      	movs	r3, #0
 80074ee:	210b      	movs	r1, #11
 80074f0:	47a0      	blx	r4
}
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b003      	add	sp, #12
 80074f8:	bd90      	pop	{r4, r7, pc}

080074fa <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80074fa:	b590      	push	{r4, r7, lr}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689c      	ldr	r4, [r3, #8]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	2300      	movs	r3, #0
 800750a:	2200      	movs	r2, #0
 800750c:	2110      	movs	r1, #16
 800750e:	47a0      	blx	r4
}
 8007510:	46c0      	nop			; (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b003      	add	sp, #12
 8007516:	bd90      	pop	{r4, r7, pc}

08007518 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	0008      	movs	r0, r1
 8007522:	0011      	movs	r1, r2
 8007524:	1cfb      	adds	r3, r7, #3
 8007526:	1c02      	adds	r2, r0, #0
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	1cbb      	adds	r3, r7, #2
 800752c:	1c0a      	adds	r2, r1, #0
 800752e:	701a      	strb	r2, [r3, #0]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	695c      	ldr	r4, [r3, #20]
 8007534:	1cbb      	adds	r3, r7, #2
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	1cfb      	adds	r3, r7, #3
 800753a:	7819      	ldrb	r1, [r3, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	2300      	movs	r3, #0
 8007540:	47a0      	blx	r4
}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	b003      	add	sp, #12
 8007548:	bd90      	pop	{r4, r7, pc}

0800754a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	0008      	movs	r0, r1
 8007554:	0011      	movs	r1, r2
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	230b      	movs	r3, #11
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	1c02      	adds	r2, r0, #0
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	230a      	movs	r3, #10
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	1c0a      	adds	r2, r1, #0
 8007566:	701a      	strb	r2, [r3, #0]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007568:	2300      	movs	r3, #0
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <u8x8_SetupDefaults+0x54>)
 8007586:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a0f      	ldr	r2, [pc, #60]	; (80075c8 <u8x8_SetupDefaults+0x54>)
 800758c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a0d      	ldr	r2, [pc, #52]	; (80075c8 <u8x8_SetupDefaults+0x54>)
 8007592:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a0c      	ldr	r2, [pc, #48]	; (80075c8 <u8x8_SetupDefaults+0x54>)
 8007598:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2223      	movs	r2, #35	; 0x23
 800759e:	2100      	movs	r1, #0
 80075a0:	5499      	strb	r1, [r3, r2]
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2226      	movs	r2, #38	; 0x26
 80075a6:	2100      	movs	r1, #0
 80075a8:	5499      	strb	r1, [r3, r2]
    u8x8->bus_clock = 0;		/* issue 769 */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2224      	movs	r2, #36	; 0x24
 80075b4:	21ff      	movs	r1, #255	; 0xff
 80075b6:	5499      	strb	r1, [r3, r2]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2228      	movs	r2, #40	; 0x28
 80075bc:	21ff      	movs	r1, #255	; 0xff
 80075be:	5499      	strb	r1, [r3, r2]
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80075c0:	46c0      	nop			; (mov r8, r8)
 80075c2:	46bd      	mov	sp, r7
 80075c4:	b002      	add	sp, #8
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	0800754b 	.word	0x0800754b

080075cc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	0018      	movs	r0, r3
 80075de:	f7ff ffc9 	bl	8007574 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f7ff ff4b 	bl	8007498 <u8x8_SetupMemory>
}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	46bd      	mov	sp, r7
 8007606:	b004      	add	sp, #16
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <__errno>:
 800760c:	4b01      	ldr	r3, [pc, #4]	; (8007614 <__errno+0x8>)
 800760e:	6818      	ldr	r0, [r3, #0]
 8007610:	4770      	bx	lr
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	2000000c 	.word	0x2000000c

08007618 <__libc_init_array>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	2600      	movs	r6, #0
 800761c:	4d0c      	ldr	r5, [pc, #48]	; (8007650 <__libc_init_array+0x38>)
 800761e:	4c0d      	ldr	r4, [pc, #52]	; (8007654 <__libc_init_array+0x3c>)
 8007620:	1b64      	subs	r4, r4, r5
 8007622:	10a4      	asrs	r4, r4, #2
 8007624:	42a6      	cmp	r6, r4
 8007626:	d109      	bne.n	800763c <__libc_init_array+0x24>
 8007628:	2600      	movs	r6, #0
 800762a:	f001 f815 	bl	8008658 <_init>
 800762e:	4d0a      	ldr	r5, [pc, #40]	; (8007658 <__libc_init_array+0x40>)
 8007630:	4c0a      	ldr	r4, [pc, #40]	; (800765c <__libc_init_array+0x44>)
 8007632:	1b64      	subs	r4, r4, r5
 8007634:	10a4      	asrs	r4, r4, #2
 8007636:	42a6      	cmp	r6, r4
 8007638:	d105      	bne.n	8007646 <__libc_init_array+0x2e>
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	00b3      	lsls	r3, r6, #2
 800763e:	58eb      	ldr	r3, [r5, r3]
 8007640:	4798      	blx	r3
 8007642:	3601      	adds	r6, #1
 8007644:	e7ee      	b.n	8007624 <__libc_init_array+0xc>
 8007646:	00b3      	lsls	r3, r6, #2
 8007648:	58eb      	ldr	r3, [r5, r3]
 800764a:	4798      	blx	r3
 800764c:	3601      	adds	r6, #1
 800764e:	e7f2      	b.n	8007636 <__libc_init_array+0x1e>
 8007650:	08009f3c 	.word	0x08009f3c
 8007654:	08009f3c 	.word	0x08009f3c
 8007658:	08009f3c 	.word	0x08009f3c
 800765c:	08009f40 	.word	0x08009f40

08007660 <memset>:
 8007660:	0003      	movs	r3, r0
 8007662:	1812      	adds	r2, r2, r0
 8007664:	4293      	cmp	r3, r2
 8007666:	d100      	bne.n	800766a <memset+0xa>
 8007668:	4770      	bx	lr
 800766a:	7019      	strb	r1, [r3, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	e7f9      	b.n	8007664 <memset+0x4>

08007670 <_puts_r>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	0005      	movs	r5, r0
 8007674:	000e      	movs	r6, r1
 8007676:	2800      	cmp	r0, #0
 8007678:	d004      	beq.n	8007684 <_puts_r+0x14>
 800767a:	6983      	ldr	r3, [r0, #24]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <_puts_r+0x14>
 8007680:	f000 fa44 	bl	8007b0c <__sinit>
 8007684:	69ab      	ldr	r3, [r5, #24]
 8007686:	68ac      	ldr	r4, [r5, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <_puts_r+0x22>
 800768c:	0028      	movs	r0, r5
 800768e:	f000 fa3d 	bl	8007b0c <__sinit>
 8007692:	4b24      	ldr	r3, [pc, #144]	; (8007724 <_puts_r+0xb4>)
 8007694:	429c      	cmp	r4, r3
 8007696:	d10f      	bne.n	80076b8 <_puts_r+0x48>
 8007698:	686c      	ldr	r4, [r5, #4]
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	071b      	lsls	r3, r3, #28
 800769e:	d502      	bpl.n	80076a6 <_puts_r+0x36>
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11f      	bne.n	80076e6 <_puts_r+0x76>
 80076a6:	0021      	movs	r1, r4
 80076a8:	0028      	movs	r0, r5
 80076aa:	f000 f8c1 	bl	8007830 <__swsetup_r>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d019      	beq.n	80076e6 <_puts_r+0x76>
 80076b2:	2001      	movs	r0, #1
 80076b4:	4240      	negs	r0, r0
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <_puts_r+0xb8>)
 80076ba:	429c      	cmp	r4, r3
 80076bc:	d101      	bne.n	80076c2 <_puts_r+0x52>
 80076be:	68ac      	ldr	r4, [r5, #8]
 80076c0:	e7eb      	b.n	800769a <_puts_r+0x2a>
 80076c2:	4b1a      	ldr	r3, [pc, #104]	; (800772c <_puts_r+0xbc>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d1e8      	bne.n	800769a <_puts_r+0x2a>
 80076c8:	68ec      	ldr	r4, [r5, #12]
 80076ca:	e7e6      	b.n	800769a <_puts_r+0x2a>
 80076cc:	3601      	adds	r6, #1
 80076ce:	60a3      	str	r3, [r4, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da04      	bge.n	80076de <_puts_r+0x6e>
 80076d4:	69a2      	ldr	r2, [r4, #24]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	dc16      	bgt.n	8007708 <_puts_r+0x98>
 80076da:	290a      	cmp	r1, #10
 80076dc:	d014      	beq.n	8007708 <_puts_r+0x98>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	6022      	str	r2, [r4, #0]
 80076e4:	7019      	strb	r1, [r3, #0]
 80076e6:	68a3      	ldr	r3, [r4, #8]
 80076e8:	7831      	ldrb	r1, [r6, #0]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d1ed      	bne.n	80076cc <_puts_r+0x5c>
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da0f      	bge.n	8007716 <_puts_r+0xa6>
 80076f6:	0022      	movs	r2, r4
 80076f8:	310a      	adds	r1, #10
 80076fa:	0028      	movs	r0, r5
 80076fc:	f000 f842 	bl	8007784 <__swbuf_r>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	d0d6      	beq.n	80076b2 <_puts_r+0x42>
 8007704:	200a      	movs	r0, #10
 8007706:	e7d6      	b.n	80076b6 <_puts_r+0x46>
 8007708:	0022      	movs	r2, r4
 800770a:	0028      	movs	r0, r5
 800770c:	f000 f83a 	bl	8007784 <__swbuf_r>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d1e8      	bne.n	80076e6 <_puts_r+0x76>
 8007714:	e7cd      	b.n	80076b2 <_puts_r+0x42>
 8007716:	200a      	movs	r0, #10
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	6022      	str	r2, [r4, #0]
 800771e:	7018      	strb	r0, [r3, #0]
 8007720:	e7c9      	b.n	80076b6 <_puts_r+0x46>
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	08009ec0 	.word	0x08009ec0
 8007728:	08009ee0 	.word	0x08009ee0
 800772c:	08009ea0 	.word	0x08009ea0

08007730 <puts>:
 8007730:	b510      	push	{r4, lr}
 8007732:	4b03      	ldr	r3, [pc, #12]	; (8007740 <puts+0x10>)
 8007734:	0001      	movs	r1, r0
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	f7ff ff9a 	bl	8007670 <_puts_r>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	2000000c 	.word	0x2000000c

08007744 <siprintf>:
 8007744:	b40e      	push	{r1, r2, r3}
 8007746:	b500      	push	{lr}
 8007748:	490b      	ldr	r1, [pc, #44]	; (8007778 <siprintf+0x34>)
 800774a:	b09c      	sub	sp, #112	; 0x70
 800774c:	ab1d      	add	r3, sp, #116	; 0x74
 800774e:	9002      	str	r0, [sp, #8]
 8007750:	9006      	str	r0, [sp, #24]
 8007752:	9107      	str	r1, [sp, #28]
 8007754:	9104      	str	r1, [sp, #16]
 8007756:	4809      	ldr	r0, [pc, #36]	; (800777c <siprintf+0x38>)
 8007758:	4909      	ldr	r1, [pc, #36]	; (8007780 <siprintf+0x3c>)
 800775a:	cb04      	ldmia	r3!, {r2}
 800775c:	9105      	str	r1, [sp, #20]
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	a902      	add	r1, sp, #8
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	f000 fbdc 	bl	8007f20 <_svfiprintf_r>
 8007768:	2300      	movs	r3, #0
 800776a:	9a02      	ldr	r2, [sp, #8]
 800776c:	7013      	strb	r3, [r2, #0]
 800776e:	b01c      	add	sp, #112	; 0x70
 8007770:	bc08      	pop	{r3}
 8007772:	b003      	add	sp, #12
 8007774:	4718      	bx	r3
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	7fffffff 	.word	0x7fffffff
 800777c:	2000000c 	.word	0x2000000c
 8007780:	ffff0208 	.word	0xffff0208

08007784 <__swbuf_r>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	0005      	movs	r5, r0
 8007788:	000e      	movs	r6, r1
 800778a:	0014      	movs	r4, r2
 800778c:	2800      	cmp	r0, #0
 800778e:	d004      	beq.n	800779a <__swbuf_r+0x16>
 8007790:	6983      	ldr	r3, [r0, #24]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <__swbuf_r+0x16>
 8007796:	f000 f9b9 	bl	8007b0c <__sinit>
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <__swbuf_r+0xa0>)
 800779c:	429c      	cmp	r4, r3
 800779e:	d12d      	bne.n	80077fc <__swbuf_r+0x78>
 80077a0:	686c      	ldr	r4, [r5, #4]
 80077a2:	69a3      	ldr	r3, [r4, #24]
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	89a3      	ldrh	r3, [r4, #12]
 80077a8:	071b      	lsls	r3, r3, #28
 80077aa:	d531      	bpl.n	8007810 <__swbuf_r+0x8c>
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d02e      	beq.n	8007810 <__swbuf_r+0x8c>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	6922      	ldr	r2, [r4, #16]
 80077b6:	b2f7      	uxtb	r7, r6
 80077b8:	1a98      	subs	r0, r3, r2
 80077ba:	6963      	ldr	r3, [r4, #20]
 80077bc:	b2f6      	uxtb	r6, r6
 80077be:	4283      	cmp	r3, r0
 80077c0:	dc05      	bgt.n	80077ce <__swbuf_r+0x4a>
 80077c2:	0021      	movs	r1, r4
 80077c4:	0028      	movs	r0, r5
 80077c6:	f000 f933 	bl	8007a30 <_fflush_r>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d126      	bne.n	800781c <__swbuf_r+0x98>
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	3001      	adds	r0, #1
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	701f      	strb	r7, [r3, #0]
 80077de:	6963      	ldr	r3, [r4, #20]
 80077e0:	4283      	cmp	r3, r0
 80077e2:	d004      	beq.n	80077ee <__swbuf_r+0x6a>
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	07db      	lsls	r3, r3, #31
 80077e8:	d51a      	bpl.n	8007820 <__swbuf_r+0x9c>
 80077ea:	2e0a      	cmp	r6, #10
 80077ec:	d118      	bne.n	8007820 <__swbuf_r+0x9c>
 80077ee:	0021      	movs	r1, r4
 80077f0:	0028      	movs	r0, r5
 80077f2:	f000 f91d 	bl	8007a30 <_fflush_r>
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d012      	beq.n	8007820 <__swbuf_r+0x9c>
 80077fa:	e00f      	b.n	800781c <__swbuf_r+0x98>
 80077fc:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <__swbuf_r+0xa4>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d101      	bne.n	8007806 <__swbuf_r+0x82>
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	e7cd      	b.n	80077a2 <__swbuf_r+0x1e>
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <__swbuf_r+0xa8>)
 8007808:	429c      	cmp	r4, r3
 800780a:	d1ca      	bne.n	80077a2 <__swbuf_r+0x1e>
 800780c:	68ec      	ldr	r4, [r5, #12]
 800780e:	e7c8      	b.n	80077a2 <__swbuf_r+0x1e>
 8007810:	0021      	movs	r1, r4
 8007812:	0028      	movs	r0, r5
 8007814:	f000 f80c 	bl	8007830 <__swsetup_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	d0ca      	beq.n	80077b2 <__swbuf_r+0x2e>
 800781c:	2601      	movs	r6, #1
 800781e:	4276      	negs	r6, r6
 8007820:	0030      	movs	r0, r6
 8007822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007824:	08009ec0 	.word	0x08009ec0
 8007828:	08009ee0 	.word	0x08009ee0
 800782c:	08009ea0 	.word	0x08009ea0

08007830 <__swsetup_r>:
 8007830:	4b36      	ldr	r3, [pc, #216]	; (800790c <__swsetup_r+0xdc>)
 8007832:	b570      	push	{r4, r5, r6, lr}
 8007834:	681d      	ldr	r5, [r3, #0]
 8007836:	0006      	movs	r6, r0
 8007838:	000c      	movs	r4, r1
 800783a:	2d00      	cmp	r5, #0
 800783c:	d005      	beq.n	800784a <__swsetup_r+0x1a>
 800783e:	69ab      	ldr	r3, [r5, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <__swsetup_r+0x1a>
 8007844:	0028      	movs	r0, r5
 8007846:	f000 f961 	bl	8007b0c <__sinit>
 800784a:	4b31      	ldr	r3, [pc, #196]	; (8007910 <__swsetup_r+0xe0>)
 800784c:	429c      	cmp	r4, r3
 800784e:	d10f      	bne.n	8007870 <__swsetup_r+0x40>
 8007850:	686c      	ldr	r4, [r5, #4]
 8007852:	230c      	movs	r3, #12
 8007854:	5ee2      	ldrsh	r2, [r4, r3]
 8007856:	b293      	uxth	r3, r2
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d42d      	bmi.n	80078b8 <__swsetup_r+0x88>
 800785c:	06d9      	lsls	r1, r3, #27
 800785e:	d411      	bmi.n	8007884 <__swsetup_r+0x54>
 8007860:	2309      	movs	r3, #9
 8007862:	2001      	movs	r0, #1
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	3337      	adds	r3, #55	; 0x37
 8007868:	4313      	orrs	r3, r2
 800786a:	81a3      	strh	r3, [r4, #12]
 800786c:	4240      	negs	r0, r0
 800786e:	bd70      	pop	{r4, r5, r6, pc}
 8007870:	4b28      	ldr	r3, [pc, #160]	; (8007914 <__swsetup_r+0xe4>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d101      	bne.n	800787a <__swsetup_r+0x4a>
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	e7eb      	b.n	8007852 <__swsetup_r+0x22>
 800787a:	4b27      	ldr	r3, [pc, #156]	; (8007918 <__swsetup_r+0xe8>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d1e8      	bne.n	8007852 <__swsetup_r+0x22>
 8007880:	68ec      	ldr	r4, [r5, #12]
 8007882:	e7e6      	b.n	8007852 <__swsetup_r+0x22>
 8007884:	075b      	lsls	r3, r3, #29
 8007886:	d513      	bpl.n	80078b0 <__swsetup_r+0x80>
 8007888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788a:	2900      	cmp	r1, #0
 800788c:	d008      	beq.n	80078a0 <__swsetup_r+0x70>
 800788e:	0023      	movs	r3, r4
 8007890:	3344      	adds	r3, #68	; 0x44
 8007892:	4299      	cmp	r1, r3
 8007894:	d002      	beq.n	800789c <__swsetup_r+0x6c>
 8007896:	0030      	movs	r0, r6
 8007898:	f000 fa38 	bl	8007d0c <_free_r>
 800789c:	2300      	movs	r3, #0
 800789e:	6363      	str	r3, [r4, #52]	; 0x34
 80078a0:	2224      	movs	r2, #36	; 0x24
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	4393      	bics	r3, r2
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	2300      	movs	r3, #0
 80078aa:	6063      	str	r3, [r4, #4]
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	2308      	movs	r3, #8
 80078b2:	89a2      	ldrh	r2, [r4, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10b      	bne.n	80078d6 <__swsetup_r+0xa6>
 80078be:	21a0      	movs	r1, #160	; 0xa0
 80078c0:	2280      	movs	r2, #128	; 0x80
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	0089      	lsls	r1, r1, #2
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	400b      	ands	r3, r1
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <__swsetup_r+0xa6>
 80078ce:	0021      	movs	r1, r4
 80078d0:	0030      	movs	r0, r6
 80078d2:	f000 f9d7 	bl	8007c84 <__smakebuf_r>
 80078d6:	2301      	movs	r3, #1
 80078d8:	89a2      	ldrh	r2, [r4, #12]
 80078da:	4013      	ands	r3, r2
 80078dc:	d011      	beq.n	8007902 <__swsetup_r+0xd2>
 80078de:	2300      	movs	r3, #0
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	6963      	ldr	r3, [r4, #20]
 80078e4:	425b      	negs	r3, r3
 80078e6:	61a3      	str	r3, [r4, #24]
 80078e8:	2000      	movs	r0, #0
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	4283      	cmp	r3, r0
 80078ee:	d1be      	bne.n	800786e <__swsetup_r+0x3e>
 80078f0:	230c      	movs	r3, #12
 80078f2:	5ee2      	ldrsh	r2, [r4, r3]
 80078f4:	0613      	lsls	r3, r2, #24
 80078f6:	d5ba      	bpl.n	800786e <__swsetup_r+0x3e>
 80078f8:	2340      	movs	r3, #64	; 0x40
 80078fa:	4313      	orrs	r3, r2
 80078fc:	81a3      	strh	r3, [r4, #12]
 80078fe:	3801      	subs	r0, #1
 8007900:	e7b5      	b.n	800786e <__swsetup_r+0x3e>
 8007902:	0792      	lsls	r2, r2, #30
 8007904:	d400      	bmi.n	8007908 <__swsetup_r+0xd8>
 8007906:	6963      	ldr	r3, [r4, #20]
 8007908:	60a3      	str	r3, [r4, #8]
 800790a:	e7ed      	b.n	80078e8 <__swsetup_r+0xb8>
 800790c:	2000000c 	.word	0x2000000c
 8007910:	08009ec0 	.word	0x08009ec0
 8007914:	08009ee0 	.word	0x08009ee0
 8007918:	08009ea0 	.word	0x08009ea0

0800791c <__sflush_r>:
 800791c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800791e:	898a      	ldrh	r2, [r1, #12]
 8007920:	0005      	movs	r5, r0
 8007922:	000c      	movs	r4, r1
 8007924:	0713      	lsls	r3, r2, #28
 8007926:	d460      	bmi.n	80079ea <__sflush_r+0xce>
 8007928:	684b      	ldr	r3, [r1, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dc04      	bgt.n	8007938 <__sflush_r+0x1c>
 800792e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007930:	2b00      	cmp	r3, #0
 8007932:	dc01      	bgt.n	8007938 <__sflush_r+0x1c>
 8007934:	2000      	movs	r0, #0
 8007936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007938:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800793a:	2f00      	cmp	r7, #0
 800793c:	d0fa      	beq.n	8007934 <__sflush_r+0x18>
 800793e:	2300      	movs	r3, #0
 8007940:	682e      	ldr	r6, [r5, #0]
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	2380      	movs	r3, #128	; 0x80
 8007946:	015b      	lsls	r3, r3, #5
 8007948:	6a21      	ldr	r1, [r4, #32]
 800794a:	401a      	ands	r2, r3
 800794c:	d034      	beq.n	80079b8 <__sflush_r+0x9c>
 800794e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	075b      	lsls	r3, r3, #29
 8007954:	d506      	bpl.n	8007964 <__sflush_r+0x48>
 8007956:	6863      	ldr	r3, [r4, #4]
 8007958:	1ac0      	subs	r0, r0, r3
 800795a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <__sflush_r+0x48>
 8007960:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007962:	1ac0      	subs	r0, r0, r3
 8007964:	0002      	movs	r2, r0
 8007966:	6a21      	ldr	r1, [r4, #32]
 8007968:	2300      	movs	r3, #0
 800796a:	0028      	movs	r0, r5
 800796c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800796e:	47b8      	blx	r7
 8007970:	89a1      	ldrh	r1, [r4, #12]
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d106      	bne.n	8007984 <__sflush_r+0x68>
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	2b1d      	cmp	r3, #29
 800797a:	d830      	bhi.n	80079de <__sflush_r+0xc2>
 800797c:	4a2b      	ldr	r2, [pc, #172]	; (8007a2c <__sflush_r+0x110>)
 800797e:	40da      	lsrs	r2, r3
 8007980:	07d3      	lsls	r3, r2, #31
 8007982:	d52c      	bpl.n	80079de <__sflush_r+0xc2>
 8007984:	2300      	movs	r3, #0
 8007986:	6063      	str	r3, [r4, #4]
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	6023      	str	r3, [r4, #0]
 800798c:	04cb      	lsls	r3, r1, #19
 800798e:	d505      	bpl.n	800799c <__sflush_r+0x80>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <__sflush_r+0x7e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d100      	bne.n	800799c <__sflush_r+0x80>
 800799a:	6560      	str	r0, [r4, #84]	; 0x54
 800799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799e:	602e      	str	r6, [r5, #0]
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d0c7      	beq.n	8007934 <__sflush_r+0x18>
 80079a4:	0023      	movs	r3, r4
 80079a6:	3344      	adds	r3, #68	; 0x44
 80079a8:	4299      	cmp	r1, r3
 80079aa:	d002      	beq.n	80079b2 <__sflush_r+0x96>
 80079ac:	0028      	movs	r0, r5
 80079ae:	f000 f9ad 	bl	8007d0c <_free_r>
 80079b2:	2000      	movs	r0, #0
 80079b4:	6360      	str	r0, [r4, #52]	; 0x34
 80079b6:	e7be      	b.n	8007936 <__sflush_r+0x1a>
 80079b8:	2301      	movs	r3, #1
 80079ba:	0028      	movs	r0, r5
 80079bc:	47b8      	blx	r7
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	d1c6      	bne.n	8007950 <__sflush_r+0x34>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0c3      	beq.n	8007950 <__sflush_r+0x34>
 80079c8:	2b1d      	cmp	r3, #29
 80079ca:	d001      	beq.n	80079d0 <__sflush_r+0xb4>
 80079cc:	2b16      	cmp	r3, #22
 80079ce:	d101      	bne.n	80079d4 <__sflush_r+0xb8>
 80079d0:	602e      	str	r6, [r5, #0]
 80079d2:	e7af      	b.n	8007934 <__sflush_r+0x18>
 80079d4:	2340      	movs	r3, #64	; 0x40
 80079d6:	89a2      	ldrh	r2, [r4, #12]
 80079d8:	4313      	orrs	r3, r2
 80079da:	81a3      	strh	r3, [r4, #12]
 80079dc:	e7ab      	b.n	8007936 <__sflush_r+0x1a>
 80079de:	2340      	movs	r3, #64	; 0x40
 80079e0:	430b      	orrs	r3, r1
 80079e2:	2001      	movs	r0, #1
 80079e4:	81a3      	strh	r3, [r4, #12]
 80079e6:	4240      	negs	r0, r0
 80079e8:	e7a5      	b.n	8007936 <__sflush_r+0x1a>
 80079ea:	690f      	ldr	r7, [r1, #16]
 80079ec:	2f00      	cmp	r7, #0
 80079ee:	d0a1      	beq.n	8007934 <__sflush_r+0x18>
 80079f0:	680b      	ldr	r3, [r1, #0]
 80079f2:	600f      	str	r7, [r1, #0]
 80079f4:	1bdb      	subs	r3, r3, r7
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	2300      	movs	r3, #0
 80079fa:	0792      	lsls	r2, r2, #30
 80079fc:	d100      	bne.n	8007a00 <__sflush_r+0xe4>
 80079fe:	694b      	ldr	r3, [r1, #20]
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc00      	bgt.n	8007a0a <__sflush_r+0xee>
 8007a08:	e794      	b.n	8007934 <__sflush_r+0x18>
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	003a      	movs	r2, r7
 8007a0e:	6a21      	ldr	r1, [r4, #32]
 8007a10:	0028      	movs	r0, r5
 8007a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a14:	47b0      	blx	r6
 8007a16:	2800      	cmp	r0, #0
 8007a18:	dc03      	bgt.n	8007a22 <__sflush_r+0x106>
 8007a1a:	2340      	movs	r3, #64	; 0x40
 8007a1c:	89a2      	ldrh	r2, [r4, #12]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	e7df      	b.n	80079e2 <__sflush_r+0xc6>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	183f      	adds	r7, r7, r0
 8007a26:	1a1b      	subs	r3, r3, r0
 8007a28:	9301      	str	r3, [sp, #4]
 8007a2a:	e7ea      	b.n	8007a02 <__sflush_r+0xe6>
 8007a2c:	20400001 	.word	0x20400001

08007a30 <_fflush_r>:
 8007a30:	690b      	ldr	r3, [r1, #16]
 8007a32:	b570      	push	{r4, r5, r6, lr}
 8007a34:	0005      	movs	r5, r0
 8007a36:	000c      	movs	r4, r1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <_fflush_r+0x10>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d004      	beq.n	8007a4e <_fflush_r+0x1e>
 8007a44:	6983      	ldr	r3, [r0, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <_fflush_r+0x1e>
 8007a4a:	f000 f85f 	bl	8007b0c <__sinit>
 8007a4e:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <_fflush_r+0x4c>)
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d109      	bne.n	8007a68 <_fflush_r+0x38>
 8007a54:	686c      	ldr	r4, [r5, #4]
 8007a56:	220c      	movs	r2, #12
 8007a58:	5ea3      	ldrsh	r3, [r4, r2]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0ee      	beq.n	8007a3c <_fflush_r+0xc>
 8007a5e:	0021      	movs	r1, r4
 8007a60:	0028      	movs	r0, r5
 8007a62:	f7ff ff5b 	bl	800791c <__sflush_r>
 8007a66:	e7ea      	b.n	8007a3e <_fflush_r+0xe>
 8007a68:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <_fflush_r+0x50>)
 8007a6a:	429c      	cmp	r4, r3
 8007a6c:	d101      	bne.n	8007a72 <_fflush_r+0x42>
 8007a6e:	68ac      	ldr	r4, [r5, #8]
 8007a70:	e7f1      	b.n	8007a56 <_fflush_r+0x26>
 8007a72:	4b04      	ldr	r3, [pc, #16]	; (8007a84 <_fflush_r+0x54>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	d1ee      	bne.n	8007a56 <_fflush_r+0x26>
 8007a78:	68ec      	ldr	r4, [r5, #12]
 8007a7a:	e7ec      	b.n	8007a56 <_fflush_r+0x26>
 8007a7c:	08009ec0 	.word	0x08009ec0
 8007a80:	08009ee0 	.word	0x08009ee0
 8007a84:	08009ea0 	.word	0x08009ea0

08007a88 <std>:
 8007a88:	2300      	movs	r3, #0
 8007a8a:	b510      	push	{r4, lr}
 8007a8c:	0004      	movs	r4, r0
 8007a8e:	6003      	str	r3, [r0, #0]
 8007a90:	6043      	str	r3, [r0, #4]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	; 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	6103      	str	r3, [r0, #16]
 8007a9c:	6143      	str	r3, [r0, #20]
 8007a9e:	6183      	str	r3, [r0, #24]
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	305c      	adds	r0, #92	; 0x5c
 8007aa6:	f7ff fddb 	bl	8007660 <memset>
 8007aaa:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <std+0x38>)
 8007aac:	6224      	str	r4, [r4, #32]
 8007aae:	6263      	str	r3, [r4, #36]	; 0x24
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <std+0x3c>)
 8007ab2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <std+0x40>)
 8007ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <std+0x44>)
 8007aba:	6323      	str	r3, [r4, #48]	; 0x30
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	0800842d 	.word	0x0800842d
 8007ac4:	08008455 	.word	0x08008455
 8007ac8:	0800848d 	.word	0x0800848d
 8007acc:	080084b9 	.word	0x080084b9

08007ad0 <_cleanup_r>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4902      	ldr	r1, [pc, #8]	; (8007adc <_cleanup_r+0xc>)
 8007ad4:	f000 f88c 	bl	8007bf0 <_fwalk_reent>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	08007a31 	.word	0x08007a31

08007ae0 <__sfmoreglue>:
 8007ae0:	b570      	push	{r4, r5, r6, lr}
 8007ae2:	2568      	movs	r5, #104	; 0x68
 8007ae4:	1e4a      	subs	r2, r1, #1
 8007ae6:	4355      	muls	r5, r2
 8007ae8:	000e      	movs	r6, r1
 8007aea:	0029      	movs	r1, r5
 8007aec:	3174      	adds	r1, #116	; 0x74
 8007aee:	f000 f957 	bl	8007da0 <_malloc_r>
 8007af2:	1e04      	subs	r4, r0, #0
 8007af4:	d008      	beq.n	8007b08 <__sfmoreglue+0x28>
 8007af6:	2100      	movs	r1, #0
 8007af8:	002a      	movs	r2, r5
 8007afa:	6001      	str	r1, [r0, #0]
 8007afc:	6046      	str	r6, [r0, #4]
 8007afe:	300c      	adds	r0, #12
 8007b00:	60a0      	str	r0, [r4, #8]
 8007b02:	3268      	adds	r2, #104	; 0x68
 8007b04:	f7ff fdac 	bl	8007660 <memset>
 8007b08:	0020      	movs	r0, r4
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}

08007b0c <__sinit>:
 8007b0c:	6983      	ldr	r3, [r0, #24]
 8007b0e:	b513      	push	{r0, r1, r4, lr}
 8007b10:	0004      	movs	r4, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d128      	bne.n	8007b68 <__sinit+0x5c>
 8007b16:	6483      	str	r3, [r0, #72]	; 0x48
 8007b18:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007b1a:	6503      	str	r3, [r0, #80]	; 0x50
 8007b1c:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <__sinit+0x60>)
 8007b1e:	4a14      	ldr	r2, [pc, #80]	; (8007b70 <__sinit+0x64>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6282      	str	r2, [r0, #40]	; 0x28
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	4298      	cmp	r0, r3
 8007b28:	d101      	bne.n	8007b2e <__sinit+0x22>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	6183      	str	r3, [r0, #24]
 8007b2e:	0020      	movs	r0, r4
 8007b30:	f000 f820 	bl	8007b74 <__sfp>
 8007b34:	6060      	str	r0, [r4, #4]
 8007b36:	0020      	movs	r0, r4
 8007b38:	f000 f81c 	bl	8007b74 <__sfp>
 8007b3c:	60a0      	str	r0, [r4, #8]
 8007b3e:	0020      	movs	r0, r4
 8007b40:	f000 f818 	bl	8007b74 <__sfp>
 8007b44:	2200      	movs	r2, #0
 8007b46:	60e0      	str	r0, [r4, #12]
 8007b48:	2104      	movs	r1, #4
 8007b4a:	6860      	ldr	r0, [r4, #4]
 8007b4c:	f7ff ff9c 	bl	8007a88 <std>
 8007b50:	2201      	movs	r2, #1
 8007b52:	2109      	movs	r1, #9
 8007b54:	68a0      	ldr	r0, [r4, #8]
 8007b56:	f7ff ff97 	bl	8007a88 <std>
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	2112      	movs	r1, #18
 8007b5e:	68e0      	ldr	r0, [r4, #12]
 8007b60:	f7ff ff92 	bl	8007a88 <std>
 8007b64:	2301      	movs	r3, #1
 8007b66:	61a3      	str	r3, [r4, #24]
 8007b68:	bd13      	pop	{r0, r1, r4, pc}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	08009e9c 	.word	0x08009e9c
 8007b70:	08007ad1 	.word	0x08007ad1

08007b74 <__sfp>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <__sfp+0x74>)
 8007b78:	0007      	movs	r7, r0
 8007b7a:	681e      	ldr	r6, [r3, #0]
 8007b7c:	69b3      	ldr	r3, [r6, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d102      	bne.n	8007b88 <__sfp+0x14>
 8007b82:	0030      	movs	r0, r6
 8007b84:	f7ff ffc2 	bl	8007b0c <__sinit>
 8007b88:	3648      	adds	r6, #72	; 0x48
 8007b8a:	68b4      	ldr	r4, [r6, #8]
 8007b8c:	6873      	ldr	r3, [r6, #4]
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	d504      	bpl.n	8007b9c <__sfp+0x28>
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <__sfp+0x34>
 8007b98:	6836      	ldr	r6, [r6, #0]
 8007b9a:	e7f6      	b.n	8007b8a <__sfp+0x16>
 8007b9c:	220c      	movs	r2, #12
 8007b9e:	5ea5      	ldrsh	r5, [r4, r2]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	d00d      	beq.n	8007bc0 <__sfp+0x4c>
 8007ba4:	3468      	adds	r4, #104	; 0x68
 8007ba6:	e7f2      	b.n	8007b8e <__sfp+0x1a>
 8007ba8:	2104      	movs	r1, #4
 8007baa:	0038      	movs	r0, r7
 8007bac:	f7ff ff98 	bl	8007ae0 <__sfmoreglue>
 8007bb0:	6030      	str	r0, [r6, #0]
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d1f0      	bne.n	8007b98 <__sfp+0x24>
 8007bb6:	230c      	movs	r3, #12
 8007bb8:	0004      	movs	r4, r0
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	0020      	movs	r0, r4
 8007bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc0:	0020      	movs	r0, r4
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <__sfp+0x78>)
 8007bc4:	6665      	str	r5, [r4, #100]	; 0x64
 8007bc6:	6025      	str	r5, [r4, #0]
 8007bc8:	6065      	str	r5, [r4, #4]
 8007bca:	60a5      	str	r5, [r4, #8]
 8007bcc:	60e3      	str	r3, [r4, #12]
 8007bce:	6125      	str	r5, [r4, #16]
 8007bd0:	6165      	str	r5, [r4, #20]
 8007bd2:	61a5      	str	r5, [r4, #24]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	0029      	movs	r1, r5
 8007bd8:	305c      	adds	r0, #92	; 0x5c
 8007bda:	f7ff fd41 	bl	8007660 <memset>
 8007bde:	6365      	str	r5, [r4, #52]	; 0x34
 8007be0:	63a5      	str	r5, [r4, #56]	; 0x38
 8007be2:	64a5      	str	r5, [r4, #72]	; 0x48
 8007be4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007be6:	e7e9      	b.n	8007bbc <__sfp+0x48>
 8007be8:	08009e9c 	.word	0x08009e9c
 8007bec:	ffff0001 	.word	0xffff0001

08007bf0 <_fwalk_reent>:
 8007bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf2:	0004      	movs	r4, r0
 8007bf4:	0007      	movs	r7, r0
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	9101      	str	r1, [sp, #4]
 8007bfa:	3448      	adds	r4, #72	; 0x48
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d101      	bne.n	8007c04 <_fwalk_reent+0x14>
 8007c00:	0030      	movs	r0, r6
 8007c02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c04:	6863      	ldr	r3, [r4, #4]
 8007c06:	68a5      	ldr	r5, [r4, #8]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	9b00      	ldr	r3, [sp, #0]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	d501      	bpl.n	8007c16 <_fwalk_reent+0x26>
 8007c12:	6824      	ldr	r4, [r4, #0]
 8007c14:	e7f2      	b.n	8007bfc <_fwalk_reent+0xc>
 8007c16:	89ab      	ldrh	r3, [r5, #12]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d908      	bls.n	8007c2e <_fwalk_reent+0x3e>
 8007c1c:	220e      	movs	r2, #14
 8007c1e:	5eab      	ldrsh	r3, [r5, r2]
 8007c20:	3301      	adds	r3, #1
 8007c22:	d004      	beq.n	8007c2e <_fwalk_reent+0x3e>
 8007c24:	0029      	movs	r1, r5
 8007c26:	0038      	movs	r0, r7
 8007c28:	9b01      	ldr	r3, [sp, #4]
 8007c2a:	4798      	blx	r3
 8007c2c:	4306      	orrs	r6, r0
 8007c2e:	3568      	adds	r5, #104	; 0x68
 8007c30:	e7eb      	b.n	8007c0a <_fwalk_reent+0x1a>
	...

08007c34 <__swhatbuf_r>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	000e      	movs	r6, r1
 8007c38:	001d      	movs	r5, r3
 8007c3a:	230e      	movs	r3, #14
 8007c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8007c3e:	b096      	sub	sp, #88	; 0x58
 8007c40:	0014      	movs	r4, r2
 8007c42:	2900      	cmp	r1, #0
 8007c44:	da07      	bge.n	8007c56 <__swhatbuf_r+0x22>
 8007c46:	2300      	movs	r3, #0
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	89b3      	ldrh	r3, [r6, #12]
 8007c4c:	061b      	lsls	r3, r3, #24
 8007c4e:	d411      	bmi.n	8007c74 <__swhatbuf_r+0x40>
 8007c50:	2380      	movs	r3, #128	; 0x80
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	e00f      	b.n	8007c76 <__swhatbuf_r+0x42>
 8007c56:	466a      	mov	r2, sp
 8007c58:	f000 fc5a 	bl	8008510 <_fstat_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	dbf2      	blt.n	8007c46 <__swhatbuf_r+0x12>
 8007c60:	22f0      	movs	r2, #240	; 0xf0
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	0212      	lsls	r2, r2, #8
 8007c66:	4013      	ands	r3, r2
 8007c68:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <__swhatbuf_r+0x4c>)
 8007c6a:	189b      	adds	r3, r3, r2
 8007c6c:	425a      	negs	r2, r3
 8007c6e:	4153      	adcs	r3, r2
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	e7ed      	b.n	8007c50 <__swhatbuf_r+0x1c>
 8007c74:	2340      	movs	r3, #64	; 0x40
 8007c76:	2000      	movs	r0, #0
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	b016      	add	sp, #88	; 0x58
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	ffffe000 	.word	0xffffe000

08007c84 <__smakebuf_r>:
 8007c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c86:	2602      	movs	r6, #2
 8007c88:	898b      	ldrh	r3, [r1, #12]
 8007c8a:	0005      	movs	r5, r0
 8007c8c:	000c      	movs	r4, r1
 8007c8e:	4233      	tst	r3, r6
 8007c90:	d006      	beq.n	8007ca0 <__smakebuf_r+0x1c>
 8007c92:	0023      	movs	r3, r4
 8007c94:	3347      	adds	r3, #71	; 0x47
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	6123      	str	r3, [r4, #16]
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	6163      	str	r3, [r4, #20]
 8007c9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007ca0:	ab01      	add	r3, sp, #4
 8007ca2:	466a      	mov	r2, sp
 8007ca4:	f7ff ffc6 	bl	8007c34 <__swhatbuf_r>
 8007ca8:	9900      	ldr	r1, [sp, #0]
 8007caa:	0007      	movs	r7, r0
 8007cac:	0028      	movs	r0, r5
 8007cae:	f000 f877 	bl	8007da0 <_malloc_r>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d108      	bne.n	8007cc8 <__smakebuf_r+0x44>
 8007cb6:	220c      	movs	r2, #12
 8007cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8007cba:	059a      	lsls	r2, r3, #22
 8007cbc:	d4ef      	bmi.n	8007c9e <__smakebuf_r+0x1a>
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	4393      	bics	r3, r2
 8007cc2:	431e      	orrs	r6, r3
 8007cc4:	81a6      	strh	r6, [r4, #12]
 8007cc6:	e7e4      	b.n	8007c92 <__smakebuf_r+0xe>
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <__smakebuf_r+0x84>)
 8007cca:	62ab      	str	r3, [r5, #40]	; 0x28
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	89a2      	ldrh	r2, [r4, #12]
 8007cd0:	6020      	str	r0, [r4, #0]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	9b00      	ldr	r3, [sp, #0]
 8007cd8:	6120      	str	r0, [r4, #16]
 8007cda:	6163      	str	r3, [r4, #20]
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00d      	beq.n	8007cfe <__smakebuf_r+0x7a>
 8007ce2:	230e      	movs	r3, #14
 8007ce4:	5ee1      	ldrsh	r1, [r4, r3]
 8007ce6:	0028      	movs	r0, r5
 8007ce8:	f000 fc24 	bl	8008534 <_isatty_r>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d006      	beq.n	8007cfe <__smakebuf_r+0x7a>
 8007cf0:	2203      	movs	r2, #3
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	4393      	bics	r3, r2
 8007cf6:	001a      	movs	r2, r3
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	89a0      	ldrh	r0, [r4, #12]
 8007d00:	4338      	orrs	r0, r7
 8007d02:	81a0      	strh	r0, [r4, #12]
 8007d04:	e7cb      	b.n	8007c9e <__smakebuf_r+0x1a>
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	08007ad1 	.word	0x08007ad1

08007d0c <_free_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	0005      	movs	r5, r0
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d010      	beq.n	8007d36 <_free_r+0x2a>
 8007d14:	1f0c      	subs	r4, r1, #4
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	da00      	bge.n	8007d1e <_free_r+0x12>
 8007d1c:	18e4      	adds	r4, r4, r3
 8007d1e:	0028      	movs	r0, r5
 8007d20:	f000 fc55 	bl	80085ce <__malloc_lock>
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <_free_r+0x90>)
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d105      	bne.n	8007d38 <_free_r+0x2c>
 8007d2c:	6063      	str	r3, [r4, #4]
 8007d2e:	6014      	str	r4, [r2, #0]
 8007d30:	0028      	movs	r0, r5
 8007d32:	f000 fc4d 	bl	80085d0 <__malloc_unlock>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d909      	bls.n	8007d50 <_free_r+0x44>
 8007d3c:	6821      	ldr	r1, [r4, #0]
 8007d3e:	1860      	adds	r0, r4, r1
 8007d40:	4283      	cmp	r3, r0
 8007d42:	d1f3      	bne.n	8007d2c <_free_r+0x20>
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	1841      	adds	r1, r0, r1
 8007d4a:	6021      	str	r1, [r4, #0]
 8007d4c:	e7ee      	b.n	8007d2c <_free_r+0x20>
 8007d4e:	0013      	movs	r3, r2
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	2a00      	cmp	r2, #0
 8007d54:	d001      	beq.n	8007d5a <_free_r+0x4e>
 8007d56:	42a2      	cmp	r2, r4
 8007d58:	d9f9      	bls.n	8007d4e <_free_r+0x42>
 8007d5a:	6819      	ldr	r1, [r3, #0]
 8007d5c:	1858      	adds	r0, r3, r1
 8007d5e:	42a0      	cmp	r0, r4
 8007d60:	d10b      	bne.n	8007d7a <_free_r+0x6e>
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	1809      	adds	r1, r1, r0
 8007d66:	1858      	adds	r0, r3, r1
 8007d68:	6019      	str	r1, [r3, #0]
 8007d6a:	4282      	cmp	r2, r0
 8007d6c:	d1e0      	bne.n	8007d30 <_free_r+0x24>
 8007d6e:	6810      	ldr	r0, [r2, #0]
 8007d70:	6852      	ldr	r2, [r2, #4]
 8007d72:	1841      	adds	r1, r0, r1
 8007d74:	6019      	str	r1, [r3, #0]
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	e7da      	b.n	8007d30 <_free_r+0x24>
 8007d7a:	42a0      	cmp	r0, r4
 8007d7c:	d902      	bls.n	8007d84 <_free_r+0x78>
 8007d7e:	230c      	movs	r3, #12
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	e7d5      	b.n	8007d30 <_free_r+0x24>
 8007d84:	6821      	ldr	r1, [r4, #0]
 8007d86:	1860      	adds	r0, r4, r1
 8007d88:	4282      	cmp	r2, r0
 8007d8a:	d103      	bne.n	8007d94 <_free_r+0x88>
 8007d8c:	6810      	ldr	r0, [r2, #0]
 8007d8e:	6852      	ldr	r2, [r2, #4]
 8007d90:	1841      	adds	r1, r0, r1
 8007d92:	6021      	str	r1, [r4, #0]
 8007d94:	6062      	str	r2, [r4, #4]
 8007d96:	605c      	str	r4, [r3, #4]
 8007d98:	e7ca      	b.n	8007d30 <_free_r+0x24>
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	200004b8 	.word	0x200004b8

08007da0 <_malloc_r>:
 8007da0:	2303      	movs	r3, #3
 8007da2:	b570      	push	{r4, r5, r6, lr}
 8007da4:	1ccd      	adds	r5, r1, #3
 8007da6:	439d      	bics	r5, r3
 8007da8:	3508      	adds	r5, #8
 8007daa:	0006      	movs	r6, r0
 8007dac:	2d0c      	cmp	r5, #12
 8007dae:	d21e      	bcs.n	8007dee <_malloc_r+0x4e>
 8007db0:	250c      	movs	r5, #12
 8007db2:	42a9      	cmp	r1, r5
 8007db4:	d81d      	bhi.n	8007df2 <_malloc_r+0x52>
 8007db6:	0030      	movs	r0, r6
 8007db8:	f000 fc09 	bl	80085ce <__malloc_lock>
 8007dbc:	4a25      	ldr	r2, [pc, #148]	; (8007e54 <_malloc_r+0xb4>)
 8007dbe:	6814      	ldr	r4, [r2, #0]
 8007dc0:	0021      	movs	r1, r4
 8007dc2:	2900      	cmp	r1, #0
 8007dc4:	d119      	bne.n	8007dfa <_malloc_r+0x5a>
 8007dc6:	4c24      	ldr	r4, [pc, #144]	; (8007e58 <_malloc_r+0xb8>)
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d103      	bne.n	8007dd6 <_malloc_r+0x36>
 8007dce:	0030      	movs	r0, r6
 8007dd0:	f000 fb1a 	bl	8008408 <_sbrk_r>
 8007dd4:	6020      	str	r0, [r4, #0]
 8007dd6:	0029      	movs	r1, r5
 8007dd8:	0030      	movs	r0, r6
 8007dda:	f000 fb15 	bl	8008408 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d12b      	bne.n	8007e3a <_malloc_r+0x9a>
 8007de2:	230c      	movs	r3, #12
 8007de4:	0030      	movs	r0, r6
 8007de6:	6033      	str	r3, [r6, #0]
 8007de8:	f000 fbf2 	bl	80085d0 <__malloc_unlock>
 8007dec:	e003      	b.n	8007df6 <_malloc_r+0x56>
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	dadf      	bge.n	8007db2 <_malloc_r+0x12>
 8007df2:	230c      	movs	r3, #12
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	2000      	movs	r0, #0
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	680b      	ldr	r3, [r1, #0]
 8007dfc:	1b5b      	subs	r3, r3, r5
 8007dfe:	d419      	bmi.n	8007e34 <_malloc_r+0x94>
 8007e00:	2b0b      	cmp	r3, #11
 8007e02:	d903      	bls.n	8007e0c <_malloc_r+0x6c>
 8007e04:	600b      	str	r3, [r1, #0]
 8007e06:	18cc      	adds	r4, r1, r3
 8007e08:	6025      	str	r5, [r4, #0]
 8007e0a:	e003      	b.n	8007e14 <_malloc_r+0x74>
 8007e0c:	684b      	ldr	r3, [r1, #4]
 8007e0e:	428c      	cmp	r4, r1
 8007e10:	d10d      	bne.n	8007e2e <_malloc_r+0x8e>
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	0030      	movs	r0, r6
 8007e16:	f000 fbdb 	bl	80085d0 <__malloc_unlock>
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	300b      	adds	r0, #11
 8007e20:	1d23      	adds	r3, r4, #4
 8007e22:	4390      	bics	r0, r2
 8007e24:	1ac3      	subs	r3, r0, r3
 8007e26:	d0e7      	beq.n	8007df8 <_malloc_r+0x58>
 8007e28:	425a      	negs	r2, r3
 8007e2a:	50e2      	str	r2, [r4, r3]
 8007e2c:	e7e4      	b.n	8007df8 <_malloc_r+0x58>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	000c      	movs	r4, r1
 8007e32:	e7ef      	b.n	8007e14 <_malloc_r+0x74>
 8007e34:	000c      	movs	r4, r1
 8007e36:	6849      	ldr	r1, [r1, #4]
 8007e38:	e7c3      	b.n	8007dc2 <_malloc_r+0x22>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	1cc4      	adds	r4, r0, #3
 8007e3e:	439c      	bics	r4, r3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d0e1      	beq.n	8007e08 <_malloc_r+0x68>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	0030      	movs	r0, r6
 8007e48:	f000 fade 	bl	8008408 <_sbrk_r>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d1db      	bne.n	8007e08 <_malloc_r+0x68>
 8007e50:	e7c7      	b.n	8007de2 <_malloc_r+0x42>
 8007e52:	46c0      	nop			; (mov r8, r8)
 8007e54:	200004b8 	.word	0x200004b8
 8007e58:	200004bc 	.word	0x200004bc

08007e5c <__ssputs_r>:
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	688e      	ldr	r6, [r1, #8]
 8007e60:	b085      	sub	sp, #20
 8007e62:	0007      	movs	r7, r0
 8007e64:	000c      	movs	r4, r1
 8007e66:	9203      	str	r2, [sp, #12]
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	429e      	cmp	r6, r3
 8007e6c:	d83c      	bhi.n	8007ee8 <__ssputs_r+0x8c>
 8007e6e:	2390      	movs	r3, #144	; 0x90
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	421a      	tst	r2, r3
 8007e76:	d034      	beq.n	8007ee2 <__ssputs_r+0x86>
 8007e78:	2503      	movs	r5, #3
 8007e7a:	6909      	ldr	r1, [r1, #16]
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	1a5b      	subs	r3, r3, r1
 8007e80:	9302      	str	r3, [sp, #8]
 8007e82:	6963      	ldr	r3, [r4, #20]
 8007e84:	9802      	ldr	r0, [sp, #8]
 8007e86:	435d      	muls	r5, r3
 8007e88:	0feb      	lsrs	r3, r5, #31
 8007e8a:	195d      	adds	r5, r3, r5
 8007e8c:	9b01      	ldr	r3, [sp, #4]
 8007e8e:	106d      	asrs	r5, r5, #1
 8007e90:	3301      	adds	r3, #1
 8007e92:	181b      	adds	r3, r3, r0
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	d900      	bls.n	8007e9a <__ssputs_r+0x3e>
 8007e98:	001d      	movs	r5, r3
 8007e9a:	0553      	lsls	r3, r2, #21
 8007e9c:	d532      	bpl.n	8007f04 <__ssputs_r+0xa8>
 8007e9e:	0029      	movs	r1, r5
 8007ea0:	0038      	movs	r0, r7
 8007ea2:	f7ff ff7d 	bl	8007da0 <_malloc_r>
 8007ea6:	1e06      	subs	r6, r0, #0
 8007ea8:	d109      	bne.n	8007ebe <__ssputs_r+0x62>
 8007eaa:	230c      	movs	r3, #12
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	89a2      	ldrh	r2, [r4, #12]
 8007eb4:	4240      	negs	r0, r0
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	b005      	add	sp, #20
 8007ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ebe:	9a02      	ldr	r2, [sp, #8]
 8007ec0:	6921      	ldr	r1, [r4, #16]
 8007ec2:	f000 fb68 	bl	8008596 <memcpy>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	4a14      	ldr	r2, [pc, #80]	; (8007f1c <__ssputs_r+0xc0>)
 8007eca:	401a      	ands	r2, r3
 8007ecc:	2380      	movs	r3, #128	; 0x80
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	6126      	str	r6, [r4, #16]
 8007ed6:	18f6      	adds	r6, r6, r3
 8007ed8:	6026      	str	r6, [r4, #0]
 8007eda:	6165      	str	r5, [r4, #20]
 8007edc:	9e01      	ldr	r6, [sp, #4]
 8007ede:	1aed      	subs	r5, r5, r3
 8007ee0:	60a5      	str	r5, [r4, #8]
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	d900      	bls.n	8007eea <__ssputs_r+0x8e>
 8007ee8:	9e01      	ldr	r6, [sp, #4]
 8007eea:	0032      	movs	r2, r6
 8007eec:	9903      	ldr	r1, [sp, #12]
 8007eee:	6820      	ldr	r0, [r4, #0]
 8007ef0:	f000 fb5a 	bl	80085a8 <memmove>
 8007ef4:	68a3      	ldr	r3, [r4, #8]
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	1b9b      	subs	r3, r3, r6
 8007efa:	60a3      	str	r3, [r4, #8]
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	199e      	adds	r6, r3, r6
 8007f00:	6026      	str	r6, [r4, #0]
 8007f02:	e7da      	b.n	8007eba <__ssputs_r+0x5e>
 8007f04:	002a      	movs	r2, r5
 8007f06:	0038      	movs	r0, r7
 8007f08:	f000 fb63 	bl	80085d2 <_realloc_r>
 8007f0c:	1e06      	subs	r6, r0, #0
 8007f0e:	d1e0      	bne.n	8007ed2 <__ssputs_r+0x76>
 8007f10:	6921      	ldr	r1, [r4, #16]
 8007f12:	0038      	movs	r0, r7
 8007f14:	f7ff fefa 	bl	8007d0c <_free_r>
 8007f18:	e7c7      	b.n	8007eaa <__ssputs_r+0x4e>
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	fffffb7f 	.word	0xfffffb7f

08007f20 <_svfiprintf_r>:
 8007f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f22:	b0a1      	sub	sp, #132	; 0x84
 8007f24:	9003      	str	r0, [sp, #12]
 8007f26:	001d      	movs	r5, r3
 8007f28:	898b      	ldrh	r3, [r1, #12]
 8007f2a:	000f      	movs	r7, r1
 8007f2c:	0016      	movs	r6, r2
 8007f2e:	061b      	lsls	r3, r3, #24
 8007f30:	d511      	bpl.n	8007f56 <_svfiprintf_r+0x36>
 8007f32:	690b      	ldr	r3, [r1, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10e      	bne.n	8007f56 <_svfiprintf_r+0x36>
 8007f38:	2140      	movs	r1, #64	; 0x40
 8007f3a:	f7ff ff31 	bl	8007da0 <_malloc_r>
 8007f3e:	6038      	str	r0, [r7, #0]
 8007f40:	6138      	str	r0, [r7, #16]
 8007f42:	2800      	cmp	r0, #0
 8007f44:	d105      	bne.n	8007f52 <_svfiprintf_r+0x32>
 8007f46:	230c      	movs	r3, #12
 8007f48:	9a03      	ldr	r2, [sp, #12]
 8007f4a:	3801      	subs	r0, #1
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	b021      	add	sp, #132	; 0x84
 8007f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f52:	2340      	movs	r3, #64	; 0x40
 8007f54:	617b      	str	r3, [r7, #20]
 8007f56:	2300      	movs	r3, #0
 8007f58:	ac08      	add	r4, sp, #32
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	3320      	adds	r3, #32
 8007f5e:	7663      	strb	r3, [r4, #25]
 8007f60:	3310      	adds	r3, #16
 8007f62:	76a3      	strb	r3, [r4, #26]
 8007f64:	9507      	str	r5, [sp, #28]
 8007f66:	0035      	movs	r5, r6
 8007f68:	782b      	ldrb	r3, [r5, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <_svfiprintf_r+0x52>
 8007f6e:	2b25      	cmp	r3, #37	; 0x25
 8007f70:	d146      	bne.n	8008000 <_svfiprintf_r+0xe0>
 8007f72:	1bab      	subs	r3, r5, r6
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	d00c      	beq.n	8007f92 <_svfiprintf_r+0x72>
 8007f78:	0032      	movs	r2, r6
 8007f7a:	0039      	movs	r1, r7
 8007f7c:	9803      	ldr	r0, [sp, #12]
 8007f7e:	f7ff ff6d 	bl	8007e5c <__ssputs_r>
 8007f82:	1c43      	adds	r3, r0, #1
 8007f84:	d100      	bne.n	8007f88 <_svfiprintf_r+0x68>
 8007f86:	e0ae      	b.n	80080e6 <_svfiprintf_r+0x1c6>
 8007f88:	6962      	ldr	r2, [r4, #20]
 8007f8a:	9b05      	ldr	r3, [sp, #20]
 8007f8c:	4694      	mov	ip, r2
 8007f8e:	4463      	add	r3, ip
 8007f90:	6163      	str	r3, [r4, #20]
 8007f92:	782b      	ldrb	r3, [r5, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d100      	bne.n	8007f9a <_svfiprintf_r+0x7a>
 8007f98:	e0a5      	b.n	80080e6 <_svfiprintf_r+0x1c6>
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	4252      	negs	r2, r2
 8007fa0:	6062      	str	r2, [r4, #4]
 8007fa2:	a904      	add	r1, sp, #16
 8007fa4:	3254      	adds	r2, #84	; 0x54
 8007fa6:	1852      	adds	r2, r2, r1
 8007fa8:	1c6e      	adds	r6, r5, #1
 8007faa:	6023      	str	r3, [r4, #0]
 8007fac:	60e3      	str	r3, [r4, #12]
 8007fae:	60a3      	str	r3, [r4, #8]
 8007fb0:	7013      	strb	r3, [r2, #0]
 8007fb2:	65a3      	str	r3, [r4, #88]	; 0x58
 8007fb4:	7831      	ldrb	r1, [r6, #0]
 8007fb6:	2205      	movs	r2, #5
 8007fb8:	4853      	ldr	r0, [pc, #332]	; (8008108 <_svfiprintf_r+0x1e8>)
 8007fba:	f000 fae1 	bl	8008580 <memchr>
 8007fbe:	1c75      	adds	r5, r6, #1
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d11f      	bne.n	8008004 <_svfiprintf_r+0xe4>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	06d3      	lsls	r3, r2, #27
 8007fc8:	d504      	bpl.n	8007fd4 <_svfiprintf_r+0xb4>
 8007fca:	2353      	movs	r3, #83	; 0x53
 8007fcc:	a904      	add	r1, sp, #16
 8007fce:	185b      	adds	r3, r3, r1
 8007fd0:	2120      	movs	r1, #32
 8007fd2:	7019      	strb	r1, [r3, #0]
 8007fd4:	0713      	lsls	r3, r2, #28
 8007fd6:	d504      	bpl.n	8007fe2 <_svfiprintf_r+0xc2>
 8007fd8:	2353      	movs	r3, #83	; 0x53
 8007fda:	a904      	add	r1, sp, #16
 8007fdc:	185b      	adds	r3, r3, r1
 8007fde:	212b      	movs	r1, #43	; 0x2b
 8007fe0:	7019      	strb	r1, [r3, #0]
 8007fe2:	7833      	ldrb	r3, [r6, #0]
 8007fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe6:	d016      	beq.n	8008016 <_svfiprintf_r+0xf6>
 8007fe8:	0035      	movs	r5, r6
 8007fea:	2100      	movs	r1, #0
 8007fec:	200a      	movs	r0, #10
 8007fee:	68e3      	ldr	r3, [r4, #12]
 8007ff0:	782a      	ldrb	r2, [r5, #0]
 8007ff2:	1c6e      	adds	r6, r5, #1
 8007ff4:	3a30      	subs	r2, #48	; 0x30
 8007ff6:	2a09      	cmp	r2, #9
 8007ff8:	d94e      	bls.n	8008098 <_svfiprintf_r+0x178>
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d018      	beq.n	8008030 <_svfiprintf_r+0x110>
 8007ffe:	e010      	b.n	8008022 <_svfiprintf_r+0x102>
 8008000:	3501      	adds	r5, #1
 8008002:	e7b1      	b.n	8007f68 <_svfiprintf_r+0x48>
 8008004:	4b40      	ldr	r3, [pc, #256]	; (8008108 <_svfiprintf_r+0x1e8>)
 8008006:	6822      	ldr	r2, [r4, #0]
 8008008:	1ac0      	subs	r0, r0, r3
 800800a:	2301      	movs	r3, #1
 800800c:	4083      	lsls	r3, r0
 800800e:	4313      	orrs	r3, r2
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	002e      	movs	r6, r5
 8008014:	e7ce      	b.n	8007fb4 <_svfiprintf_r+0x94>
 8008016:	9b07      	ldr	r3, [sp, #28]
 8008018:	1d19      	adds	r1, r3, #4
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	9107      	str	r1, [sp, #28]
 800801e:	2b00      	cmp	r3, #0
 8008020:	db01      	blt.n	8008026 <_svfiprintf_r+0x106>
 8008022:	930b      	str	r3, [sp, #44]	; 0x2c
 8008024:	e004      	b.n	8008030 <_svfiprintf_r+0x110>
 8008026:	425b      	negs	r3, r3
 8008028:	60e3      	str	r3, [r4, #12]
 800802a:	2302      	movs	r3, #2
 800802c:	4313      	orrs	r3, r2
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	782b      	ldrb	r3, [r5, #0]
 8008032:	2b2e      	cmp	r3, #46	; 0x2e
 8008034:	d10a      	bne.n	800804c <_svfiprintf_r+0x12c>
 8008036:	786b      	ldrb	r3, [r5, #1]
 8008038:	2b2a      	cmp	r3, #42	; 0x2a
 800803a:	d135      	bne.n	80080a8 <_svfiprintf_r+0x188>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	3502      	adds	r5, #2
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	9207      	str	r2, [sp, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	db2b      	blt.n	80080a2 <_svfiprintf_r+0x182>
 800804a:	9309      	str	r3, [sp, #36]	; 0x24
 800804c:	4e2f      	ldr	r6, [pc, #188]	; (800810c <_svfiprintf_r+0x1ec>)
 800804e:	7829      	ldrb	r1, [r5, #0]
 8008050:	2203      	movs	r2, #3
 8008052:	0030      	movs	r0, r6
 8008054:	f000 fa94 	bl	8008580 <memchr>
 8008058:	2800      	cmp	r0, #0
 800805a:	d006      	beq.n	800806a <_svfiprintf_r+0x14a>
 800805c:	2340      	movs	r3, #64	; 0x40
 800805e:	1b80      	subs	r0, r0, r6
 8008060:	4083      	lsls	r3, r0
 8008062:	6822      	ldr	r2, [r4, #0]
 8008064:	3501      	adds	r5, #1
 8008066:	4313      	orrs	r3, r2
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	7829      	ldrb	r1, [r5, #0]
 800806c:	2206      	movs	r2, #6
 800806e:	4828      	ldr	r0, [pc, #160]	; (8008110 <_svfiprintf_r+0x1f0>)
 8008070:	1c6e      	adds	r6, r5, #1
 8008072:	7621      	strb	r1, [r4, #24]
 8008074:	f000 fa84 	bl	8008580 <memchr>
 8008078:	2800      	cmp	r0, #0
 800807a:	d03c      	beq.n	80080f6 <_svfiprintf_r+0x1d6>
 800807c:	4b25      	ldr	r3, [pc, #148]	; (8008114 <_svfiprintf_r+0x1f4>)
 800807e:	2b00      	cmp	r3, #0
 8008080:	d125      	bne.n	80080ce <_svfiprintf_r+0x1ae>
 8008082:	2207      	movs	r2, #7
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	3307      	adds	r3, #7
 8008088:	4393      	bics	r3, r2
 800808a:	3308      	adds	r3, #8
 800808c:	9307      	str	r3, [sp, #28]
 800808e:	6963      	ldr	r3, [r4, #20]
 8008090:	9a04      	ldr	r2, [sp, #16]
 8008092:	189b      	adds	r3, r3, r2
 8008094:	6163      	str	r3, [r4, #20]
 8008096:	e766      	b.n	8007f66 <_svfiprintf_r+0x46>
 8008098:	4343      	muls	r3, r0
 800809a:	2101      	movs	r1, #1
 800809c:	189b      	adds	r3, r3, r2
 800809e:	0035      	movs	r5, r6
 80080a0:	e7a6      	b.n	8007ff0 <_svfiprintf_r+0xd0>
 80080a2:	2301      	movs	r3, #1
 80080a4:	425b      	negs	r3, r3
 80080a6:	e7d0      	b.n	800804a <_svfiprintf_r+0x12a>
 80080a8:	2300      	movs	r3, #0
 80080aa:	200a      	movs	r0, #10
 80080ac:	001a      	movs	r2, r3
 80080ae:	3501      	adds	r5, #1
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	7829      	ldrb	r1, [r5, #0]
 80080b4:	1c6e      	adds	r6, r5, #1
 80080b6:	3930      	subs	r1, #48	; 0x30
 80080b8:	2909      	cmp	r1, #9
 80080ba:	d903      	bls.n	80080c4 <_svfiprintf_r+0x1a4>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0c5      	beq.n	800804c <_svfiprintf_r+0x12c>
 80080c0:	9209      	str	r2, [sp, #36]	; 0x24
 80080c2:	e7c3      	b.n	800804c <_svfiprintf_r+0x12c>
 80080c4:	4342      	muls	r2, r0
 80080c6:	2301      	movs	r3, #1
 80080c8:	1852      	adds	r2, r2, r1
 80080ca:	0035      	movs	r5, r6
 80080cc:	e7f1      	b.n	80080b2 <_svfiprintf_r+0x192>
 80080ce:	ab07      	add	r3, sp, #28
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	003a      	movs	r2, r7
 80080d4:	4b10      	ldr	r3, [pc, #64]	; (8008118 <_svfiprintf_r+0x1f8>)
 80080d6:	0021      	movs	r1, r4
 80080d8:	9803      	ldr	r0, [sp, #12]
 80080da:	e000      	b.n	80080de <_svfiprintf_r+0x1be>
 80080dc:	bf00      	nop
 80080de:	9004      	str	r0, [sp, #16]
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	3301      	adds	r3, #1
 80080e4:	d1d3      	bne.n	800808e <_svfiprintf_r+0x16e>
 80080e6:	89bb      	ldrh	r3, [r7, #12]
 80080e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80080ea:	065b      	lsls	r3, r3, #25
 80080ec:	d400      	bmi.n	80080f0 <_svfiprintf_r+0x1d0>
 80080ee:	e72e      	b.n	8007f4e <_svfiprintf_r+0x2e>
 80080f0:	2001      	movs	r0, #1
 80080f2:	4240      	negs	r0, r0
 80080f4:	e72b      	b.n	8007f4e <_svfiprintf_r+0x2e>
 80080f6:	ab07      	add	r3, sp, #28
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	003a      	movs	r2, r7
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <_svfiprintf_r+0x1f8>)
 80080fe:	0021      	movs	r1, r4
 8008100:	9803      	ldr	r0, [sp, #12]
 8008102:	f000 f879 	bl	80081f8 <_printf_i>
 8008106:	e7ea      	b.n	80080de <_svfiprintf_r+0x1be>
 8008108:	08009f00 	.word	0x08009f00
 800810c:	08009f06 	.word	0x08009f06
 8008110:	08009f0a 	.word	0x08009f0a
 8008114:	00000000 	.word	0x00000000
 8008118:	08007e5d 	.word	0x08007e5d

0800811c <_printf_common>:
 800811c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800811e:	0015      	movs	r5, r2
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	688a      	ldr	r2, [r1, #8]
 8008124:	690b      	ldr	r3, [r1, #16]
 8008126:	9000      	str	r0, [sp, #0]
 8008128:	000c      	movs	r4, r1
 800812a:	4293      	cmp	r3, r2
 800812c:	da00      	bge.n	8008130 <_printf_common+0x14>
 800812e:	0013      	movs	r3, r2
 8008130:	0022      	movs	r2, r4
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	3243      	adds	r2, #67	; 0x43
 8008136:	7812      	ldrb	r2, [r2, #0]
 8008138:	2a00      	cmp	r2, #0
 800813a:	d001      	beq.n	8008140 <_printf_common+0x24>
 800813c:	3301      	adds	r3, #1
 800813e:	602b      	str	r3, [r5, #0]
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	069b      	lsls	r3, r3, #26
 8008144:	d502      	bpl.n	800814c <_printf_common+0x30>
 8008146:	682b      	ldr	r3, [r5, #0]
 8008148:	3302      	adds	r3, #2
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	2706      	movs	r7, #6
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	401f      	ands	r7, r3
 8008152:	d027      	beq.n	80081a4 <_printf_common+0x88>
 8008154:	0023      	movs	r3, r4
 8008156:	3343      	adds	r3, #67	; 0x43
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	4193      	sbcs	r3, r2
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	0692      	lsls	r2, r2, #26
 8008162:	d430      	bmi.n	80081c6 <_printf_common+0xaa>
 8008164:	0022      	movs	r2, r4
 8008166:	9901      	ldr	r1, [sp, #4]
 8008168:	3243      	adds	r2, #67	; 0x43
 800816a:	9800      	ldr	r0, [sp, #0]
 800816c:	9e08      	ldr	r6, [sp, #32]
 800816e:	47b0      	blx	r6
 8008170:	1c43      	adds	r3, r0, #1
 8008172:	d025      	beq.n	80081c0 <_printf_common+0xa4>
 8008174:	2306      	movs	r3, #6
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	682a      	ldr	r2, [r5, #0]
 800817a:	68e1      	ldr	r1, [r4, #12]
 800817c:	4003      	ands	r3, r0
 800817e:	2500      	movs	r5, #0
 8008180:	2b04      	cmp	r3, #4
 8008182:	d103      	bne.n	800818c <_printf_common+0x70>
 8008184:	1a8d      	subs	r5, r1, r2
 8008186:	43eb      	mvns	r3, r5
 8008188:	17db      	asrs	r3, r3, #31
 800818a:	401d      	ands	r5, r3
 800818c:	68a3      	ldr	r3, [r4, #8]
 800818e:	6922      	ldr	r2, [r4, #16]
 8008190:	4293      	cmp	r3, r2
 8008192:	dd01      	ble.n	8008198 <_printf_common+0x7c>
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	18ed      	adds	r5, r5, r3
 8008198:	2700      	movs	r7, #0
 800819a:	42bd      	cmp	r5, r7
 800819c:	d120      	bne.n	80081e0 <_printf_common+0xc4>
 800819e:	2000      	movs	r0, #0
 80081a0:	e010      	b.n	80081c4 <_printf_common+0xa8>
 80081a2:	3701      	adds	r7, #1
 80081a4:	68e3      	ldr	r3, [r4, #12]
 80081a6:	682a      	ldr	r2, [r5, #0]
 80081a8:	1a9b      	subs	r3, r3, r2
 80081aa:	42bb      	cmp	r3, r7
 80081ac:	ddd2      	ble.n	8008154 <_printf_common+0x38>
 80081ae:	0022      	movs	r2, r4
 80081b0:	2301      	movs	r3, #1
 80081b2:	3219      	adds	r2, #25
 80081b4:	9901      	ldr	r1, [sp, #4]
 80081b6:	9800      	ldr	r0, [sp, #0]
 80081b8:	9e08      	ldr	r6, [sp, #32]
 80081ba:	47b0      	blx	r6
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d1f0      	bne.n	80081a2 <_printf_common+0x86>
 80081c0:	2001      	movs	r0, #1
 80081c2:	4240      	negs	r0, r0
 80081c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081c6:	2030      	movs	r0, #48	; 0x30
 80081c8:	18e1      	adds	r1, r4, r3
 80081ca:	3143      	adds	r1, #67	; 0x43
 80081cc:	7008      	strb	r0, [r1, #0]
 80081ce:	0021      	movs	r1, r4
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	3145      	adds	r1, #69	; 0x45
 80081d4:	7809      	ldrb	r1, [r1, #0]
 80081d6:	18a2      	adds	r2, r4, r2
 80081d8:	3243      	adds	r2, #67	; 0x43
 80081da:	3302      	adds	r3, #2
 80081dc:	7011      	strb	r1, [r2, #0]
 80081de:	e7c1      	b.n	8008164 <_printf_common+0x48>
 80081e0:	0022      	movs	r2, r4
 80081e2:	2301      	movs	r3, #1
 80081e4:	321a      	adds	r2, #26
 80081e6:	9901      	ldr	r1, [sp, #4]
 80081e8:	9800      	ldr	r0, [sp, #0]
 80081ea:	9e08      	ldr	r6, [sp, #32]
 80081ec:	47b0      	blx	r6
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d0e6      	beq.n	80081c0 <_printf_common+0xa4>
 80081f2:	3701      	adds	r7, #1
 80081f4:	e7d1      	b.n	800819a <_printf_common+0x7e>
	...

080081f8 <_printf_i>:
 80081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081fa:	b089      	sub	sp, #36	; 0x24
 80081fc:	9204      	str	r2, [sp, #16]
 80081fe:	000a      	movs	r2, r1
 8008200:	3243      	adds	r2, #67	; 0x43
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	9003      	str	r0, [sp, #12]
 8008206:	9202      	str	r2, [sp, #8]
 8008208:	7e0a      	ldrb	r2, [r1, #24]
 800820a:	000c      	movs	r4, r1
 800820c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800820e:	2a6e      	cmp	r2, #110	; 0x6e
 8008210:	d100      	bne.n	8008214 <_printf_i+0x1c>
 8008212:	e086      	b.n	8008322 <_printf_i+0x12a>
 8008214:	d81f      	bhi.n	8008256 <_printf_i+0x5e>
 8008216:	2a63      	cmp	r2, #99	; 0x63
 8008218:	d033      	beq.n	8008282 <_printf_i+0x8a>
 800821a:	d808      	bhi.n	800822e <_printf_i+0x36>
 800821c:	2a00      	cmp	r2, #0
 800821e:	d100      	bne.n	8008222 <_printf_i+0x2a>
 8008220:	e08c      	b.n	800833c <_printf_i+0x144>
 8008222:	2a58      	cmp	r2, #88	; 0x58
 8008224:	d04d      	beq.n	80082c2 <_printf_i+0xca>
 8008226:	0025      	movs	r5, r4
 8008228:	3542      	adds	r5, #66	; 0x42
 800822a:	702a      	strb	r2, [r5, #0]
 800822c:	e030      	b.n	8008290 <_printf_i+0x98>
 800822e:	2a64      	cmp	r2, #100	; 0x64
 8008230:	d001      	beq.n	8008236 <_printf_i+0x3e>
 8008232:	2a69      	cmp	r2, #105	; 0x69
 8008234:	d1f7      	bne.n	8008226 <_printf_i+0x2e>
 8008236:	6819      	ldr	r1, [r3, #0]
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	1d0a      	adds	r2, r1, #4
 800823c:	0628      	lsls	r0, r5, #24
 800823e:	d529      	bpl.n	8008294 <_printf_i+0x9c>
 8008240:	6808      	ldr	r0, [r1, #0]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	2800      	cmp	r0, #0
 8008246:	da03      	bge.n	8008250 <_printf_i+0x58>
 8008248:	232d      	movs	r3, #45	; 0x2d
 800824a:	9a02      	ldr	r2, [sp, #8]
 800824c:	4240      	negs	r0, r0
 800824e:	7013      	strb	r3, [r2, #0]
 8008250:	4e6b      	ldr	r6, [pc, #428]	; (8008400 <_printf_i+0x208>)
 8008252:	270a      	movs	r7, #10
 8008254:	e04f      	b.n	80082f6 <_printf_i+0xfe>
 8008256:	2a73      	cmp	r2, #115	; 0x73
 8008258:	d074      	beq.n	8008344 <_printf_i+0x14c>
 800825a:	d808      	bhi.n	800826e <_printf_i+0x76>
 800825c:	2a6f      	cmp	r2, #111	; 0x6f
 800825e:	d01f      	beq.n	80082a0 <_printf_i+0xa8>
 8008260:	2a70      	cmp	r2, #112	; 0x70
 8008262:	d1e0      	bne.n	8008226 <_printf_i+0x2e>
 8008264:	2220      	movs	r2, #32
 8008266:	6809      	ldr	r1, [r1, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	e003      	b.n	8008276 <_printf_i+0x7e>
 800826e:	2a75      	cmp	r2, #117	; 0x75
 8008270:	d016      	beq.n	80082a0 <_printf_i+0xa8>
 8008272:	2a78      	cmp	r2, #120	; 0x78
 8008274:	d1d7      	bne.n	8008226 <_printf_i+0x2e>
 8008276:	0022      	movs	r2, r4
 8008278:	2178      	movs	r1, #120	; 0x78
 800827a:	3245      	adds	r2, #69	; 0x45
 800827c:	7011      	strb	r1, [r2, #0]
 800827e:	4e61      	ldr	r6, [pc, #388]	; (8008404 <_printf_i+0x20c>)
 8008280:	e022      	b.n	80082c8 <_printf_i+0xd0>
 8008282:	0025      	movs	r5, r4
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	3542      	adds	r5, #66	; 0x42
 8008288:	1d11      	adds	r1, r2, #4
 800828a:	6019      	str	r1, [r3, #0]
 800828c:	6813      	ldr	r3, [r2, #0]
 800828e:	702b      	strb	r3, [r5, #0]
 8008290:	2301      	movs	r3, #1
 8008292:	e065      	b.n	8008360 <_printf_i+0x168>
 8008294:	6808      	ldr	r0, [r1, #0]
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	0669      	lsls	r1, r5, #25
 800829a:	d5d3      	bpl.n	8008244 <_printf_i+0x4c>
 800829c:	b200      	sxth	r0, r0
 800829e:	e7d1      	b.n	8008244 <_printf_i+0x4c>
 80082a0:	6819      	ldr	r1, [r3, #0]
 80082a2:	6825      	ldr	r5, [r4, #0]
 80082a4:	1d08      	adds	r0, r1, #4
 80082a6:	6018      	str	r0, [r3, #0]
 80082a8:	6808      	ldr	r0, [r1, #0]
 80082aa:	062e      	lsls	r6, r5, #24
 80082ac:	d505      	bpl.n	80082ba <_printf_i+0xc2>
 80082ae:	4e54      	ldr	r6, [pc, #336]	; (8008400 <_printf_i+0x208>)
 80082b0:	2708      	movs	r7, #8
 80082b2:	2a6f      	cmp	r2, #111	; 0x6f
 80082b4:	d01b      	beq.n	80082ee <_printf_i+0xf6>
 80082b6:	270a      	movs	r7, #10
 80082b8:	e019      	b.n	80082ee <_printf_i+0xf6>
 80082ba:	066d      	lsls	r5, r5, #25
 80082bc:	d5f7      	bpl.n	80082ae <_printf_i+0xb6>
 80082be:	b280      	uxth	r0, r0
 80082c0:	e7f5      	b.n	80082ae <_printf_i+0xb6>
 80082c2:	3145      	adds	r1, #69	; 0x45
 80082c4:	4e4e      	ldr	r6, [pc, #312]	; (8008400 <_printf_i+0x208>)
 80082c6:	700a      	strb	r2, [r1, #0]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	1d01      	adds	r1, r0, #4
 80082ce:	6800      	ldr	r0, [r0, #0]
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	0615      	lsls	r5, r2, #24
 80082d4:	d521      	bpl.n	800831a <_printf_i+0x122>
 80082d6:	07d3      	lsls	r3, r2, #31
 80082d8:	d502      	bpl.n	80082e0 <_printf_i+0xe8>
 80082da:	2320      	movs	r3, #32
 80082dc:	431a      	orrs	r2, r3
 80082de:	6022      	str	r2, [r4, #0]
 80082e0:	2710      	movs	r7, #16
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d103      	bne.n	80082ee <_printf_i+0xf6>
 80082e6:	2320      	movs	r3, #32
 80082e8:	6822      	ldr	r2, [r4, #0]
 80082ea:	439a      	bics	r2, r3
 80082ec:	6022      	str	r2, [r4, #0]
 80082ee:	0023      	movs	r3, r4
 80082f0:	2200      	movs	r2, #0
 80082f2:	3343      	adds	r3, #67	; 0x43
 80082f4:	701a      	strb	r2, [r3, #0]
 80082f6:	6863      	ldr	r3, [r4, #4]
 80082f8:	60a3      	str	r3, [r4, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db58      	blt.n	80083b0 <_printf_i+0x1b8>
 80082fe:	2204      	movs	r2, #4
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	4391      	bics	r1, r2
 8008304:	6021      	str	r1, [r4, #0]
 8008306:	2800      	cmp	r0, #0
 8008308:	d154      	bne.n	80083b4 <_printf_i+0x1bc>
 800830a:	9d02      	ldr	r5, [sp, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d05a      	beq.n	80083c6 <_printf_i+0x1ce>
 8008310:	0025      	movs	r5, r4
 8008312:	7833      	ldrb	r3, [r6, #0]
 8008314:	3542      	adds	r5, #66	; 0x42
 8008316:	702b      	strb	r3, [r5, #0]
 8008318:	e055      	b.n	80083c6 <_printf_i+0x1ce>
 800831a:	0655      	lsls	r5, r2, #25
 800831c:	d5db      	bpl.n	80082d6 <_printf_i+0xde>
 800831e:	b280      	uxth	r0, r0
 8008320:	e7d9      	b.n	80082d6 <_printf_i+0xde>
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	680d      	ldr	r5, [r1, #0]
 8008326:	1d10      	adds	r0, r2, #4
 8008328:	6949      	ldr	r1, [r1, #20]
 800832a:	6018      	str	r0, [r3, #0]
 800832c:	6813      	ldr	r3, [r2, #0]
 800832e:	062e      	lsls	r6, r5, #24
 8008330:	d501      	bpl.n	8008336 <_printf_i+0x13e>
 8008332:	6019      	str	r1, [r3, #0]
 8008334:	e002      	b.n	800833c <_printf_i+0x144>
 8008336:	066d      	lsls	r5, r5, #25
 8008338:	d5fb      	bpl.n	8008332 <_printf_i+0x13a>
 800833a:	8019      	strh	r1, [r3, #0]
 800833c:	2300      	movs	r3, #0
 800833e:	9d02      	ldr	r5, [sp, #8]
 8008340:	6123      	str	r3, [r4, #16]
 8008342:	e04f      	b.n	80083e4 <_printf_i+0x1ec>
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	1d11      	adds	r1, r2, #4
 8008348:	6019      	str	r1, [r3, #0]
 800834a:	6815      	ldr	r5, [r2, #0]
 800834c:	2100      	movs	r1, #0
 800834e:	6862      	ldr	r2, [r4, #4]
 8008350:	0028      	movs	r0, r5
 8008352:	f000 f915 	bl	8008580 <memchr>
 8008356:	2800      	cmp	r0, #0
 8008358:	d001      	beq.n	800835e <_printf_i+0x166>
 800835a:	1b40      	subs	r0, r0, r5
 800835c:	6060      	str	r0, [r4, #4]
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	2300      	movs	r3, #0
 8008364:	9a02      	ldr	r2, [sp, #8]
 8008366:	7013      	strb	r3, [r2, #0]
 8008368:	e03c      	b.n	80083e4 <_printf_i+0x1ec>
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	002a      	movs	r2, r5
 800836e:	9904      	ldr	r1, [sp, #16]
 8008370:	9803      	ldr	r0, [sp, #12]
 8008372:	9d05      	ldr	r5, [sp, #20]
 8008374:	47a8      	blx	r5
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d03e      	beq.n	80083f8 <_printf_i+0x200>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	079b      	lsls	r3, r3, #30
 800837e:	d415      	bmi.n	80083ac <_printf_i+0x1b4>
 8008380:	9b07      	ldr	r3, [sp, #28]
 8008382:	68e0      	ldr	r0, [r4, #12]
 8008384:	4298      	cmp	r0, r3
 8008386:	da39      	bge.n	80083fc <_printf_i+0x204>
 8008388:	0018      	movs	r0, r3
 800838a:	e037      	b.n	80083fc <_printf_i+0x204>
 800838c:	0022      	movs	r2, r4
 800838e:	2301      	movs	r3, #1
 8008390:	3219      	adds	r2, #25
 8008392:	9904      	ldr	r1, [sp, #16]
 8008394:	9803      	ldr	r0, [sp, #12]
 8008396:	9e05      	ldr	r6, [sp, #20]
 8008398:	47b0      	blx	r6
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	d02c      	beq.n	80083f8 <_printf_i+0x200>
 800839e:	3501      	adds	r5, #1
 80083a0:	68e3      	ldr	r3, [r4, #12]
 80083a2:	9a07      	ldr	r2, [sp, #28]
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	dcf0      	bgt.n	800838c <_printf_i+0x194>
 80083aa:	e7e9      	b.n	8008380 <_printf_i+0x188>
 80083ac:	2500      	movs	r5, #0
 80083ae:	e7f7      	b.n	80083a0 <_printf_i+0x1a8>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d0ad      	beq.n	8008310 <_printf_i+0x118>
 80083b4:	9d02      	ldr	r5, [sp, #8]
 80083b6:	0039      	movs	r1, r7
 80083b8:	f7f7 ff2a 	bl	8000210 <__aeabi_uidivmod>
 80083bc:	5c73      	ldrb	r3, [r6, r1]
 80083be:	3d01      	subs	r5, #1
 80083c0:	702b      	strb	r3, [r5, #0]
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d1f7      	bne.n	80083b6 <_printf_i+0x1be>
 80083c6:	2f08      	cmp	r7, #8
 80083c8:	d109      	bne.n	80083de <_printf_i+0x1e6>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	07db      	lsls	r3, r3, #31
 80083ce:	d506      	bpl.n	80083de <_printf_i+0x1e6>
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	4293      	cmp	r3, r2
 80083d6:	dc02      	bgt.n	80083de <_printf_i+0x1e6>
 80083d8:	2330      	movs	r3, #48	; 0x30
 80083da:	3d01      	subs	r5, #1
 80083dc:	702b      	strb	r3, [r5, #0]
 80083de:	9b02      	ldr	r3, [sp, #8]
 80083e0:	1b5b      	subs	r3, r3, r5
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	aa07      	add	r2, sp, #28
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	0021      	movs	r1, r4
 80083ec:	9b04      	ldr	r3, [sp, #16]
 80083ee:	9803      	ldr	r0, [sp, #12]
 80083f0:	f7ff fe94 	bl	800811c <_printf_common>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d1b8      	bne.n	800836a <_printf_i+0x172>
 80083f8:	2001      	movs	r0, #1
 80083fa:	4240      	negs	r0, r0
 80083fc:	b009      	add	sp, #36	; 0x24
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008400:	08009f11 	.word	0x08009f11
 8008404:	08009f22 	.word	0x08009f22

08008408 <_sbrk_r>:
 8008408:	2300      	movs	r3, #0
 800840a:	b570      	push	{r4, r5, r6, lr}
 800840c:	4c06      	ldr	r4, [pc, #24]	; (8008428 <_sbrk_r+0x20>)
 800840e:	0005      	movs	r5, r0
 8008410:	0008      	movs	r0, r1
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	f7f8 fc48 	bl	8000ca8 <_sbrk>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d103      	bne.n	8008424 <_sbrk_r+0x1c>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d000      	beq.n	8008424 <_sbrk_r+0x1c>
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	20000620 	.word	0x20000620

0800842c <__sread>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	000c      	movs	r4, r1
 8008430:	250e      	movs	r5, #14
 8008432:	5f49      	ldrsh	r1, [r1, r5]
 8008434:	f000 f8f4 	bl	8008620 <_read_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	db03      	blt.n	8008444 <__sread+0x18>
 800843c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800843e:	181b      	adds	r3, r3, r0
 8008440:	6563      	str	r3, [r4, #84]	; 0x54
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	4a02      	ldr	r2, [pc, #8]	; (8008450 <__sread+0x24>)
 8008448:	4013      	ands	r3, r2
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	e7f9      	b.n	8008442 <__sread+0x16>
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	ffffefff 	.word	0xffffefff

08008454 <__swrite>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	001f      	movs	r7, r3
 8008458:	898b      	ldrh	r3, [r1, #12]
 800845a:	0005      	movs	r5, r0
 800845c:	000c      	movs	r4, r1
 800845e:	0016      	movs	r6, r2
 8008460:	05db      	lsls	r3, r3, #23
 8008462:	d505      	bpl.n	8008470 <__swrite+0x1c>
 8008464:	230e      	movs	r3, #14
 8008466:	5ec9      	ldrsh	r1, [r1, r3]
 8008468:	2200      	movs	r2, #0
 800846a:	2302      	movs	r3, #2
 800846c:	f000 f874 	bl	8008558 <_lseek_r>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	4a05      	ldr	r2, [pc, #20]	; (8008488 <__swrite+0x34>)
 8008474:	0028      	movs	r0, r5
 8008476:	4013      	ands	r3, r2
 8008478:	81a3      	strh	r3, [r4, #12]
 800847a:	0032      	movs	r2, r6
 800847c:	230e      	movs	r3, #14
 800847e:	5ee1      	ldrsh	r1, [r4, r3]
 8008480:	003b      	movs	r3, r7
 8008482:	f000 f81f 	bl	80084c4 <_write_r>
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008488:	ffffefff 	.word	0xffffefff

0800848c <__sseek>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	000c      	movs	r4, r1
 8008490:	250e      	movs	r5, #14
 8008492:	5f49      	ldrsh	r1, [r1, r5]
 8008494:	f000 f860 	bl	8008558 <_lseek_r>
 8008498:	89a3      	ldrh	r3, [r4, #12]
 800849a:	1c42      	adds	r2, r0, #1
 800849c:	d103      	bne.n	80084a6 <__sseek+0x1a>
 800849e:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <__sseek+0x28>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	bd70      	pop	{r4, r5, r6, pc}
 80084a6:	2280      	movs	r2, #128	; 0x80
 80084a8:	0152      	lsls	r2, r2, #5
 80084aa:	4313      	orrs	r3, r2
 80084ac:	81a3      	strh	r3, [r4, #12]
 80084ae:	6560      	str	r0, [r4, #84]	; 0x54
 80084b0:	e7f8      	b.n	80084a4 <__sseek+0x18>
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	ffffefff 	.word	0xffffefff

080084b8 <__sclose>:
 80084b8:	b510      	push	{r4, lr}
 80084ba:	230e      	movs	r3, #14
 80084bc:	5ec9      	ldrsh	r1, [r1, r3]
 80084be:	f000 f815 	bl	80084ec <_close_r>
 80084c2:	bd10      	pop	{r4, pc}

080084c4 <_write_r>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	0005      	movs	r5, r0
 80084c8:	0008      	movs	r0, r1
 80084ca:	0011      	movs	r1, r2
 80084cc:	2200      	movs	r2, #0
 80084ce:	4c06      	ldr	r4, [pc, #24]	; (80084e8 <_write_r+0x24>)
 80084d0:	6022      	str	r2, [r4, #0]
 80084d2:	001a      	movs	r2, r3
 80084d4:	f7f8 fb9f 	bl	8000c16 <_write>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d103      	bne.n	80084e4 <_write_r+0x20>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d000      	beq.n	80084e4 <_write_r+0x20>
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	20000620 	.word	0x20000620

080084ec <_close_r>:
 80084ec:	2300      	movs	r3, #0
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	4c06      	ldr	r4, [pc, #24]	; (800850c <_close_r+0x20>)
 80084f2:	0005      	movs	r5, r0
 80084f4:	0008      	movs	r0, r1
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	f7f8 fba9 	bl	8000c4e <_close>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d103      	bne.n	8008508 <_close_r+0x1c>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d000      	beq.n	8008508 <_close_r+0x1c>
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	20000620 	.word	0x20000620

08008510 <_fstat_r>:
 8008510:	2300      	movs	r3, #0
 8008512:	b570      	push	{r4, r5, r6, lr}
 8008514:	4c06      	ldr	r4, [pc, #24]	; (8008530 <_fstat_r+0x20>)
 8008516:	0005      	movs	r5, r0
 8008518:	0008      	movs	r0, r1
 800851a:	0011      	movs	r1, r2
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	f7f8 fba0 	bl	8000c62 <_fstat>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d103      	bne.n	800852e <_fstat_r+0x1e>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d000      	beq.n	800852e <_fstat_r+0x1e>
 800852c:	602b      	str	r3, [r5, #0]
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	20000620 	.word	0x20000620

08008534 <_isatty_r>:
 8008534:	2300      	movs	r3, #0
 8008536:	b570      	push	{r4, r5, r6, lr}
 8008538:	4c06      	ldr	r4, [pc, #24]	; (8008554 <_isatty_r+0x20>)
 800853a:	0005      	movs	r5, r0
 800853c:	0008      	movs	r0, r1
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	f7f8 fb9d 	bl	8000c7e <_isatty>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d103      	bne.n	8008550 <_isatty_r+0x1c>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d000      	beq.n	8008550 <_isatty_r+0x1c>
 800854e:	602b      	str	r3, [r5, #0]
 8008550:	bd70      	pop	{r4, r5, r6, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	20000620 	.word	0x20000620

08008558 <_lseek_r>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	0005      	movs	r5, r0
 800855c:	0008      	movs	r0, r1
 800855e:	0011      	movs	r1, r2
 8008560:	2200      	movs	r2, #0
 8008562:	4c06      	ldr	r4, [pc, #24]	; (800857c <_lseek_r+0x24>)
 8008564:	6022      	str	r2, [r4, #0]
 8008566:	001a      	movs	r2, r3
 8008568:	f7f8 fb92 	bl	8000c90 <_lseek>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d103      	bne.n	8008578 <_lseek_r+0x20>
 8008570:	6823      	ldr	r3, [r4, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d000      	beq.n	8008578 <_lseek_r+0x20>
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	20000620 	.word	0x20000620

08008580 <memchr>:
 8008580:	b2c9      	uxtb	r1, r1
 8008582:	1882      	adds	r2, r0, r2
 8008584:	4290      	cmp	r0, r2
 8008586:	d101      	bne.n	800858c <memchr+0xc>
 8008588:	2000      	movs	r0, #0
 800858a:	4770      	bx	lr
 800858c:	7803      	ldrb	r3, [r0, #0]
 800858e:	428b      	cmp	r3, r1
 8008590:	d0fb      	beq.n	800858a <memchr+0xa>
 8008592:	3001      	adds	r0, #1
 8008594:	e7f6      	b.n	8008584 <memchr+0x4>

08008596 <memcpy>:
 8008596:	2300      	movs	r3, #0
 8008598:	b510      	push	{r4, lr}
 800859a:	429a      	cmp	r2, r3
 800859c:	d100      	bne.n	80085a0 <memcpy+0xa>
 800859e:	bd10      	pop	{r4, pc}
 80085a0:	5ccc      	ldrb	r4, [r1, r3]
 80085a2:	54c4      	strb	r4, [r0, r3]
 80085a4:	3301      	adds	r3, #1
 80085a6:	e7f8      	b.n	800859a <memcpy+0x4>

080085a8 <memmove>:
 80085a8:	b510      	push	{r4, lr}
 80085aa:	4288      	cmp	r0, r1
 80085ac:	d902      	bls.n	80085b4 <memmove+0xc>
 80085ae:	188b      	adds	r3, r1, r2
 80085b0:	4298      	cmp	r0, r3
 80085b2:	d303      	bcc.n	80085bc <memmove+0x14>
 80085b4:	2300      	movs	r3, #0
 80085b6:	e007      	b.n	80085c8 <memmove+0x20>
 80085b8:	5c8b      	ldrb	r3, [r1, r2]
 80085ba:	5483      	strb	r3, [r0, r2]
 80085bc:	3a01      	subs	r2, #1
 80085be:	d2fb      	bcs.n	80085b8 <memmove+0x10>
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	5ccc      	ldrb	r4, [r1, r3]
 80085c4:	54c4      	strb	r4, [r0, r3]
 80085c6:	3301      	adds	r3, #1
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d1fa      	bne.n	80085c2 <memmove+0x1a>
 80085cc:	e7f8      	b.n	80085c0 <memmove+0x18>

080085ce <__malloc_lock>:
 80085ce:	4770      	bx	lr

080085d0 <__malloc_unlock>:
 80085d0:	4770      	bx	lr

080085d2 <_realloc_r>:
 80085d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d4:	0007      	movs	r7, r0
 80085d6:	000d      	movs	r5, r1
 80085d8:	0016      	movs	r6, r2
 80085da:	2900      	cmp	r1, #0
 80085dc:	d105      	bne.n	80085ea <_realloc_r+0x18>
 80085de:	0011      	movs	r1, r2
 80085e0:	f7ff fbde 	bl	8007da0 <_malloc_r>
 80085e4:	0004      	movs	r4, r0
 80085e6:	0020      	movs	r0, r4
 80085e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d103      	bne.n	80085f6 <_realloc_r+0x24>
 80085ee:	f7ff fb8d 	bl	8007d0c <_free_r>
 80085f2:	0034      	movs	r4, r6
 80085f4:	e7f7      	b.n	80085e6 <_realloc_r+0x14>
 80085f6:	f000 f827 	bl	8008648 <_malloc_usable_size_r>
 80085fa:	002c      	movs	r4, r5
 80085fc:	42b0      	cmp	r0, r6
 80085fe:	d2f2      	bcs.n	80085e6 <_realloc_r+0x14>
 8008600:	0031      	movs	r1, r6
 8008602:	0038      	movs	r0, r7
 8008604:	f7ff fbcc 	bl	8007da0 <_malloc_r>
 8008608:	1e04      	subs	r4, r0, #0
 800860a:	d0ec      	beq.n	80085e6 <_realloc_r+0x14>
 800860c:	0029      	movs	r1, r5
 800860e:	0032      	movs	r2, r6
 8008610:	f7ff ffc1 	bl	8008596 <memcpy>
 8008614:	0029      	movs	r1, r5
 8008616:	0038      	movs	r0, r7
 8008618:	f7ff fb78 	bl	8007d0c <_free_r>
 800861c:	e7e3      	b.n	80085e6 <_realloc_r+0x14>
	...

08008620 <_read_r>:
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	0005      	movs	r5, r0
 8008624:	0008      	movs	r0, r1
 8008626:	0011      	movs	r1, r2
 8008628:	2200      	movs	r2, #0
 800862a:	4c06      	ldr	r4, [pc, #24]	; (8008644 <_read_r+0x24>)
 800862c:	6022      	str	r2, [r4, #0]
 800862e:	001a      	movs	r2, r3
 8008630:	f7f8 fad4 	bl	8000bdc <_read>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d103      	bne.n	8008640 <_read_r+0x20>
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d000      	beq.n	8008640 <_read_r+0x20>
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	bd70      	pop	{r4, r5, r6, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	20000620 	.word	0x20000620

08008648 <_malloc_usable_size_r>:
 8008648:	1f0b      	subs	r3, r1, #4
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	1f18      	subs	r0, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	da01      	bge.n	8008656 <_malloc_usable_size_r+0xe>
 8008652:	580b      	ldr	r3, [r1, r0]
 8008654:	18c0      	adds	r0, r0, r3
 8008656:	4770      	bx	lr

08008658 <_init>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	46c0      	nop			; (mov r8, r8)
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr

08008664 <_fini>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866a:	bc08      	pop	{r3}
 800866c:	469e      	mov	lr, r3
 800866e:	4770      	bx	lr
